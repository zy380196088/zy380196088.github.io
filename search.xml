<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[React学习]]></title>
      <url>http://zy380196088.github.io./2016/09/14/React%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h1 id="Component-的创建和复合"><a href="#Component-的创建和复合" class="headerlink" title="Component 的创建和复合"></a>Component 的创建和复合</h1><h2 id="React简介"><a href="#React简介" class="headerlink" title="React简介"></a>React简介</h2><h3 id="对-React-JS-的认识-及其优点"><a href="#对-React-JS-的认识-及其优点" class="headerlink" title="对 React.JS 的认识 及其优点"></a>对 React.JS 的认识 及其优点</h3><p>React 并不是一个完整的 MVC 框架,最多可以认为是 MVC 中的 V(View);<br>React 不是一个新的模板语言, JSX 只是一个表现,没有 JSX 的 React也能工作.</p>
<p>React本质上是一个”状态机”,可以帮助开发者管理复杂的随着时间变化的状态.<br>React只关心两件事情:</p>
<ol>
<li>更新 DOM</li>
<li>响应时事件</li>
</ol>
<a id="more"></a>
<p>React运用一个虚拟的 DOM 实现了一个非常强大的渲染系统,在 React 忠对 DOM 只更新不读取.<br>它以渲染函数为基础. 当函数读入当前的状态,将其转换为目标页面上的一个虚拟表现.只要 React 被告知状态有变化,它就会重新运行这些函数,计算出页面的一个新的虚拟表现,接着自动的把结果转换成必要的 DOM 更新来反映新的表现.</p>
<h2 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h2><h3 id="在-React-中使用-JSX-的好处"><a href="#在-React-中使用-JSX-的好处" class="headerlink" title="在 React 中使用 JSX 的好处:"></a>在 React 中使用 JSX 的好处:</h3><ol>
<li>允许使用熟悉的语法来定义 HTML 元素树;</li>
<li>提供更加语义化且易懂的标签;</li>
<li>程序结构更容易被直观化;</li>
<li>抽象了 React Element 的创建过程;</li>
<li>可以随时掌控 HTML 标签以及生成这些标签的代码;</li>
<li>是原生的 JavaScript;</li>
</ol>
<p>JSX 允许你在应用程序中使用所有预定义的 HTML5标签及自定义组件.</p>
<h3 id="复合组件"><a href="#复合组件" class="headerlink" title="复合组件"></a>复合组件</h3><ol>
<li>定义一个自定义组件<br>假设我们想写一个分页组件,希望输出如下 HTML:</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div className = <span class="string">"divider"</span>&gt;</div><div class="line">	<span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Questions<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span> &lt;hr /&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>想要将 HTML 片段表示为 React Component , 只需要像下面这样包装起来,然后再 render 方法中返回这些标签.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Divider = React.createClass(&#123;</div><div class="line">	<span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> (</div><div class="line">		<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span> =<span class="string">"divider"</span>&gt;</span></span></div><div class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>Questions<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		);</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>目前这还是个一次性的组件,想要让这个组件变得实用,还需要一种将 h2标签中的文本表示出来的动态方法.</p>
<ol>
<li>使用动态值<br>JSX 将两个花括号之间的内容{…}渲染为动态值.花括号指明了一个 JavaScript 上下文环境–你在花括号中放入的任何东西都会被进行求值,得到的结果被渲染为标签中的若干节点.</li>
</ol>
<p>React 通过将数组中的每个元素渲染为一个节点的方式对数组进行自动求值;</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var text = ['hello','world'];</div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;text&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">//<span class="tag">&lt;<span class="name">h2</span>&gt;</span>helloworld<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>子节点<br>在 HTML 中,使用<h2>Questions</h2>来渲染一个 header元素,这里” Question” 就是 h2元素的子文本节点.而在 JSX 中,我们的目标是用下面的方式来表示它:</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Divider</span>&gt;</span>Question<span class="tag">&lt;/<span class="name">Divider</span>&gt;</span></div></pre></td></tr></table></figure>
<p>React 将开始标签与结束标签之间的所有子节点保存在一个名为 this.props.children的特殊组件属性中.<br>在上面的例子中,<code>this.props.children == [&quot;Questions&quot;].</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Divider = React.createClass(&#123;</div><div class="line">	<span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> (</div><div class="line">			<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span> =<span class="string">"divider"</span>&gt;</span></span></div><div class="line">				<span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;this.props.children&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		);</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>将上面的 JSX 代码转换为 JavaScript 时,会得到下面的结果:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Divder = React.createClass(&#123;<span class="attr">displayName</span>:<span class="string">'Divider'</span>,</div><div class="line">	<span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> (</div><div class="line">			React.createElement(<span class="string">"div"</span>,&#123;<span class="attr">className</span>:<span class="string">"divider"</span>&#125;,</div><div class="line">			React.createElement(<span class="string">"h2"</span>,<span class="literal">null</span>,<span class="keyword">this</span>.props.children),</div><div class="line">			React.createElement(<span class="string">"hr"</span>,<span class="literal">null</span>)</div><div class="line">			)</div><div class="line">		);</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="JSX与-HTML-有何不同"><a href="#JSX与-HTML-有何不同" class="headerlink" title="JSX与 HTML 有何不同"></a>JSX与 HTML 有何不同</h3><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><p>JSX 提供了将属性设置为动态 JavaScript 变量的便利,要设置动态的属性,需要将原本用引号括起来的文本替换成花括号包裹的 JavaScript 变量.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> surveyQuestionId = <span class="keyword">this</span>.props.id;</div><div class="line"><span class="keyword">var</span> classes =<span class="string">'some-class-name'</span>;</div><div class="line">...</div><div class="line">&lt;div id=&#123;surveyQuestionId&#125; className =&#123;classes&#125;&gt;...&lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure>
<p>对于更复杂的情景,还可以将属性设置为一个函数调用返回的结果:</p>
<p><code>&lt;div id={this.getSurveyId()}&gt;...&lt;/div&gt;</code></p>
<h4 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h4><p>想要在组件中添加条件判断似乎是件很困难的事情,若直接往 JSX 中加入 if 语句会渲染出无效的 JavaScript,解决的办法可以使用以下某种方法:</p>
<ol>
<li><p>使用三目运算符</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span> = <span class="string">&#123;</span></span></span></div><div class="line">		<span class="attr">this.state.isComplete</span> ? '<span class="attr">is-complete</span>' <span class="attr">:</span>''</div><div class="line">	&#125;&gt;...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>设置一个变量并在属性中引用它</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">getIsComplete: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.state.isComplete ? <span class="string">'is-complete'</span> : <span class="string">''</span>;</div><div class="line">&#125;,</div><div class="line"><span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> isComplete = <span class="keyword">this</span>.getIsComplete();</div><div class="line">	<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span> = <span class="string">&#123;isComplete&#125;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>将逻辑转化到函数中</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">getIsComplete: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.state.isComplete ? <span class="string">'is-complete'</span> : <span class="string">''</span>;</div><div class="line">&#125;,</div><div class="line"><span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span> = <span class="string">&#123;this.getIsComlete()&#125;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;	&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<pre><code>4. 使用&amp;&amp;运算符
</code></pre><p>由于对于null  或 false 值 React 不会输出任何内容,因此你可以使用一个后面跟随了期望字符串的布尔值来实现条件判断,如果这个布尔值为 true, 那么后续的字符串就会被使用.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span> = <span class="string">&#123;this.state.isComplete</span> &amp;&amp; '<span class="attr">is-complete</span>'&#125;&gt;</span></span></div><div class="line">	...</div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="非-DOM-属性"><a href="#非-DOM-属性" class="headerlink" title="非 DOM 属性"></a>非 DOM 属性</h4><p>下面特殊属性只在 JSX 中存在:</p>
<ol>
<li><p>key</p>
<p> key 是一个可选的唯一标识符.在程序运行的过程中,一个组件可能会在组件树中调整位置,比如当用户在进行搜索操作时,或者当一个列表中的物品被增加,删除时,当这些情况发生时,组件可能并不需要被销毁并重新创建.<br> 通过给组件设置一个独一无二的键,并确保它在一个渲染周期中保持一致,似的 react 能够更智能地决定应该重用一个组件,还是销毁并重新创建一个组件,进而提升渲染性能.当两个已经存在于 DOM 中的组件交换位置是, react 能够匹配对应的键并进行相应的移动,且不需要完全重新渲染 DOM.</p>
</li>
<li><p>ref</p>
<p> ref 允许父组件在 render 方法之外保持对子组件的一个引用.<br> JSX 中,你可以通过在属性中设置期望的引用名来定义一个引用.</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">"myInput"</span> <span class="attr">...</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 之后,你就可以在组件中的任何地方使用 this.refs.myInput获取这个引用.通过引用获取到的这个对象被称为<strong>支持实例</strong>.它并不是真正的 DOM, 而是 react 在需要时用来创建 DOM 的一个描述对象.可以使用 this.refs.myInput.getDOMNode()访问真实的 DOM 节点.</p>
<ol>
<li>dangerouslySetInnerHTML</li>
</ol>
</li>
</ol>
<h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><p>在 JSX 中,捕获一个事件就像给组件的方法设置一个属性一样简单.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">handleClick : <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;...&#125;,</div><div class="line"><span class="attr">render</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span> = <span class="string">&#123;this.handleClick&#125;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意, react 自动绑定了组件所有方法的作用域,因此你永远都不需要手动绑定.</p>
<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>注释可以用以下两种形式添加:</p>
<ol>
<li>当作一个元素的在子节点</li>
<li>内年在元素属性中</li>
</ol>
<h4 id="特殊属性"><a href="#特殊属性" class="headerlink" title="特殊属性"></a>特殊属性</h4><p>由于 JSX 会转换为原生的 JavaScript 函数,因此有些关键词使我们不能用的—例如 for 和 class.<br>要给表单里的标签添加for属性需要使用htmlFor.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span> =<span class="string">"for-text"</span><span class="attr">...</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h4><p>React把所有内敛样式都规划为了驼峰形式,与JavaScript中 DOM 的 style 属性一致.<br>要添加一个自定义的样式属性,只需简单地把驼峰形式的属性名及期望的 CSS 值拼装为对象即可.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> styles = &#123;</div><div class="line">	<span class="attr">borderColor</span>:<span class="string">"#999"</span>,</div><div class="line">	<span class="attr">borderThickness</span>:<span class="string">"1px"</span></div><div class="line">&#125;;</div><div class="line">React.renderComponent(<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span> =<span class="string">&#123;styles&#125;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>,node);</div></pre></td></tr></table></figure>
<h3 id="没有JSX的React"><a href="#没有JSX的React" class="headerlink" title="没有JSX的React"></a>没有JSX的React</h3><p>如果不打算在 react 中使用 JSX, 在 React中创建元素时需要知道以下三点:</p>
<ol>
<li>定义组件类.</li>
<li>创建一个为组件类产生实例的工厂.</li>
<li>使用工厂来创建 ReactElement实例.<h4 id="创建-React-元素"><a href="#创建-React-元素" class="headerlink" title="创建 React 元素"></a>创建 React 元素</h4>对于普通的 HTML 元素, react 在 React.DOM.* 命名空间下提供了一系列的工厂.这些预定义的工厂都是 React.createElement 的简写,只是帮你预置了第一个参数而已.下面两行语句会得到同样的结果.</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">React.createElement(<span class="string">'div'</span>);</div><div class="line">React.DOM.div();</div></pre></td></tr></table></figure>
<p>然而,对于自定义组件来说,你必须为组件类创建一个工厂.<br>回想之前我们定义的一个 Divider组件类.<br>下面将它重命名为 DividerClass, 以此来明确它的目的.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> DividerClass = React.createClass(&#123;</div><div class="line">	<span class="attr">displayName</span>:<span class="string">'Divider'</span>,</div><div class="line">	<span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> (</div><div class="line">			React.createE;e,emt(<span class="string">"div"</span>,&#123;<span class="attr">className</span>:<span class="string">'divider'</span>&#125;,</div><div class="line">			React.)</div><div class="line">		)</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h4 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h4><p>尽管 React.DOM.*命名空间非常方便,但重复地输入相同的内容总是让人觉得繁琐.我们可以用较短的变量名保存一个对 React.DOM的引用.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> R = React.DOM;</div><div class="line"><span class="keyword">var</span> DividerClass = React.createClass(&#123;<span class="attr">displayName</span>:<span class="string">'Dividider'</span>,</div><div class="line">	<span class="attr">render</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> R.div(&#123;<span class="attr">className</span>:<span class="string">"divider"</span>&#125;,</div><div class="line">		R.h2(<span class="literal">null</span>,<span class="string">"Label Text"</span>),</div><div class="line">		R.hr()</div><div class="line">		);</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h2><h3 id="生命周期方法"><a href="#生命周期方法" class="headerlink" title="生命周期方法"></a>生命周期方法</h3><h4 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h4><p>一个实例初次被创建时所调用的生命周期方法与其他各个后续实例被创建时所调用的略有不同.当首次使用一个组件类时,可以看到下面这些方法依次被调用:</p>
<ol>
<li><p>getDefaultProps<br> 对于组件类来说这个方法只会被调用一次.对于那些没有被父辈组件制定props 属性的新建实例来说,这个方法返回的对象可用于为十里设置默认的props值.</p>
</li>
<li><p>getInitialState<br> 对于组件的每个实例来说,这个方法的调用次数有且只有一次,在这里你将有机会初始化每个实例的 state.与 getDefaultProps方法不同的是,每次实例创建时该方法都会被调用一次.在这个方法里,我们可以访问到 this.props</p>
</li>
<li><p>componentWillMount<br> 在完成首次渲染之前被调用,<strong>是在 render 方法调用前可以修改组件 state 的最后一次机会.</strong></p>
</li>
<li><p>render<br> 在这创建一个虚拟 DOM,用来表示组件的输出.对于一个组件来说, render 是唯一一个<strong>必需</strong>的方法,并且有特定的规则.<br> render 方法需要满足下面几点:<br> – 只能通过 this.props 和 this.state访问数据;<br> – 可以返回 null ,false 活着任何 React组件;<br> – 只能出现一个顶级组件(不能返回一组元素);<br> – 必需<strong>纯净</strong>,意味着不能改变组件的状态活着修改 DOM 的输出.<br> render 方法返回的结果不是真正的 DOM, 而是一个虚拟的表现, React随后会把它和真实的 DOM 做对比,来判断是否有必要做出修改.</p>
</li>
<li><p>componentDidMount<br> 在 render 方法成功调用,并且正式的 DOM 已经被渲染之后,可以在 componentDidMount 内部通过this.getDOMNode()方法访问到它.<br> 这就是可以用来访问原始 DOM 的<strong>生命周期钩子函数</strong>.比如,但你需要测量渲染出 DOM 元素的高度,或者使用计时器来操作它,亦或运行一个自定义的 jQuery 插件时,可以将这些操作挂载到这个方法上.</p>
<p> 举例来说,假设需要在一个通过 React 渲染出的表单元素上使用 jQuery UI 的 Autocomplete 插件,则可以像下面这样使用它:</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//需要自动补全的字符串列表</span></div><div class="line"><span class="keyword">var</span> datasource =[...];</div><div class="line"></div><div class="line"><span class="keyword">var</span> MyComponent = React.creatClass(&#123;</div><div class="line">	<span class="attr">render</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">...</span>/&gt;</span>;</span></div><div class="line">	&#125;,</div><div class="line">	componentDidMount : function()&#123;</div><div class="line">		$(this.getDOMNode()).autocomplete(&#123;</div><div class="line">			source:datasource</div><div class="line">			&#125;);</div><div class="line">		&#125;</div><div class="line">	&#125;);</div></pre></td></tr></table></figure>
<p> //注意,当 React运行在服务器端时, componentDidMount方法不会被调用.</p>
</li>
</ol>
<p>对于该组件类的所有后续应用,你将会看到下面的方法被一次调用.</p>
<ol>
<li>getInitialState</li>
<li>componentWillMount</li>
<li>render</li>
<li>componentDidMount</li>
</ol>
<h4 id="存在期"><a href="#存在期" class="headerlink" title="存在期"></a>存在期</h4><p>随着应用状态的改变,以及组件逐渐受到影响.下面的方法依次被调用:</p>
<ol>
<li><p>componentWillReceiveProps</p>
</li>
<li><p>shouldComponentUpdate</p>
</li>
<li>componentWillUpdate</li>
<li>render</li>
<li>componentDidUpdate</li>
</ol>
<h4 id="销毁-amp-清理期"><a href="#销毁-amp-清理期" class="headerlink" title="销毁&amp;清理期"></a>销毁&amp;清理期</h4><p> 最后,当该组件被使用完成后,componentWillUnmount犯法将会被调用,目的是给这个实例提供清理自身的机会.</p>
<h4 id="反模式-把计算后的赋值给-state"><a href="#反模式-把计算后的赋值给-state" class="headerlink" title="反模式:把计算后的赋值给 state"></a>反模式:把计算后的赋值给 state</h4><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h2 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h2><h3 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h3><h3 id="PropTypes"><a href="#PropTypes" class="headerlink" title="PropTypes"></a>PropTypes</h3><h3 id="getDefaultProps"><a href="#getDefaultProps" class="headerlink" title="getDefaultProps"></a>getDefaultProps</h3><h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><h3 id="放在-state-和-props-的各是哪些部分"><a href="#放在-state-和-props-的各是哪些部分" class="headerlink" title="放在 state 和 props 的各是哪些部分"></a>放在 state 和 props 的各是哪些部分</h3><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><h3 id="绑定事件处理器"><a href="#绑定事件处理器" class="headerlink" title="绑定事件处理器"></a>绑定事件处理器</h3><h3 id="事件和状态"><a href="#事件和状态" class="headerlink" title="事件和状态"></a>事件和状态</h3><h3 id="根据状态进行渲染"><a href="#根据状态进行渲染" class="headerlink" title="根据状态进行渲染"></a>根据状态进行渲染</h3><h3 id="更新状态"><a href="#更新状态" class="headerlink" title="更新状态"></a>更新状态</h3><h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><h2 id="组件的复合"><a href="#组件的复合" class="headerlink" title="组件的复合"></a>组件的复合</h2><h3 id="扩展-HTML"><a href="#扩展-HTML" class="headerlink" title="扩展 HTML"></a>扩展 HTML</h3><h3 id="组件符合的例子"><a href="#组件符合的例子" class="headerlink" title="组件符合的例子"></a>组件符合的例子</h3><h3 id="组装-HTML"><a href="#组装-HTML" class="headerlink" title="组装 HTML"></a>组装 HTML</h3><h3 id="追踪状态"><a href="#追踪状态" class="headerlink" title="追踪状态"></a>追踪状态</h3><h3 id="整合到父组件当中"><a href="#整合到父组件当中" class="headerlink" title="整合到父组件当中"></a>整合到父组件当中</h3><h3 id="父组件-子组件关系"><a href="#父组件-子组件关系" class="headerlink" title="父组件,子组件关系"></a>父组件,子组件关系</h3><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><h2 id="mixing"><a href="#mixing" class="headerlink" title="mixing"></a>mixing</h2><h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><h2 id="DOM-操作"><a href="#DOM-操作" class="headerlink" title="DOM 操作"></a>DOM 操作</h2><h3 id="DOM-操作-1"><a href="#DOM-操作-1" class="headerlink" title="DOM 操作"></a>DOM 操作</h3><h3 id="整合非-React类库"><a href="#整合非-React类库" class="headerlink" title="整合非 React类库"></a>整合非 React类库</h3><h3 id="侵入式插件"><a href="#侵入式插件" class="headerlink" title="侵入式插件"></a>侵入式插件</h3><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h2 id="服务端渲染"><a href="#服务端渲染" class="headerlink" title="服务端渲染"></a>服务端渲染</h2><h2 id="周边类库"><a href="#周边类库" class="headerlink" title="周边类库"></a>周边类库</h2><h1 id="React-工具"><a href="#React-工具" class="headerlink" title="React 工具"></a>React 工具</h1><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h1 id="React-实践"><a href="#React-实践" class="headerlink" title="React 实践"></a>React 实践</h1><h2 id="架构模式"><a href="#架构模式" class="headerlink" title="架构模式"></a>架构模式</h2><h2 id="其他使用场景"><a href="#其他使用场景" class="headerlink" title="其他使用场景"></a>其他使用场景</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[D3.js学习<精通 D3.js:交互式数据可视化高级编程>笔记]]></title>
      <url>http://zy380196088.github.io./2016/09/12/D3-js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="绘制网格线"><a href="#绘制网格线" class="headerlink" title="绘制网格线"></a>绘制网格线</h1><h2 id="思路步骤"><a href="#思路步骤" class="headerlink" title="思路步骤"></a>思路步骤</h2><ol>
<li>绘制SVG容器</li>
<li>给 SVG 分组,并设置分组的样式类</li>
<li>为分组分别添加横线和竖线</li>
</ol>
<a id="more"></a>
<h2 id="关键技术"><a href="#关键技术" class="headerlink" title="关键技术"></a>关键技术</h2><p>完整代码:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charsetmeta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>linegrid<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">styletypestyletype="text</span>/<span class="attr">css</span>"&gt;</span></div><div class="line">            //分组中线的样式，这里设置了颜色值，实际使用可以更淡，例如stroke: #ccc  </div><div class="line">            .gridline&#123;</div><div class="line">                stroke: #000;</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> <span class="attr">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"d3.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="comment">&lt;!--下载到本地--&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="xml"></span></div><div class="line">            var data = d3.range(10);// (1) 生成一个10元素的数组</div><div class="line">            var w = 960,</div><div class="line">            h= 500,</div><div class="line">            p= 40,//内边距</div><div class="line">            x= d3.scale.linear().domain([0, 1]).range([p, w - p]), //(2) 定义x和y比例尺</div><div class="line">            y= d3.scale.linear().domain([0, 1]).range([h - p, p]);</div><div class="line">            //(3) 绘制SVG</div><div class="line">            var svg = d3.select("body")</div><div class="line">                .append("svg")</div><div class="line">                .attr("width", w)</div><div class="line">                .attr("height", h);</div><div class="line">            //(4) 给SVG添加分组，并设置样式类，样式见<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined">标签中的设置  </span></div><div class="line">            var grid = svg.selectAll(".grid")</div><div class="line">                .data(x.ticks(10))</div><div class="line">                .enter().append("g")</div><div class="line">                .attr("class", "grid");</div><div class="line">            //(5) 添加线条，设置起始坐标(x1,y1)和结束坐标(x2,y2)的值即可</div><div class="line">            //竖线</div><div class="line">            grid.append("line")</div><div class="line">            .attr("x1", x)</div><div class="line">            .attr("x2", x)</div><div class="line">            .attr("y1", p)</div><div class="line">            .attr("y2", h - p - 1);</div><div class="line">            //横线</div><div class="line">            grid.append("line")</div><div class="line">            .attr("y1", y)</div><div class="line">            .attr("y2", y)</div><div class="line">            .attr("x1", p)</div><div class="line">            .attr("x2", w - p + 1);</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h1><h2 id="添加元素语法"><a href="#添加元素语法" class="headerlink" title="添加元素语法:"></a>添加元素语法:</h2><p><code>[selection].append(&quot;p&quot;);</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//引用D3所在路径</span></div><div class="line"><span class="comment">//选择body标签，为之添加一个p标签，并设置它的内容为New paragraph！</span></div><div class="line">d3.select(<span class="string">"body"</span>).append(<span class="string">"p"</span>).text(<span class="string">"New paragraph!"</span>);</div><div class="line"><span class="comment">//你可以将链接选择换行，这样代码结构更清晰</span></div><div class="line">d3.select(<span class="string">"body"</span>)</div><div class="line">    .append(<span class="string">"p"</span>)</div><div class="line">    .text(<span class="string">"New paragraph!"</span>);</div><div class="line"><span class="comment">//当然，也可以避免使用链接语法：</span></div><div class="line"><span class="keyword">var</span> body = d3.select(<span class="string">"body"</span>);</div><div class="line"><span class="keyword">var</span> p = body.append(<span class="string">"p"</span>);</div><div class="line">p.text(<span class="string">"New paragraph!"</span>);</div></pre></td></tr></table></figure>
<h1 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h1><ol>
<li><p>D3可以处理哪些类型的数据?<br>JS 的数据类型:如数字,时间,字符串,布尔值,数组,对象等都可以.<br>D3自定义的数据类型:<br>如集合(Set),映射(Map),嵌套(Nest),以及各种颜色空间( RGB,HSL,HSV)对象等</p>
</li>
<li><p>如何绑定?<br>选择元素,绑定数据,追加元素.</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">d3.select(<span class="string">"body"</span>) <span class="comment">//查找 DOM 的 body</span></div><div class="line">	.selectAll(<span class="string">"p"</span>) <span class="comment">//选择 DOM 中的所有段落</span></div><div class="line">	.data(dataset) <span class="comment">//计数和分析我们的数据值;注意这里data函数会绑定数据，并能够使用D3经典的E-N-E编程套路（这个以后会讲到，暂时不用关心），而另外一个数据绑定函数datum则只是替换一组新的数据。</span></div><div class="line">	.enter() <span class="comment">//绑定数据和 DOM 元素;这个方法将数据传递到DOM中。如果数据值比相应的DOM元素多，就用enter()创建一个新元素的占位符。</span></div><div class="line">	.append(<span class="string">"p"</span>) <span class="comment">//追加元素;通过enter()创建的占位符 在DOM中插入一个p元素。</span></div><div class="line">	.text(<span class="string">"New paragraph!"</span>); <span class="comment">//设置元素的文本;为新创建的p标签插入一个文本值。</span></div></pre></td></tr></table></figure>
<h1 id="使用数据"><a href="#使用数据" class="headerlink" title="使用数据"></a>使用数据</h1><p>接上面一个例子可以显示数据值，还可以根据数据值来修改颜色值。</p>
<p>d表示当前数据值。可以使用一个匿名函数处理这个数据。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>testD3-3.html<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://localhost:8080/spring/js/d3.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> dataset = [ <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span> ];</div><div class="line"></div><div class="line">    d3.select(<span class="string">"body"</span>).selectAll(<span class="string">"p"</span>)</div><div class="line">        .data(dataset)</div><div class="line">        .enter()</div><div class="line">        .append(<span class="string">"p"</span>)</div><div class="line">        .text(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"I can count up to "</span> + d;</div><div class="line">        &#125;)</div><div class="line">        .style(<span class="string">"color"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (d &gt; <span class="number">15</span>) &#123; <span class="comment">//大于15的数字显示为红色</span></div><div class="line">                <span class="keyword">return</span> <span class="string">"red"</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="string">"black"</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="用层图画条形图"><a href="#用层图画条形图" class="headerlink" title="用层图画条形图"></a>用层图画条形图</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>testD3-3-drawingDivBar<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://localhost:8080/spring/js/d3.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">//为同类层添加样式</div><div class="line">div.bar &#123;</div><div class="line">    display: inline-block;</div><div class="line">    width: 20px;</div><div class="line">    margin-right: 2px; //设置层之间的间隔</div><div class="line">    background-color: teal;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> dataset = [ <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span> ];</div><div class="line"></div><div class="line">    d3.select(<span class="string">"body"</span>).selectAll(<span class="string">"div"</span>)</div><div class="line">        .data(dataset)</div><div class="line">        .enter()</div><div class="line">        .append(<span class="string">"div"</span>)</div><div class="line">        .attr(<span class="string">"class"</span>, <span class="string">"bar"</span>) <span class="comment">//声明要为某类层设置属性</span></div><div class="line">        <span class="comment">//为没个特定的层设置属性</span></div><div class="line">        .style(<span class="string">"height"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> (d * <span class="number">5</span>) + <span class="string">"px"</span>;</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="选择集与数据"><a href="#选择集与数据" class="headerlink" title="选择集与数据"></a>选择集与数据</h1><h2 id="选择元素"><a href="#选择元素" class="headerlink" title="选择元素"></a>选择元素</h2><ol>
<li><p>select 返回匹配选择器的第一个元素</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">d3.select(<span class="string">"body"</span>);          <span class="comment">//选择body元素</span></div><div class="line">d3.select(<span class="string">"#select"</span>);       <span class="comment">//选择id为select的元素</span></div><div class="line">d3.select(<span class="string">".content"</span>);      <span class="comment">//选择类为content的元素</span></div></pre></td></tr></table></figure>
</li>
<li><p>selectAll 返回匹配选择器的所有元素</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">d3.selectAll(<span class="string">"p"</span>);          <span class="comment">//选择所有的p元素</span></div><div class="line">d3.selectAll(<span class="string">".content"</span>);   <span class="comment">//选择类为content的所有元素</span></div><div class="line">d3.selectAll(<span class="string">"ul li"</span>);      <span class="comment">//选择ul中所有的li元素</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="选择集"><a href="#选择集" class="headerlink" title="选择集"></a>选择集</h2><h3 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h3><ol>
<li>selection.<strong>empty()</strong> 如果选择集为空,则返回true;否则,返回 false</li>
<li>selection.<strong>node()</strong> 返回第一个非空元素,如果选择集为空,返回 false</li>
<li>selection.<strong>size()</strong> 返回选择集中地元素个数</li>
</ol>
<h3 id="设定和获取属性"><a href="#设定和获取属性" class="headerlink" title="设定和获取属性"></a>设定和获取属性</h3><ol>
<li>selection.<strong>attr</strong>(name[,value])<br>name是属性名,value 是属性值,如果省略 value,则返回当前的属性值;如果不省略,则将属性 name 设置为 value.</li>
<li>selection.<strong>classed</strong>(name[,value])<br>设定或获取选择集的 CSS 类, name是类命, value 是一个布尔值.布尔值表示该类是否开启.<br>如果省略第二个参数 value, 则返回一个布尔值,表示类是否开启;</li>
<li>selection.<strong>style</strong>(name[,value,[,priority]])<br>设定或获取选择集的的样式, name 是样式名,value 式样是值,如果只有第一个参数,则返回该样式的值.</li>
<li>selection.<strong>property</strong>(name[,value])<br>有部分属性,不能用attr()设定和获取,最典型的是文本输入框的 value 属性,此属性不会再标签中显示.<br>name是属性名,value 是属性值,如果省略 value,则返回当前的属性值.</li>
<li>selection.<strong>text</strong>([value])<br>设定或获取选择集的文本内容,如果省略 value,则返回当前的文本内容(相当于 DOM的 innerText,不包括元素内部的标签)</li>
<li>selection.<strong>html</strong>([value])<br>设定或获取选择集的内部 HTML 内容(相当于 DOM 的 innerHTML,包括元素内部的标签)</li>
</ol>
<h2 id="添加-插入和删除"><a href="#添加-插入和删除" class="headerlink" title="添加,插入和删除"></a>添加,插入和删除</h2><ol>
<li>selection.<strong>append</strong>(name)<br>在选择集的末尾添加一个元素,name 为元素名称.</li>
<li>selection.<strong>insert</strong>(name[,before])<br>在选择集中的制定元素之前插入一个元素, name 是被插入的元素, before 是 CSS 选择器的名称.</li>
<li>selection.<strong>remove</strong>()<br>删除选择集中的元素.</li>
</ol>
<h2 id="数据绑定-1"><a href="#数据绑定-1" class="headerlink" title="数据绑定"></a>数据绑定</h2><ol>
<li>selection.<strong>datum</strong>([value])<br>选择集中的每一个元素都绑定相同的数据 value.</li>
<li>selection.<strong>data</strong>([values[,key]])<br>选择集中的每一个元素分别绑定数组 values 的每一项,key 是一个键函数没用于指定绑定数组时的对应规则.</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jQuery插件学习]]></title>
      <url>http://zy380196088.github.io./2016/09/05/jQuery%E6%8F%92%E4%BB%B6%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>写 jQuery 插件最核心的有如下两种放方法:</p>
<h3 id="extend-object"><a href="#extend-object" class="headerlink" title="$.extend(object)"></a>$.extend(object)</h3><p>可以理解为 jQuery 添加一个静态方法</p>
<h3 id="fn-extend-object"><a href="#fn-extend-object" class="headerlink" title="$.fn.extend(object)"></a>$.fn.extend(object)</h3><p>可以理解为 jQuery 实例添加一个方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//$.extend 定义与调用</span></div><div class="line">$.extend(&#123; <span class="attr">fun1</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert(<span class="string">"执行方法一"</span>); &#125; &#125;);</div><div class="line">$.fun1();</div><div class="line"><span class="comment">//$.fn.extend 定义与调用</span></div><div class="line">$.fn.extend(&#123; <span class="attr">fun2</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert(<span class="string">"执行方法2"</span>); &#125; &#125;);</div><div class="line">$(<span class="keyword">this</span>).fun2();</div><div class="line"><span class="comment">//等同于</span></div><div class="line">$.fn.fun3 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert(<span class="string">"执行方法三"</span>); &#125;</div><div class="line">$(<span class="keyword">this</span>).fun3();</div></pre></td></tr></table></figure>
<h3 id="jQuery-function-与-function-jQuery-的区别"><a href="#jQuery-function-与-function-jQuery-的区别" class="headerlink" title="jQuery(function(){}); 与(function(){})(jQuery);的区别"></a>jQuery(function(){}); 与(function(){})(jQuery);的区别</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">jQuery(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</div><div class="line"><span class="comment">//相当于</span></div><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);<span class="comment">//是某个DOM元素加载完毕后执行方法里的代码。</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)();</div><div class="line"><span class="comment">//相当于</span></div><div class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;&#125;;</div><div class="line">fn(jQuery);</div><div class="line"><span class="comment">//定义了一个匿名函数，其中jQuery代表这个匿名函数的实参。通常用在JQuery插件开发中，起到了定义插件的私有域的作用</span></div></pre></td></tr></table></figure>
<h3 id="开发-jQuery-插件标准结构"><a href="#开发-jQuery-插件标准结构" class="headerlink" title="开发 jQuery 插件标准结构"></a>开发 jQuery 插件标准结构</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//step01 定义JQuery的作用域,防止$符号污染的 jQuery 插件</span></div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</div><div class="line">    <span class="comment">//step03-a 插件的默认值属性</span></div><div class="line">    <span class="keyword">var</span> defaults = &#123;</div><div class="line">        <span class="attr">prevId</span>: <span class="string">'prevBtn'</span>,</div><div class="line">        <span class="attr">prevText</span>: <span class="string">'Previous'</span>,</div><div class="line">        <span class="attr">nextId</span>: <span class="string">'nextBtn'</span>,</div><div class="line">        <span class="attr">nextText</span>: <span class="string">'Next'</span></div><div class="line">        <span class="comment">//……</span></div><div class="line">    &#125;;</div><div class="line">    <span class="comment">//step02 插件的扩展方法名称</span></div><div class="line">    $.fn.easySlider = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</div><div class="line">        <span class="comment">//step03-b 合并用户自定义属性，默认属性</span></div><div class="line">        <span class="keyword">var</span> options = $.extend(defaults, options);</div><div class="line">        <span class="comment">//step4 支持JQuery选择器</span></div><div class="line">        <span class="comment">//step5 支持链式调用</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;)(jQuery);</div></pre></td></tr></table></figure>
<ol>
<li>定义作用域;</li>
<li>为 jQuery 扩展一个插件;</li>
<li>设置默认值;</li>
<li>支持jQuery 选择器</li>
<li>支持JQuery的链接调用</li>
<li>插件里的方法</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Echarts.js 学习]]></title>
      <url>http://zy380196088.github.io./2016/08/26/Echarts.js%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>Day1</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS Tips]]></title>
      <url>http://zy380196088.github.io./2016/08/24/JS-Tips/</url>
      <content type="html"><![CDATA[<h2 id="检查某对象是否具有某属性"><a href="#检查某对象是否具有某属性" class="headerlink" title="检查某对象是否具有某属性"></a>检查某对象是否具有某属性</h2><p>当你需要检查某属性是否存在于一个对象,你可能会这样做:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myObject = &#123;</div><div class="line">    <span class="attr">name</span> : <span class="string">'tips'</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">if</span>(myObject.name)&#123;...&#125;</div></pre></td></tr></table></figure></p>
<p>这是可行的,但是需要知道还有两种原生方法可以解决该问题: in操作符 和 hasOwnProperty,任何继承自Object的对象都可以使用这两种方法.</p>
<p>但是这两种方法也有区别:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myFunc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = <span class="string">'tips'</span>;</div><div class="line">&#125;;</div><div class="line">myFunc.prototype.age = <span class="string">'10 days'</span>;</div><div class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> myFunc();</div><div class="line">user.hasOwnProperty(<span class="string">'name'</span>); <span class="comment">// true</span></div><div class="line">user.hasOwnProperty(<span class="string">'age'</span>); <span class="comment">// false, 因为age来自于原型链</span></div></pre></td></tr></table></figure>
<p>两者检查属性的深度不同，换言之hasOwnProperty只在本身有此属性时返回true,而in操作符不区分属性来自于本身或继承自原型链。</p>
<h2 id="将Node-List转换为数组-Array"><a href="#将Node-List转换为数组-Array" class="headerlink" title="将Node List转换为数组(Array)"></a>将Node List转换为数组(Array)</h2><p>querySelectorAll 方法返回一个”类数组”对象为node list.看似数组却没有类似map,foreach这样的数组方法.<br>我们需要将其转换为DOM元素的数组:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> nodelist = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>);</div><div class="line"><span class="keyword">var</span> nodelistToArray = <span class="built_in">Array</span>.apply(<span class="literal">null</span> , nodelist);</div><div class="line"><span class="comment">//这样就可以进行map ,foreach等操作了</span></div><div class="line">nodelistToArray.forEach(...);</div><div class="line">nodelistToArray.map(...);</div><div class="line">nodelistToArray.slice(...);</div></pre></td></tr></table></figure>
<h2 id="“快速排序”"><a href="#“快速排序”" class="headerlink" title="“快速排序”"></a>“快速排序”</h2><p>“快速排序”的思想步骤:<br>1.在数组中,找一个基点<br>2.建立两个数组,分别存储左边和右边的数组<br>3.利用递归进行下次比较</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(arr.length &lt;=<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">return</span> arr;<span class="comment">//如果数组只有一个数则直接返回</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> num =  <span class="built_in">Math</span>.floor(arr.length/<span class="number">2</span>);<span class="comment">//找到中间数的索引值</span></div><div class="line">    <span class="keyword">var</span> numValue = arr.splice(num,<span class="number">1</span>);<span class="comment">//取中间数的值</span></div><div class="line">    <span class="keyword">var</span> left = [];</div><div class="line">    <span class="keyword">var</span> right = [];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ,i &lt; arr.length; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(arr[i]&lt;numValue)&#123;</div><div class="line">            left.push(arr[i]);<span class="comment">//小于基准数则添加到左边数组中</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            right.pusth(arr[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//递归</span></div><div class="line">    <span class="keyword">return</span> quickSort(left).concat([numValue],quickSort(right));</div><div class="line">&#125;</div><div class="line"><span class="comment">//调用</span></div><div class="line"> alert(quickSort([<span class="number">2</span>,<span class="number">35</span>,<span class="number">15</span>,<span class="number">44</span>,<span class="number">8</span>]));<span class="comment">//弹出"2 8 15 35 44"</span></div></pre></td></tr></table></figure>
<h2 id="返回对象-使方法可以链式调用"><a href="#返回对象-使方法可以链式调用" class="headerlink" title="返回对象,使方法可以链式调用"></a>返回对象,使方法可以链式调用</h2><p>在面向对象的Javascript中为对象建立一个方法时，返回当前对象可以让你在一条链上调用方法。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Hello my name is: "</span>, <span class="keyword">this</span>.name);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">this</span>.changeName = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">	<span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">"John"</span>);</div><div class="line">	person.sayName().changeName(<span class="string">"Timmy"</span>).sayName();</div></pre></td></tr></table></figure>
<h2 id="JavaScript-中-的作用"><a href="#JavaScript-中-的作用" class="headerlink" title="JavaScript 中 !! 的作用"></a>JavaScript 中 !! 的作用</h2><p>经常看到这样的例子：﻿﻿<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a；</div><div class="line"><span class="keyword">var</span> b=!!a;</div></pre></td></tr></table></figure></p>
<p>a默认是undefined。!a是true，!!a则是false，所以b的值是false，而不再是undefined，也非其它值，主要是为后续判断提供便利。</p>
<p>!!一般用来将后面的表达式强制转换为布尔类型的数据（boolean），也就是只能是true或者false;<br>因为javascript是弱类型的语言（变量没有固定的数据类型）所以有时需要强制转换为相应的类型，类似的如:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a=<span class="built_in">parseInt</span>(“<span class="number">1234</span>″)</div><div class="line">a=”<span class="number">1234</span>″<span class="number">-0</span> <span class="comment">//转换为数字</span></div><div class="line">b=<span class="number">1234</span>+”” <span class="comment">//转换为字符串</span></div><div class="line">c=someObject.toString() <span class="comment">//将对象转换为字符串</span></div></pre></td></tr></table></figure></p>
<p>其中第1种、第4种为显式转换，2、3为隐式转换</p>
<p>布尔型的转换，javascript约定规则为:<br><strong>false、undefinded、null、0、”” 为 false</strong><br><strong>true、1、”somestring”、[Object] 为 true</strong></p>
<p>对null与undefined等其他用隐式转换的值，用!操作符时都会产生true的结果，所以用两个感叹号的作用就在于将这些值转换为“等价”的布尔值；<br>再来看看：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo;</div><div class="line">alert(!foo);<span class="comment">//undifined情况下，一个感叹号返回的是true;</span></div><div class="line">alert(!goo);<span class="comment">//null情况下，一个感叹号返回的也是true;</span></div><div class="line"><span class="keyword">var</span> o=&#123;<span class="attr">flag</span>:<span class="literal">true</span>&#125;;</div><div class="line"><span class="keyword">var</span> test=!!o.flag;<span class="comment">//等效于var test=o.flag||false;</span></div><div class="line">alert(test);</div></pre></td></tr></table></figure></p>
<p>这段例子，演示了在undifined和null时，用一个感叹号返回的都是true,用两个感叹号返回的就是false,所以两个感叹号的作用就在于，如果明确设置了变量的值(非null/undifined/0/”“等值),结果就会根据变量的实际值来返回，如果没有设置，结果就会返回false。</p>
<h2 id="对象转换为数组"><a href="#对象转换为数组" class="headerlink" title="对象转换为数组"></a>对象转换为数组</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//注意对象必须是以下格式的才可以通过此方式转化为数组</span></div><div class="line"><span class="comment">//获取的DOM集合，以及函数的arguments也可以通过此方式转化为数组</span></div><div class="line"><span class="keyword">var</span> obj=&#123;</div><div class="line">	<span class="number">0</span>:<span class="string">'qian'</span>,</div><div class="line">	<span class="number">1</span>:<span class="string">'long'</span>,</div><div class="line">	<span class="number">2</span>:<span class="string">'chu'</span>,</div><div class="line">	<span class="number">3</span>:<span class="string">'tian'</span>,</div><div class="line">	<span class="attr">length</span>:<span class="number">4</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> _slice=[].slice;</div><div class="line"><span class="keyword">var</span> objArr=_slice.call(obj);</div></pre></td></tr></table></figure>
<h2 id="验证是否为数组"><a href="#验证是否为数组" class="headerlink" title="验证是否为数组"></a>验证是否为数组</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span>  <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">'[object Array]'</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="清空数组"><a href="#清空数组" class="headerlink" title="清空数组"></a>清空数组</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//方式一 通过将长度设置为0</span></div><div class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line">arr.length=<span class="number">0</span>;</div><div class="line"><span class="comment">//方式二 通过splice方法</span></div><div class="line"> <span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line">arr.splice(<span class="number">0</span>,arr.length);</div><div class="line"><span class="comment">//方式三 通过将空数组 [] 赋值给数组(严格意义来说这只是将ary重新赋值为空数组，之前的数组如果没有引用在指向它将等待垃圾回收。)</span></div><div class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line">arr=[];</div></pre></td></tr></table></figure>
<h2 id="保留指定小数位"><a href="#保留指定小数位" class="headerlink" title="保留指定小数位"></a>保留指定小数位</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num =<span class="number">4.345678</span>;</div><div class="line">num = num.toFixed(<span class="number">4</span>);  <span class="comment">// 4.3457 第四位小数位以四舍五入计算</span></div></pre></td></tr></table></figure>
<h2 id="生成指定长度的随机字母数字字符串"><a href="#生成指定长度的随机字母数字字符串" class="headerlink" title="生成指定长度的随机字母数字字符串"></a>生成指定长度的随机字母数字字符串</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomStr</span>(<span class="params">len</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> str = <span class="string">""</span>;</div><div class="line">    <span class="keyword">for</span>( ; str.length &lt; len; str  += <span class="built_in">Math</span>.random().toString(<span class="number">36</span>).substr(<span class="number">2</span>));</div><div class="line">    <span class="keyword">return</span>  str.substr(<span class="number">0</span>, len);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="找出数组中出现次数最的元素，并给出其出现过的位置"><a href="#找出数组中出现次数最的元素，并给出其出现过的位置" class="headerlink" title="找出数组中出现次数最的元素，并给出其出现过的位置"></a>找出数组中出现次数最的元素，并给出其出现过的位置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMaxAndIndex</span>(<span class="params"> arr </span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">        arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span>(!obj[item])&#123;</div><div class="line">                obj[item]= &#123;<span class="attr">indexs</span>: [index]&#125;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                obj[item][<span class="string">'indexs'</span>].push(index);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">var</span> num=<span class="number">0</span>;<span class="comment">//记录出现次数最大值</span></div><div class="line">        <span class="keyword">var</span> str=<span class="string">''</span>;<span class="comment">//记录出现次数最多的字符</span></div><div class="line">        <span class="keyword">var</span> reArr;<span class="comment">//返回最大值的位置数组</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> obj)&#123;</div><div class="line">            <span class="keyword">var</span> temp=obj[attr][<span class="string">'indexs'</span>];</div><div class="line">            <span class="keyword">if</span>(temp.length&gt;num)&#123;</div><div class="line">                num=temp.length;</div><div class="line">                str=attr;</div><div class="line">                reArr=temp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">maxStr</span>:str,</div><div class="line">            <span class="attr">indexs</span>:reArr</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="字符串的split函数的特殊值情况"><a href="#字符串的split函数的特殊值情况" class="headerlink" title="字符串的split函数的特殊值情况"></a>字符串的split函数的特殊值情况</h2><ol>
<li><p>参数不传，返回包含原字符串对象，长度为1的数组.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">""</span>.split()<span class="comment">//[""]</span></div><div class="line"><span class="string">"xxcanghai"</span>.split()<span class="comment">//["xxcanghai"]</span></div></pre></td></tr></table></figure>
</li>
<li><p>参数传空字符串，返回将原字符串每个字符分隔的数组,若原字符串为空字符串则返回空数组.<br><code>js
&quot;&quot;.split(&quot;&quot;)//[]
&quot;xxcanghai&quot;.split(&quot;&quot;)//[&quot;x&quot;, &quot;x&quot;, &quot;c&quot;, &quot;a&quot;, &quot;n&quot;, &quot;g&quot;, &quot;h&quot;, &quot;a&quot;, &quot;i&quot;]</code></p>
</li>
<li>原字符串为空字符串，参数不为空时，会返回包含一个空字符串的数组.<br><code>js
&quot;&quot;.split(&quot;,&quot;)//[&quot;&quot;]，错误，应为[]
&quot;&quot;.split(&quot;xxcanghai&quot;)//[&quot;&quot;]，错误，应为[]</code></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[移动端web开发Meta标签]]></title>
      <url>http://zy380196088.github.io./2016/06/27/%E7%A7%BB%E5%8A%A8%E7%AB%AFweb%E5%BC%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<h2 id="关闭自动识别数字串为电话链接"><a href="#关闭自动识别数字串为电话链接" class="headerlink" title="关闭自动识别数字串为电话链接"></a>关闭自动识别数字串为电话链接</h2><p>关闭iPhone上Safari(一些其他基于webkit Android手机浏览器)自动将数字串识别为电话链接.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<p>如果关闭自动识别后,又希望某些电话能够被识别,可以通过如下声明<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"tel:18500888800"</span>&gt;</span>18500888800<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="关闭邮箱识别"><a href="#关闭邮箱识别" class="headerlink" title="关闭邮箱识别"></a>关闭邮箱识别</h2><p>加上下面代码将不识别邮箱<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"email=no"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="删除默认的苹果工具栏和菜单"><a href="#删除默认的苹果工具栏和菜单" class="headerlink" title="删除默认的苹果工具栏和菜单"></a>删除默认的苹果工具栏和菜单</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>如果需要显示时,不加上条meta即可,默认为显示.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”apple-mobile-web-app-status-bar-style”</span> <span class="attr">content</span>=<span class="string">black”</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>默认值为default（白色），可以定为black（黑色）和black-translucent（灰色半透明）。<br>注意： 若值为“black-translucent”将会占据页面px位置，浮在页面上方（会覆盖页面20px高度–iphone4和itouch4的Retina屏幕为40px)。</p>
<h2 id="在手机HOME界面创建应用程序样式的图标"><a href="#在手机HOME界面创建应用程序样式的图标" class="headerlink" title="在手机HOME界面创建应用程序样式的图标"></a>在手机HOME界面创建应用程序样式的图标</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- for IOS--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span> <span class="attr">href</span>=<span class="string">"/static/images/xxx.png"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- for Android--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon-precomposed"</span> <span class="attr">href</span>=<span class="string">"/static/images/xxx.png"</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSS小技巧]]></title>
      <url>http://zy380196088.github.io./2016/05/19/CSS%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<h2 id="CSS背景图拉伸自适应尺寸，全浏览器兼容"><a href="#CSS背景图拉伸自适应尺寸，全浏览器兼容" class="headerlink" title="CSS背景图拉伸自适应尺寸，全浏览器兼容"></a>CSS背景图拉伸自适应尺寸，全浏览器兼容</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.bg</span>&#123;</div><div class="line">	<span class="attribute">background</span>:<span class="built_in">url</span>(http://wyz.67ge.com/wp-content/uploads/qzlogo.jpg);</div><div class="line">	<span class="attribute">filter</span>:<span class="string">"progid:DXImageTransform.Microsoft.AlphaImageLoader(sizingMethod='scale')"</span>;</div><div class="line">	<span class="attribute">-moz-background-size</span>:<span class="number">100%</span> <span class="number">100%</span>;</div><div class="line">	<span class="attribute">background-size</span>:<span class="number">100%</span> <span class="number">100%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="CSS模拟-placeholder"><a href="#CSS模拟-placeholder" class="headerlink" title="CSS模拟 placeholder"></a>CSS模拟 placeholder</h2><p>给元素设置contenteditable和data-placeholder，再利用:empty:before和:focus:before就可以模拟input placeholder了，focus时placeholder就消失，效果感人。</p>
<h2 id="更改浏览器的滚动条样式"><a href="#更改浏览器的滚动条样式" class="headerlink" title="更改浏览器的滚动条样式"></a>更改浏览器的滚动条样式</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">body &#123;</div><div class="line">	scrollbar-arrow-color: red; /*上下按钮上三角箭头的颜色*/</div><div class="line">	scrollbar-face-color: #CBCBCB; /*滚动条凸出部分的颜色*/</div><div class="line">	scrollbar-3dlight-color: blue; /*滚动条亮边的颜色*/</div><div class="line">	scrollbar-highlight-color: #333; /*滚动条空白部分的颜色*/</div><div class="line">	scrollbar-shadow-color: yellow; /*滚动条阴影的颜色*/</div><div class="line">	scrollbar-darkshadow-color: green; /*滚动条强阴影的颜色*/</div><div class="line">	scrollbar-track-color: #eee; /*滚动条背景颜色*/</div><div class="line">	scrollbar-base-color: black; /*滚动条的基本颜色*/</div><div class="line">	Cursor:url(mouse.cur); /*自定义个性鼠标*/</div><div class="line">	/*以上2项适用与：body、div、textarea、iframe*/</div><div class="line">&#125;</div><div class="line">     ::-webkit-scrollbar &#123;  /*滚动条整体部分 */</div><div class="line">         width:10px;</div><div class="line">         margin-right:2px</div><div class="line">     &#125;</div><div class="line">     ::-webkit-scrollbar-button &#123; /*滚动条两端的按钮 */</div><div class="line">         width:10px;</div><div class="line">         background-color: yellow;</div><div class="line">     &#125;</div><div class="line">     ::-webkit-scrollbar:horizontal &#123;</div><div class="line">         height:10px;</div><div class="line">         margin-bottom:2px</div><div class="line">     &#125;</div><div class="line">     ::-webkit-scrollbar-track &#123;  /*外层轨道*/</div><div class="line">         border-radius: 10px;</div><div class="line">     &#125;</div><div class="line">     ::-webkit-scrollbar-track-piece &#123;  /*内层轨道，滚动条中间部分*/</div><div class="line">         background-color: #333333;</div><div class="line">         border-radius: 10px;</div><div class="line">     &#125;</div><div class="line">     ::-webkit-scrollbar-thumb &#123;  /* 滑块 */</div><div class="line">         width:10px;</div><div class="line">         border-radius: 5px;</div><div class="line">         background: #CBCBCB;</div><div class="line">     &#125;</div><div class="line">     ::-webkit-scrollbar-corner &#123; /* 边角 */</div><div class="line">         width: 10px;</div><div class="line">         background-color: red;</div><div class="line">     &#125;</div><div class="line">     ::-webkit-scrollbar-thumb:hover &#123; /* 鼠标移入滑块 */</div><div class="line">         background: #909090;</div><div class="line">     &#125;</div><div class="line">     .demo &#123;</div><div class="line">         width: 400px;</div><div class="line">         height: 200px;</div><div class="line">         overflow: auto;</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><ol>
<li><p>添加额外标签</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.clearfix</span>&#123;</div><div class="line">	<span class="attribute">clear</span>:both;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用:after伪元素<br>给父元素加上:after伪元素</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">	content:&apos;&apos;;</div><div class="line">	display:block;</div><div class="line">	clear:both;</div><div class="line">&#125;</div><div class="line">.clearfix&#123;/*兼容IE*/</div><div class="line">	zoom:1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>给父元素定高</p>
</li>
<li><p>利用overflow:hidden<br>父元素样式加上overflow:hidden;</p>
</li>
</ol>
<h2 id="让页面上的内容不能被选中"><a href="#让页面上的内容不能被选中" class="headerlink" title="让页面上的内容不能被选中"></a>让页面上的内容不能被选中</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span>&#123;</div><div class="line">    <span class="attribute">-webkit-user-select</span>:none;</div><div class="line">    <span class="attribute">-moz-user-select</span>:none;</div><div class="line">    <span class="attribute">-ms-user-select</span>:none;</div><div class="line">    <span class="attribute">user-select</span>:none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Sass学习笔记]]></title>
      <url>http://zy380196088.github.io./2016/05/09/Sass%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="Sass语法格式"><a href="#Sass语法格式" class="headerlink" title="Sass语法格式"></a>Sass语法格式</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>SASS允许使用变量，所有变量以$开头。<br>如果变量需要镶嵌在字符串之中，就必须需要写在#{}之中。<br>例如:<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$side</span> : left;</div><div class="line"><span class="selector-class">.rounded</span> &#123;</div><div class="line">	<span class="attribute">border</span>-#&#123;<span class="variable">$side</span>&#125;-radius: <span class="number">5px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>CSS代码:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">font</span>: <span class="number">100%</span> Helvetica, sans-serif;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Sass语法格式来编写:<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$font-stack</span>: Helvetica, sans-serif</div><div class="line"><span class="variable">$primary-color</span>: <span class="number">#333</span></div><div class="line"></div><div class="line">body</div><div class="line">  font: <span class="number">100%</span> <span class="variable">$font-stack</span></div><div class="line">  color: <span class="variable">$primary-color</span></div></pre></td></tr></table></figure></p>
<p>SCSS语法格式来编写:<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$font-stack</span>: Helvetica, sans-serif;</div><div class="line"><span class="variable">$primary-color</span>: <span class="number">#333</span>;</div><div class="line"></div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">font</span>: <span class="number">100%</span> <span class="variable">$font-stack</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="variable">$primary-color</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h3><p>SASS允许在代码中使算式:<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">　　　　<span class="attribute">margin</span>: (<span class="number">14px</span>/<span class="number">2</span>);</div><div class="line">　　　　<span class="attribute">top</span>: <span class="number">50px</span> + <span class="number">100px</span>;</div><div class="line">　　　　<span class="attribute">right</span>: <span class="variable">$var</span> * <span class="number">10%</span>;</div><div class="line">　　&#125;</div></pre></td></tr></table></figure></p>
<h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><p>下面css代码:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span> <span class="selector-tag">a</span>&#123;</div><div class="line">	<span class="attribute">color</span>:red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以写成:<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">	hi&#123;</div><div class="line">	<span class="attribute">color</span>:red;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>还支持属性嵌套(<strong>属性后必须加上冒号</strong>):<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">	<span class="attribute">border</span>: &#123;</div><div class="line">		color:red;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="代码重用"><a href="#代码重用" class="headerlink" title="代码重用"></a>代码重用</h2><h3 id="继承-extend"><a href="#继承-extend" class="headerlink" title="继承@extend"></a>继承@extend</h3><p>ASS允许一个选择器，继承另一个选择器。比如，现有box1:<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box1</span>&#123;</div><div class="line">	<span class="attribute">border</span>:<span class="number">1px</span> sold <span class="number">#fff</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>box2要继承box1,需要使用@extend命令:<br>.box2{<br>    @extend .box1;<br>    background-color: red;<br>}</p>
<h3 id="Mixin-include"><a href="#Mixin-include" class="headerlink" title="Mixin@include"></a>Mixin@include</h3><p>Mixin有点像C语言的宏（macro），是可以重用的代码块。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">mixin</span> left&#123;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">margin-left</span>:<span class="number">10px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用@include命令调用<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">	@<span class="keyword">include</span> left;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>更强大的用法，可以指定参数和缺省值.<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">mixin</span> left(<span class="variable">$valuse</span>:<span class="number">10px</span>)&#123;</div><div class="line">	<span class="attribute">float</span>:left;</div><div class="line">	<span class="attribute">margin-right</span>:<span class="variable">$value</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//使用的时候加上参数即可</span></div><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">	@<span class="keyword">include</span> left(<span class="number">20px</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>一个有用的mixin实例，用来生成浏览器前缀:<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">mixin</span> rounded(<span class="variable">$vert</span>, <span class="variable">$horz</span>, <span class="variable">$radius</span>: 10px) &#123;</div><div class="line">　　　　<span class="attribute">border</span>-#&#123;<span class="variable">$vert</span>&#125;-#&#123;<span class="variable">$horz</span>&#125;-radius: <span class="variable">$radius</span>;</div><div class="line">　　　　-moz-<span class="attribute">border-radius</span>-#&#123;<span class="variable">$vert</span>&#125;#&#123;<span class="variable">$horz</span>&#125;: <span class="variable">$radius</span>;</div><div class="line">　　　　-webkit-<span class="attribute">border</span>-#&#123;<span class="variable">$vert</span>&#125;-#&#123;<span class="variable">$horz</span>&#125;-radius: <span class="variable">$radius</span>;</div><div class="line">　　&#125;</div></pre></td></tr></table></figure></p>
<h3 id="插入文件-import"><a href="#插入文件-import" class="headerlink" title="插入文件@import"></a>插入文件@import</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">import</span> <span class="string">"path/filename.scss"</span></div></pre></td></tr></table></figure>
<h2 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h2><h3 id="条件语句-if"><a href="#条件语句-if" class="headerlink" title="条件语句@if"></a>条件语句@if</h3><p>还可以配合使用@else</p>
<h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><h4 id="for"><a href="#for" class="headerlink" title="@for"></a>@for</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">for</span> <span class="variable">$i</span> from 1 to 10 &#123;</div><div class="line">　　　　<span class="selector-class">.border-</span>#&#123;<span class="variable">$i</span>&#125; &#123;</div><div class="line">　　　　　　<span class="attribute">border</span>: #&#123;<span class="variable">$i</span>&#125;px solid blue;</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;</div></pre></td></tr></table></figure>
<h4 id="while"><a href="#while" class="headerlink" title="@while"></a>@while</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$i</span>: <span class="number">6</span>;</div><div class="line">　　@<span class="keyword">while</span> <span class="variable">$i</span> &gt; 0 &#123;</div><div class="line">　　　　<span class="selector-class">.item-</span>#&#123;<span class="variable">$i</span>&#125; &#123; <span class="attribute">width</span>: <span class="number">2em</span> * <span class="variable">$i</span>; &#125;</div><div class="line">　　　　<span class="variable">$i</span>: <span class="variable">$i</span> - <span class="number">2</span>;</div><div class="line">　　&#125;</div></pre></td></tr></table></figure>
<h4 id="each"><a href="#each" class="headerlink" title="@each"></a>@each</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">each</span> <span class="variable">$member</span> in a, b, c, d &#123;</div><div class="line">　　　　.#&#123;<span class="variable">$member</span>&#125; &#123;</div><div class="line">　　　　　　<span class="attribute">background-image</span>: url(<span class="string">"/image/#&#123;$member&#125;.jpg"</span>);</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;</div></pre></td></tr></table></figure>
<h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@function double(<span class="variable">$n</span>) &#123;</div><div class="line">　　　　@return <span class="variable">$n</span> * 2;</div><div class="line">　　&#125;</div><div class="line">　　<span class="selector-id">#sidebar</span> &#123;</div><div class="line">　　　　<span class="attribute">width</span>: double(<span class="number">5px</span>);</div><div class="line">　　&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[学习笔记-Javascript高级程序设计]]></title>
      <url>http://zy380196088.github.io./2016/05/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<h2 id="JavaScript模块化编程的重要性"><a href="#JavaScript模块化编程的重要性" class="headerlink" title="JavaScript模块化编程的重要性"></a>JavaScript模块化编程的重要性</h2><ol>
<li><p>出现大量的全局变量<br>JS在每个地方都可以定义全局变量,容易造成变量污染,程序将难以维护.</p>
</li>
<li><p>JS 加载顺序要按照代码的依赖顺序</p>
</li>
<li>html一次性加载过多的 JS 脚本页面容易出现假死</li>
</ol>
<h2 id="window-location-href的用法-动态输出跳转"><a href="#window-location-href的用法-动态输出跳转" class="headerlink" title="window.location.href的用法(动态输出跳转)"></a>window.location.href的用法(动态输出跳转)</h2><h3 id="self-location-href-“-url”"><a href="#self-location-href-“-url”" class="headerlink" title="self.location.href = “/url”"></a>self.location.href = “/url”</h3><p>当前页面打开 URL 页面</p>
<h3 id="location-href-“-url”"><a href="#location-href-“-url”" class="headerlink" title="location.href = “/url”"></a>location.href = “/url”</h3><p>当前页面打开 URL 页面</p>
<h3 id="windows-location-href-“-url”"><a href="#windows-location-href-“-url”" class="headerlink" title="windows.location.href = “/url”"></a>windows.location.href = “/url”</h3><p>当前页面打开 URL 页面</p>
<h3 id="this-location-href-”-url”"><a href="#this-location-href-”-url”" class="headerlink" title="this.location.href=”/url”"></a>this.location.href=”/url”</h3><p>当前页面打开URL页面</p>
<h3 id="parent-location-href-”-url”"><a href="#parent-location-href-”-url”" class="headerlink" title="parent.location.href=”/url”"></a>parent.location.href=”/url”</h3><p>在父页面打开新页面</p>
<h3 id="top-location-href-”-url”"><a href="#top-location-href-”-url”" class="headerlink" title="top.location.href=”/url”"></a>top.location.href=”/url”</h3><p>在顶层页面打开新页面</p>
<h2 id="JavaScript-数据类型"><a href="#JavaScript-数据类型" class="headerlink" title="JavaScript 数据类型"></a>JavaScript 数据类型</h2><h3 id="5种简单数据"><a href="#5种简单数据" class="headerlink" title="5种简单数据"></a>5种简单数据</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript - 面向对象编程]]></title>
      <url>http://zy380196088.github.io./2016/05/08/JavaScript-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = name;</div><div class="line">	<span class="keyword">this</span>.hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		alert(<span class="string">'hello,'</span>+ <span class="keyword">this</span>.name + <span class="string">'!'</span>);</div><div class="line">	&#125;	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> Student(<span class="string">'小明'</span>);</div><div class="line"><span class="keyword">var</span> xiaohong = <span class="keyword">new</span> Student(<span class="string">'小红'</span>);</div></pre></td></tr></table></figure>
<p>让创建的对象共享一个hello函数，这样可以节省内存<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = name;</div><div class="line">&#125; </div><div class="line"></div><div class="line">Student.rototype.hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	alert(<span class="string">'hello,'</span>+ <span class="keyword">this</span>.name + <span class="string">'!'</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>还可以写一个createStudent()函数，在内部封装所有的new操作。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">props</span>)</span>&#123;</div><div class="line">	thi.name = props.name || <span class="string">'匿名'</span>; <span class="comment">//默认值为'匿名'</span></div><div class="line">	<span class="keyword">this</span>.grade = props.grade || <span class="number">1</span>;  <span class="comment">// 默认值为1</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">Student.prototype.hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	alert(<span class="string">'Hello, '</span> + <span class="keyword">this</span>.name + <span class="string">'!'</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createStudent</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Student(props || &#123;&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h2><p>请参考<a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014344997013405abfb7f0e1904a04ba6898a384b1e925000" target="_blank" rel="external">原型继承－廖雪峰</a></p>
<h2 id="class继承"><a href="#class继承" class="headerlink" title="class继承"></a>class继承</h2><p>新的关键字class从ES6开始正式被引入到JavaScript中。class的目的就是让定义类更简单。<br>如果用新的class关键字来编写Student，可以这样写：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name) &#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    hello() &#123;</div><div class="line">        alert(<span class="string">'Hello, '</span> + <span class="keyword">this</span>.name + <span class="string">'!'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>用class定义对象的另一个巨大的好处是继承更方便了。想一想我们从Student派生一个PrimaryStudent需要编写的代码量。现在，原型继承的中间对象，原型对象的构造函数等等都不需要考虑了，直接通过extends来实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimaryStudent</span> <span class="keyword">extends</span> <span class="title">Student</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name, grade) &#123;</div><div class="line">        <span class="keyword">super</span>(name); <span class="comment">// 记得用super调用父类的构造方法!</span></div><div class="line">        <span class="keyword">this</span>.grade = grade;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    myGrade() &#123;</div><div class="line">        alert(<span class="string">'I am at grade '</span> + <span class="keyword">this</span>.grade);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>ES6引入的class和原有的JavaScript原型继承有什么区别呢？实际上它们没有任何区别，class的作用就是让JavaScript引擎去实现原来需要我们自己编写的原型链代码。简而言之，用class的好处就是极大地简化了原型链代码。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql入门学习]]></title>
      <url>http://zy380196088.github.io./2016/05/06/mysql%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h2 id="php常用的mysql函数："><a href="#php常用的mysql函数：" class="headerlink" title="php常用的mysql函数："></a>php常用的mysql函数：</h2><h3 id="mysql-connect-“主机名称-ip”-”用户名”-”密码”"><a href="#mysql-connect-“主机名称-ip”-”用户名”-”密码”" class="headerlink" title="mysql_connect(“主机名称/ip”,”用户名”,”密码”)"></a>mysql_connect(“主机名称/ip”,”用户名”,”密码”)</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$link = @mysql_connect(<span class="string">"localhost"</span>,<span class="string">"root"</span>,<span class="string">"root"</span>)<span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"数据库连接错误"</span>).mysql_error();</div></pre></td></tr></table></figure>
<h3 id="mysql-error"><a href="#mysql-error" class="headerlink" title="mysql_error()"></a>mysql_error()</h3><p>返回上一个mysql操作的文本错误信息；@错误抑制符号</p>
<h3 id="mysql-select-db-“数据库名称”-link"><a href="#mysql-select-db-“数据库名称”-link" class="headerlink" title="mysql_select_db(“数据库名称”,$link)"></a>mysql_select_db(“数据库名称”,$link)</h3><h3 id="mysql-query"><a href="#mysql-query" class="headerlink" title="mysql_query()"></a>mysql_query()</h3><p>向数据库发送一条sql命令</p>
<h3 id="mysql-affected-rows"><a href="#mysql-affected-rows" class="headerlink" title="mysql_affected_rows()"></a>mysql_affected_rows()</h3><p>取的前一条sql语句，返回受影响的行数</p>
<h3 id="mysql-cloes"><a href="#mysql-cloes" class="headerlink" title="mysql_cloes()"></a>mysql_cloes()</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jQuery学习笔记]]></title>
      <url>http://zy380196088.github.io./2016/05/04/jQuery%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h2><h3 id="jQuery-jQuery-函数详解"><a href="#jQuery-jQuery-函数详解" class="headerlink" title="jQuery jQuery() 函数详解"></a>jQuery jQuery() 函数详解</h3><p>jQuery()函数是jQuery库的最核心函数，jQuery的一切都是基于此函数的。该函数主要用于获取HTML DOM元素并将其封装为jQuery对象，以便于使用jQuery对象提供的其他属性和方法对DOM元素进行操作。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jQuery( selector, [ context ] )</div></pre></td></tr></table></figure></p>
<p>将选择器字符串selector所对应的HTML DOM元素封装为jQuery对象。可选参数context用于指定查找DOM元素的范围。</p>
<a id="more"></a>
<h3 id="jQuery-noConfilick"><a href="#jQuery-noConfilick" class="headerlink" title="jQuery.noConfilick()"></a>jQuery.noConfilick()</h3><p>jQuery.noConflict()函数用于让出jQuery库对变量$(和变量jQuery)的控制权。<br>一般情况下，在jQuery库中，变量$是变量jQuery的别名，它们之间是等价的，例如jQuery(“p”)和$(“p”)是等价的。由于变量$只有一个字符，并且特点鲜明，因此我们更加习惯使用$来操作jQuery库。<br>不过，其他JS库也可能使用变量$来进行操作，例如Prototype库。这个时候两个库可能会由于变量$的控制权问题而发生冲突。</p>
<h3 id="selector"><a href="#selector" class="headerlink" title="selector"></a>selector</h3><h3 id="context"><a href="#context" class="headerlink" title="context"></a>context</h3><h3 id="length"><a href="#length" class="headerlink" title="length"></a>length</h3><h3 id="size"><a href="#size" class="headerlink" title="size()"></a>size()</h3><h3 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h3><h3 id="index"><a href="#index" class="headerlink" title="index()"></a>index()</h3><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>标题</p>
<h2 id="筛选"><a href="#筛选" class="headerlink" title="筛选"></a>筛选</h2><h3 id="hasClass"><a href="#hasClass" class="headerlink" title="hasClass()"></a>hasClass()</h3><h3 id="is"><a href="#is" class="headerlink" title="is()"></a>is()</h3><h3 id="eq"><a href="#eq" class="headerlink" title="eq()"></a>eq()</h3><h3 id="first"><a href="#first" class="headerlink" title="first()"></a>first()</h3><h3 id="last"><a href="#last" class="headerlink" title="last()"></a>last()</h3><h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h3><h3 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h3><h3 id="has"><a href="#has" class="headerlink" title="has()"></a>has()</h3><h3 id="not"><a href="#not" class="headerlink" title="not()"></a>not()</h3><h3 id="each"><a href="#each" class="headerlink" title="each()"></a>each()</h3><h3 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h3><h3 id="children"><a href="#children" class="headerlink" title="children()"></a>children()</h3><h3 id="contents"><a href="#contents" class="headerlink" title="contents()"></a>contents()</h3><h3 id="end"><a href="#end" class="headerlink" title="end()"></a>end()</h3><h3 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h3><h3 id="next"><a href="#next" class="headerlink" title="next()"></a>next()</h3><h3 id="nextAll"><a href="#nextAll" class="headerlink" title="nextAll()"></a>nextAll()</h3><h3 id="nextUntil"><a href="#nextUntil" class="headerlink" title="nextUntil()"></a>nextUntil()</h3><h3 id="parent"><a href="#parent" class="headerlink" title="parent()"></a>parent()</h3><h3 id="parents"><a href="#parents" class="headerlink" title="parents()"></a>parents()</h3><h3 id="offsetParent"><a href="#offsetParent" class="headerlink" title="offsetParent()"></a>offsetParent()</h3><h3 id="closest"><a href="#closest" class="headerlink" title="closest()"></a>closest()</h3><h3 id="prev"><a href="#prev" class="headerlink" title="prev()"></a>prev()</h3><h3 id="prevAll"><a href="#prevAll" class="headerlink" title="prevAll()"></a>prevAll()</h3><h3 id="prevUntil"><a href="#prevUntil" class="headerlink" title="prevUntil()"></a>prevUntil()</h3><h3 id="siblings"><a href="#siblings" class="headerlink" title="siblings()"></a>siblings()</h3><h3 id="add"><a href="#add" class="headerlink" title="add()"></a>add()</h3><h3 id="addBack"><a href="#addBack" class="headerlink" title="addBack()"></a>addBack()</h3><h3 id="addSelf"><a href="#addSelf" class="headerlink" title="addSelf()"></a>addSelf()</h3><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><h3 id="attr-、removeAttr"><a href="#attr-、removeAttr" class="headerlink" title="attr()、removeAttr()"></a>attr()、removeAttr()</h3><h3 id="prop-、removeProp"><a href="#prop-、removeProp" class="headerlink" title="prop()、removeProp()"></a>prop()、removeProp()</h3><h3 id="attr-和prop-的区别"><a href="#attr-和prop-的区别" class="headerlink" title="attr()和prop()的区别"></a>attr()和prop()的区别</h3><h3 id="addClass-、removeClass"><a href="#addClass-、removeClass" class="headerlink" title="addClass()、removeClass()"></a>addClass()、removeClass()</h3><h3 id="toggleClass"><a href="#toggleClass" class="headerlink" title="toggleClass()"></a>toggleClass()</h3><h3 id="html"><a href="#html" class="headerlink" title="html()"></a>html()</h3><h3 id="text"><a href="#text" class="headerlink" title="text()"></a>text()</h3><h3 id="val"><a href="#val" class="headerlink" title="val()"></a>val()</h3><h2 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h2><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><h3 id="jQuery-ajax"><a href="#jQuery-ajax" class="headerlink" title="jQuery.ajax()"></a>jQuery.ajax()</h3><p>jQuery.ajax()函数用语通过后台HTTP请求加载远程数据。<br>用法一:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jQuery.ajax( [ settings ] )</div></pre></td></tr></table></figure></p>
<p>用法二:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jQuery.ajax( url [, settings ] )</div></pre></td></tr></table></figure></p>
<p>用法二是用法一的变体，它只是将参数对象settings中的可选属性url单独提取出来作为一个独立的参数。<br>settings是一个object对象，其中的每个属性来置顶发送请求所需的额外参数设置:</p>
<h4 id="accepts"><a href="#accepts" class="headerlink" title="accepts"></a>accepts</h4><h4 id="async"><a href="#async" class="headerlink" title="async"></a>async</h4><p>默认值：true<br>致使是否异步请求。同步请求将锁定浏览器，直到获取到远程书记后才能执行其他操作。</p>
<h4 id="beforeSend"><a href="#beforeSend" class="headerlink" title="beforeSend"></a>beforeSend</h4><h4 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h4><h4 id="complete"><a href="#complete" class="headerlink" title="complete"></a>complete</h4><h3 id="jQuery-get"><a href="#jQuery-get" class="headerlink" title="jQuery.get()"></a>jQuery.get()</h3><h3 id="jQuery-post"><a href="#jQuery-post" class="headerlink" title="jQuery.post()"></a>jQuery.post()</h3><h3 id="jQuery-getJSON"><a href="#jQuery-getJSON" class="headerlink" title="jQuery.getJSON()"></a>jQuery.getJSON()</h3><h3 id="jQuery-getScript"><a href="#jQuery-getScript" class="headerlink" title="jQuery.getScript()"></a>jQuery.getScript()</h3><h3 id="load"><a href="#load" class="headerlink" title="load()"></a>load()</h3><h3 id="jQuery-ajaxPrefilter"><a href="#jQuery-ajaxPrefilter" class="headerlink" title="jQuery.ajaxPrefilter()"></a>jQuery.ajaxPrefilter()</h3><h3 id="jQuery-ajaxSetup"><a href="#jQuery-ajaxSetup" class="headerlink" title="jQuery.ajaxSetup()"></a>jQuery.ajaxSetup()</h3><h3 id="serialize"><a href="#serialize" class="headerlink" title="serialize()"></a>serialize()</h3><h3 id="serializeArray"><a href="#serializeArray" class="headerlink" title="serializeArray()"></a>serializeArray()</h3><h3 id="jQuery-param"><a href="#jQuery-param" class="headerlink" title="jQuery.param()"></a>jQuery.param()</h3><h3 id="ajaxStart"><a href="#ajaxStart" class="headerlink" title="ajaxStart()"></a>ajaxStart()</h3><h3 id="ajaxSend"><a href="#ajaxSend" class="headerlink" title="ajaxSend()"></a>ajaxSend()</h3><h3 id="ajaxComplete"><a href="#ajaxComplete" class="headerlink" title="ajaxComplete()"></a>ajaxComplete()</h3><h3 id="ajaxSuccess"><a href="#ajaxSuccess" class="headerlink" title="ajaxSuccess()"></a>ajaxSuccess()</h3><h3 id="ajaxError"><a href="#ajaxError" class="headerlink" title="ajaxError()"></a>ajaxError()</h3><h3 id="ajaxStop"><a href="#ajaxStop" class="headerlink" title="ajaxStop()"></a>ajaxStop()</h3><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Sublime Text快捷键]]></title>
      <url>http://zy380196088.github.io./2016/05/04/Sublime-Text%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      <content type="html"><![CDATA[<h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><p>Command + D 选中一个单词<br>Command + L 选中一行<br><a id="more"></a></p>
<p>Command + A 全选<br>Ctrl + Command + M 选中括号内的所有内容</p>
<p>Command + Ctrl + G (选中部分文本时)按此组合键可以选中所有相同文本</p>
<h2 id="CSS排序"><a href="#CSS排序" class="headerlink" title="CSS排序"></a>CSS排序</h2><p>选中CSS属性后按F5</p>
<h2 id="命令面板"><a href="#命令面板" class="headerlink" title="命令面板"></a>命令面板</h2><p>Command + shift + P</p>
<h2 id="跨文件编辑"><a href="#跨文件编辑" class="headerlink" title="跨文件编辑"></a>跨文件编辑</h2><p>Command + Shift + F 查找、替换代码</p>
<h2 id="文件爬虫"><a href="#文件爬虫" class="headerlink" title="文件爬虫"></a>文件爬虫</h2><p>Command + R 列出文档中所有的CSS选择器</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSS3动画]]></title>
      <url>http://zy380196088.github.io./2016/04/22/CSS3-%E5%8A%A8%E7%94%BB/</url>
      <content type="html"><![CDATA[<p>CSS3动画的属性主要分为三类：transform,transition,animation.<br><a id="more"></a></p>
<h2 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h2><h3 id="rotate"><a href="#rotate" class="headerlink" title="rotate()"></a>rotate()</h3><p>设置元素顺时针旋转的角度，参数x必须是以deg结尾的角度数或0,可为负数表示反向：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transform</span><span class="selector-pseudo">:rotate(x)</span>;</div></pre></td></tr></table></figure></p>
<h3 id="scale"><a href="#scale" class="headerlink" title="scale()"></a>scale()</h3><p>设置元素放大或者缩小的倍数，用法：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">scale</span>(<span class="selector-tag">a</span>);      <span class="comment">/*元素x和y方向均缩放a倍*/</span></div><div class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">scale</span>(<span class="selector-tag">a</span>, <span class="selector-tag">b</span>);   <span class="comment">/*元素x方向缩放a倍，y方向缩放b倍*/</span></div><div class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">scaleX</span>(<span class="selector-tag">a</span>);     <span class="comment">/*元素x方向缩放a倍，y方向不变*/</span></div><div class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">scaleY</span>(<span class="selector-tag">b</span>);     <span class="comment">/*元素y方向缩放b倍，x方向不变*/</span></div></pre></td></tr></table></figure></p>
<h3 id="translate"><a href="#translate" class="headerlink" title="translate()"></a>translate()</h3><p>设置元素的位移，用法：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translate</span>(<span class="selector-tag">a</span>, <span class="selector-tag">b</span>);  <span class="comment">/*元素x方向位移a，y方向位移b*/</span></div><div class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translateX</span>(<span class="selector-tag">a</span>);    <span class="comment">/*元素x方向位移a，y方向不变*/</span></div><div class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translateY</span>(<span class="selector-tag">b</span>);    <span class="comment">/*元素y方向位移b，x方向不变*/</span></div></pre></td></tr></table></figure></p>
<h3 id="skew"><a href="#skew" class="headerlink" title="skew()"></a>skew()</h3><p>设置元素倾斜的角度，参数均必须是以deg结尾的角度数或0，可为负数表示反向<br>：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">skew</span>(<span class="selector-tag">a</span>,<span class="selector-tag">b</span>);  <span class="comment">/*元素x方向逆时针倾斜角度a，y方向顺时针倾斜角度b*/</span></div><div class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">skewX</span>(<span class="selector-tag">a</span>);   <span class="comment">/*元素x方向逆时针倾斜角度a，y方向不变*/</span></div><div class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">skewY</span>(<span class="selector-tag">b</span>);   <span class="comment">/*元素y方向顺时针倾斜角度b，想方向不变*/</span></div></pre></td></tr></table></figure></p>
<h3 id="origin"><a href="#origin" class="headerlink" title="origin"></a>origin</h3><p>设置元素的悬挂点，元素的悬挂点即为它旋转和倾斜时的中心点。取值中的a、b可以是长度值、以%结尾的百分比或者left、top、right、bottom四个值。用法：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transform-origin</span>: <span class="selector-tag">a</span> <span class="selector-tag">b</span>;  <span class="comment">/*元素的悬挂点为(a, b)*/</span></div></pre></td></tr></table></figure></p>
<h3 id="matrix"><a href="#matrix" class="headerlink" title="matrix"></a>matrix</h3><p>设置元素的变形矩阵,有点复杂，详情参考：<br><a href="http://www.zhangxinxu.com/wordpress/2012/06/css3-transform-matrix-矩阵/comment-page-2/" target="_blank" rel="external">理解CSS3 transform中的Matrix(矩阵)</a></p>
<h2 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h2><h3 id="transition-property"><a href="#transition-property" class="headerlink" title="transition-property"></a>transition-property</h3><p>指定transition效果作用的CSS属性</p>
<h3 id="transition-duration"><a href="#transition-duration" class="headerlink" title="transition-duration"></a>transition-duration</h3><p>动画效果持续的时间，值为以s结尾的秒数</p>
<h3 id="transition-timing-function"><a href="#transition-timing-function" class="headerlink" title="transition-timing-function"></a>transition-timing-function</h3><p>指定元素状态的变化速率函数，取值基于贝赛尔曲线函数：<br><img src="/images/css3-transition-timing-function.gif" alt=""></p>
<h3 id="transition-delay"><a href="#transition-delay" class="headerlink" title="transition-delay"></a>transition-delay</h3><p>动画效果推迟开始执行的时间，其值为以s结尾的秒数。<br>CSS3动画的生命周期如下图所示，从中可以清楚的看出duration和delay之间的关系：<br><img src="/images/css3-transition-delay.png" alt=""></p>
<h2 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h2><p>CSS3中真正的动画属性是animation，而前面的transform和transition都只是对DOM元素的变形或者是状态的过渡。实际上，CSS3所支持的动画效果只是填充动画，也就是说先设定整个动画生命周期中的几个关键状态（key  frame，关键帧），然后动画将自行计算并模拟关键帧之间的过渡。那么在设置animation的属性之前就必须先设定好关键帧了。<br>关键帧@keyframes的语法结构如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">keyframesNAME</span> &#123;</div><div class="line">         <span class="selector-tag">a</span>% &#123;</div><div class="line">         <span class="comment">/*CSS属性*/</span></div><div class="line">         &#125;</div><div class="line">         <span class="selector-tag">b</span>% &#123;</div><div class="line">                  <span class="comment">/*CSS属性*/</span></div><div class="line">         &#125;</div><div class="line">         ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>NAME表示动画的名字；a%、b%表示以百分号结尾的百分数，用于设定该关键帧在动画生命周期中的位置；百分数后面的{ } 中则需要写成该关键帧状态下CSS属性的值。另外，如果同一个百分数值在@keyframes中出现多次，那么后出现的将覆盖先出现的；并且关键帧在@keyframes中时无序的。<br>设置完关键帧后就可以继续设定animation了。</p>
<h3 id="animation-name"><a href="#animation-name" class="headerlink" title="animation-name"></a>animation-name</h3><h3 id="animation-duration"><a href="#animation-duration" class="headerlink" title="animation-duration"></a>animation-duration</h3><h3 id="animation-timing-function"><a href="#animation-timing-function" class="headerlink" title="animation-timing-function"></a>animation-timing-function</h3><h3 id="animation-delay"><a href="#animation-delay" class="headerlink" title="animation-delay"></a>animation-delay</h3><h3 id="animation-iteration-count"><a href="#animation-iteration-count" class="headerlink" title="animation-iteration-count"></a>animation-iteration-count</h3><p>设定动画执行的次数，其值可以是数字也可以是infinite（循环执行）。</p>
<h3 id="animation-direction"><a href="#animation-direction" class="headerlink" title="animation-direction"></a>animation-direction</h3><p>设定动画执行的方向，其值可以是normal（正常顺序播放）或alternate（反向播放）。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[今日感想]]></title>
      <url>http://zy380196088.github.io./2016/04/21/%E4%BB%8A%E6%97%A5%E6%84%9F%E6%83%B3/</url>
      <content type="html"><![CDATA[<p>想一步到位不行的。<br>每个台阶非得一步一步走。<br>by dad<br><a id="more"></a></p>
<p> 今天有点沮丧，毕业近两年，因为各种原因（说白了也是替自己的懒惰找借口），什么考驾照、考研、炒股……浑浑噩噩得就这么过着了，我居然沦落到靠卖艺为生＝ ＝，说沦落是不是有点太贬低自己，好歹小提琴也算门技术活。</p>
<p> 最开始走上这条路是在大二的时候，在同系（我是计算机系的＝ ＝）的同学的介绍下，在学校附近的一个楼盘开业上四重奏迎宾打了个酱油。当时也有想做兼职的想法，后来感觉怎么都是些发传单，推销产品之类， 一天也就100左右，费时钱少的活，于是作罢。第一次演出大概拉了半小时，演出费200，当时觉得好大一笔巨款（原谅我的天真无知，我又不是富二代），到现在想想，当时傻得可以，被坑这么惨，还乐的像朵花似的。</p>
<p> 后来，要分专业方向了，嵌入式和云计算。犹豫不决的，跟从了寝室的大部队选择了嵌入式，当时云计算虚得很完全不知道是什么。从此走上了c++的不归路，上课就浑浑噩噩得，下课精神抖擞。</p>
<p> 大三大四 ，加入寝室考研小分队，小提琴演出也是同时进行着的，可想当然，考研稳妥妥的没戏了。现在，领悟到这几年，除了赚得了一些零花钱之外，其实我一直在走下坡了。</p>
<p>在一篇关于房地产的新闻下偶然看到一句评论（只记得大致的意思，具体数据可能有出入）：“2005年，15万的存款，家里人让我买房，我选择买了辆车，从此我的人生走向了下坡路。”<br>莫名的戳中笑点。<br>我不想10年后，也发出这样无奈的感慨，一个选择真的可以改变很多。</p>
<p>我也不知道现在选择重新进军前端的选择是对是错，只是看到那些酷炫的网站还有app有种莫名的热血沸腾，那就朝着这个方向努力吧…</p>
<p>晚安，最后附送一个比较酷的网站：<br><a href="http://species-in-pieces.com" target="_blank" rel="external">拼图30</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac OS截图技巧]]></title>
      <url>http://zy380196088.github.io./2016/04/21/Mac-OS%E6%94%B9%E5%8F%98%E6%88%AA%E5%9B%BE%E9%BB%98%E8%AE%A4%E5%9C%B0%E5%9D%80/</url>
      <content type="html"><![CDATA[<h2 id="改变储存截图的默认地址和格式"><a href="#改变储存截图的默认地址和格式" class="headerlink" title="改变储存截图的默认地址和格式"></a>改变储存截图的默认地址和格式</h2><p>首先新建一个文件夹目录，右键，选择 拷贝路径 / 路径 选项。</p>
<h3 id="修改截图保存路径"><a href="#修改截图保存路径" class="headerlink" title="修改截图保存路径"></a>修改截图保存路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">defaults write com.apple.screencapture location 刚才创建的拷贝的路径(command+v)</div></pre></td></tr></table></figure>
<h3 id="保存为jpg格式文件。"><a href="#保存为jpg格式文件。" class="headerlink" title="保存为jpg格式文件。"></a>保存为jpg格式文件。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">defaults write com.apple.screencapture type jpg (修改文件名称为jpg)【括号里面的不要输入】</div></pre></td></tr></table></figure>
<h2 id="截取全屏：快捷键（Shift＋Command＋3）"><a href="#截取全屏：快捷键（Shift＋Command＋3）" class="headerlink" title="截取全屏：快捷键（Shift＋Command＋3）"></a>截取全屏：快捷键（Shift＋Command＋3）</h2><h2 id="截图窗口：快捷键（Shift-Command-4，然后按空格键）"><a href="#截图窗口：快捷键（Shift-Command-4，然后按空格键）" class="headerlink" title="截图窗口：快捷键（Shift+Command+4，然后按空格键）"></a>截图窗口：快捷键（Shift+Command+4，然后按空格键）</h2><h2 id="截取任意窗口：快捷键（Shift＋Command＋4）"><a href="#截取任意窗口：快捷键（Shift＋Command＋4）" class="headerlink" title="截取任意窗口：快捷键（Shift＋Command＋4）"></a>截取任意窗口：快捷键（Shift＋Command＋4）</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ajax学习笔记]]></title>
      <url>http://zy380196088.github.io./2016/04/21/Ajax%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="Ajax的作用"><a href="#Ajax的作用" class="headerlink" title="Ajax的作用"></a>Ajax的作用</h2><p>不重新加载整个网页的情况下，对网页的某部分进行更新。<br><a id="more"></a></p>
<h2 id="Ajax的原理"><a href="#Ajax的原理" class="headerlink" title="Ajax的原理"></a>Ajax的原理</h2><h3 id="XMLHttpRequest对象"><a href="#XMLHttpRequest对象" class="headerlink" title="XMLHttpRequest对象"></a>XMLHttpRequest对象</h3><p>通过在后台与服务器进行少量数据交换，使网页实现异步更新。</p>
<h3 id="创建XMLHttpRequest对象"><a href="#创建XMLHttpRequest对象" class="headerlink" title="创建XMLHttpRequest对象"></a>创建XMLHttpRequest对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xmlhttp;</div><div class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)&#123;</div><div class="line">	<span class="comment">//code for IE7+,Firefox , Chrome, Opera, Safari</span></div><div class="line">	xmlhttp = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">&#125;<span class="keyword">else</span>&#123;<span class="comment">//code for IE6,IE5</span></div><div class="line">	xmlhttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="XMLHttpRequest发送请求"><a href="#XMLHttpRequest发送请求" class="headerlink" title="XMLHttpRequest发送请求"></a>XMLHttpRequest发送请求</h3><p>两种方法</p>
<h4 id="open-method-url-async"><a href="#open-method-url-async" class="headerlink" title="open(method,url,async)"></a>open(method,url,async)</h4><p>规定请求的类型、url以及是否异步处理请求<br>method: 请求的类型;GET 或者 POST<br>url: 文件在服务器上的位置<br>async:true(异步)、false(同步)</p>
<h4 id="send-string"><a href="#send-string" class="headerlink" title="send(string)"></a>send(string)</h4><p>将请求发送到服务器<br>string:仅用于POST请求，GET请求不需填写</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git常用命令]]></title>
      <url>http://zy380196088.github.io./2016/04/16/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h2 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h2><pre><code>git config --global user.name “youname”
git config --global user.email “123456@example.com”
</code></pre>
<a id="more"></a>
## Git基础
### 查看配置信息
<pre><code>git config --list
git config -l
</code></pre>

<h3 id="初始化新仓库"><a href="#初始化新仓库" class="headerlink" title="初始化新仓库"></a>初始化新仓库</h3><pre><code>git init</code></pre>
初始化后，在当前目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。

### 跟踪文件
<pre><code>git add</code></pre>

<h3 id="跟踪全部文件"><a href="#跟踪全部文件" class="headerlink" title="跟踪全部文件"></a>跟踪全部文件</h3><pre><code>giat add .</code></pre>

<h3 id="提脚更新"><a href="#提脚更新" class="headerlink" title="提脚更新"></a>提脚更新</h3><pre><code>git commit -m "跟新描述"</code></pre>

<h3 id="添加原程仓库"><a href="#添加原程仓库" class="headerlink" title="添加原程仓库"></a>添加原程仓库</h3><pre><code>git remote add [shortname] [url]</code></pre>
例如:
<pre><code>git remote add origin git@github.com:yourname/yourRepo.git</code></pre>

<h3 id="上传推送到github"><a href="#上传推送到github" class="headerlink" title="上传推送到github"></a>上传推送到github</h3><pre><code>git push [remote-name] [branch-name]
git push origin master</code></pre>

<p>如果要把本地的 master 分支推送到origin服务器上(再次说明下，克隆操作会自动使用默认的master 和origin 名字)</p>
<h3 id="从远程仓库克隆"><a href="#从远程仓库克隆" class="headerlink" title="从远程仓库克隆"></a>从远程仓库克隆</h3><pre><code>git clone git://github.com/youname/project.git
git clone git@github.com:youname/project.git
git clone https://github.com/youname/project.git
</code></pre>

<h3 id="从原程仓库抓取数据"><a href="#从原程仓库抓取数据" class="headerlink" title="从原程仓库抓取数据"></a>从原程仓库抓取数据</h3><pre><code>git fetch [remote-name]</code></pre>

<h3 id="删除原程仓库"><a href="#删除原程仓库" class="headerlink" title="删除原程仓库"></a>删除原程仓库</h3><pre><code>git remote rm otigin</code></pre>

<h3 id="检查当前文件状态"><a href="#检查当前文件状态" class="headerlink" title="检查当前文件状态"></a>检查当前文件状态</h3><pre><code>git status</code></pre>

<h3 id="创建-gitginore文件"><a href="#创建-gitginore文件" class="headerlink" title="创建.gitginore文件"></a>创建.gitginore文件</h3><pre><code>touch .gitignore</code></pre>

<h3 id="查看修改之后-没有暂存起来的内容"><a href="#查看修改之后-没有暂存起来的内容" class="headerlink" title="查看修改之后 没有暂存起来的内容"></a>查看修改之后 没有暂存起来的内容</h3><pre><code>git diff</code></pre>

<h3 id="移除文件"><a href="#移除文件" class="headerlink" title="移除文件"></a>移除文件</h3><pre><code>git rm 文件名.后缀</code></pre>

<h3 id="重命名文件"><a href="#重命名文件" class="headerlink" title="重命名文件"></a>重命名文件</h3><pre><code>git mv oldname.后缀 newname.后缀</code></pre>

<h3 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h3><pre><code>git log</code></pre>

<h3 id="取消暂存"><a href="#取消暂存" class="headerlink" title="取消暂存"></a>取消暂存</h3><pre><code>git reset 文件名</code></pre>

<h2 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a>Git分支</h2><h3 id="创建名为name的分支"><a href="#创建名为name的分支" class="headerlink" title="创建名为name的分支"></a>创建名为name的分支</h3><pre><code>git branch name</code></pre>

<h3 id="切换到name分支（默认master分支）"><a href="#切换到name分支（默认master分支）" class="headerlink" title="切换到name分支（默认master分支）"></a>切换到name分支（默认master分支）</h3><pre><code>git checkout name</code></pre>

<p>上面两条命令可缩写为：</p>
<pre><code>git checkout -b name</code></pre>

<h3 id="删除name分支（如果该分支还未被合并则会提示错误，因为这样会丢失数据）"><a href="#删除name分支（如果该分支还未被合并则会提示错误，因为这样会丢失数据）" class="headerlink" title="删除name分支（如果该分支还未被合并则会提示错误，因为这样会丢失数据）"></a>删除name分支（如果该分支还未被合并则会提示错误，因为这样会丢失数据）</h3><pre><code>git branch -d name</code></pre>

<p>强制删除：<pre><code>git branch -D name</code></pre></p>
<h3 id="合并分支（先切换到master分支）"><a href="#合并分支（先切换到master分支）" class="headerlink" title="合并分支（先切换到master分支）"></a>合并分支（先切换到master分支）</h3><pre><code>git checkout master
git merge name</code></pre>

<h3 id="查看当前所有分支"><a href="#查看当前所有分支" class="headerlink" title="查看当前所有分支"></a>查看当前所有分支</h3><pre><code>git branch</code></pre>

<h3 id="查看各个分支最后一个提交对象的信息"><a href="#查看各个分支最后一个提交对象的信息" class="headerlink" title="查看各个分支最后一个提交对象的信息"></a>查看各个分支最后一个提交对象的信息</h3><pre><code>git branch -v</code></pre>

<h3 id="查看已经与当前分支合并的分支（已经合并的查出来后可以删掉）"><a href="#查看已经与当前分支合并的分支（已经合并的查出来后可以删掉）" class="headerlink" title="查看已经与当前分支合并的分支（已经合并的查出来后可以删掉）"></a>查看已经与当前分支合并的分支（已经合并的查出来后可以删掉）</h3><pre><code>git branch --merge</code></pre>

<h3 id="查看未与当前分支合并的分支"><a href="#查看未与当前分支合并的分支" class="headerlink" title="查看未与当前分支合并的分支"></a>查看未与当前分支合并的分支</h3><pre><code>git branch --no-merged</code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript中的this陷阱的收集]]></title>
      <url>http://zy380196088.github.io./2016/04/15/JavaScript%E4%B8%AD%E7%9A%84this%E9%99%B7%E9%98%B1%E7%9A%84%E6%94%B6%E9%9B%86/</url>
      <content type="html"><![CDATA[<p>本文摘阅自<a href="https://segmentfault.com/a/1190000002640298" target="_blank" rel="external">JavaScript中的this陷阱的最全收集–没有之一</a><br><a id="more"></a></p>
<h2 id="global-this"><a href="#global-this" class="headerlink" title="global this"></a>global this</h2><p>在浏览器里，在全局范围内，this等价于window对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>); <span class="comment">//true</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>在浏览器里，在全局范围内，用var声明一个变量和给this或者window添加属性是等价的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">     <span class="keyword">var</span> foo = <span class="string">"bar"</span>;</div><div class="line">     <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo); <span class="comment">//logs "bar"</span></div><div class="line">     <span class="built_in">console</span>.log(<span class="built_in">window</span>.foo); <span class="comment">//logs "bar"</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>如果你在声明一个变量的时候没有使用var或者let(ECMAScript 6),你就是在给全局的this添加或者改变属性值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">      foo = <span class="string">"bar"</span>;</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">function</span> <span class="title">testThis</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        foo = <span class="string">"foo"</span>;</div><div class="line">      &#125;</div><div class="line">     <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo); <span class="comment">//logs "bar"</span></div><div class="line">     testThis();</div><div class="line">     <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo); <span class="comment">//logs "foo"</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>在node环境里，如果使用REPL(Read-Eval-Print Loop，简称REPL:读取-求值-输出,是一个简单的，交互式的编程环境)来执行程序,this并不是最高级的命名空间，最高级的是global.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt; this</div><div class="line">&#123; ArrayBuffer: [Function: ArrayBuffer],</div><div class="line">  Int8Array: &#123; [Function: Int8Array] BYTES_PER_ELEMENT: 1 &#125;,</div><div class="line">  Uint8Array: &#123; [Function: Uint8Array] BYTES_PER_ELEMENT: 1 &#125;,</div><div class="line">  ...</div><div class="line">&gt; global === this</div><div class="line">true</div></pre></td></tr></table></figure></p>
<p>在node环境里，如果执行一个js脚本，在全局范围内，this以一个空对象开始作为最高级的命名空间，这个时候，它和global不是等价的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">test.js脚本内容：</div><div class="line">console.log(this);</div><div class="line">console.log(this === global);</div><div class="line"></div><div class="line">REPL运行脚本：</div><div class="line">$ node test.js</div><div class="line">&#123;&#125;</div><div class="line">false</div></pre></td></tr></table></figure></p>
<p>在node环境里，在全局范围内，如果你用REPL执行一个脚本文件，用var声明一个变量并不会和在浏览器里面一样将这个变量添加给this。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">test.js:</div><div class="line"></div><div class="line">var foo = &quot;bar&quot;;</div><div class="line">console.log(this.foo);</div><div class="line"></div><div class="line">$ node test.js</div><div class="line">undefined</div></pre></td></tr></table></figure></p>
<p>但是如果你不是用REPL执行脚本文件，而是直接执行代码，结果和在浏览器里面是一样的(神坑)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; var foo = &quot;bar&quot;;</div><div class="line">&gt; this.foo</div><div class="line">  bar</div><div class="line">&gt; global.foo</div><div class="line">  bar</div></pre></td></tr></table></figure></p>
<p>在node环境里，用REPL运行脚本文件的时候，如果在声明变量的时候没有使用var或者let，这个变量会自动添加到global对象，但是不会自动添加给this对象。如果是直接执行代码，则会同时添加给global和this.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">test.js</div><div class="line"> foo = &quot;bar&quot;;</div><div class="line"> console.log(this.foo);</div><div class="line"> console.log(global.foo);</div><div class="line"></div><div class="line">$ node test.js</div><div class="line">  undefined</div><div class="line">  bar</div></pre></td></tr></table></figure></p>
<p>上面的八种情况可能大家已经绕晕了，总结起来就是：在<strong>浏览器</strong>里面<strong>this</strong>是老大，它等价于window对象，如果你声明一些全局变量(不管在任何地方)，这些变量都会作为this的属性。在node里面，有两种执行JavaScript代码的方式，一种是直接执行写好的<strong>JavaScript</strong>文件，另外一种是直接在里面执行<strong>一行行代码</strong>。对于直接运行一行行JavaScript代码的方式，global才是老大，this和它是等价的。在这种情况下，和浏览器比较相似，也就是声明一些全局变量会自动添加给老大global，顺带也会添加给this。但是在node里面直接脚本文件就不一样了，你声明的全局变量不会自动添加到this，但是会添加到global对象。所以相同点是，在全局范围内，全局变量终究是属于老大的。</p>
<h2 id="function-this"><a href="#function-this" class="headerlink" title="function this"></a>function this</h2><p>无论是在浏览器环境还是node环境， 除了在DOM事件处理程序里或者给出了thisArg(接下来会讲到)外，如果不是用new调用，在函数里面使用this都是指代全局范围的this。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    foo = <span class="string">"bar"</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">testThis</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    	<span class="keyword">this</span>.foo = <span class="string">"foo"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo); <span class="comment">//logs "bar"</span></div><div class="line">    testThis();</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo); <span class="comment">//logs "foo"</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>除非你使用严格模式，这时候this就会变成undefined。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    foo = <span class="string">"bar"</span>; </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">testThis</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="meta">    	"use strict"</span>;</div><div class="line">    	<span class="keyword">this</span>.foo = <span class="string">"foo"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">   	<span class="built_in">console</span>.log(<span class="keyword">this</span>.foo); <span class="comment">//logs "bar"</span></div><div class="line">    testThis();  <span class="comment">//Uncaught TypeError: Cannot set property 'foo' of undefined </span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>如果你在调用函数的时候在前面使用了new，this就会变成一个新的值，和global的this脱离干系。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    foo = <span class="string">"bar"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">testThis</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    	<span class="keyword">this</span>.foo = <span class="string">"foo"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo); <span class="comment">//logs "bar"</span></div><div class="line">    <span class="keyword">new</span> testThis();</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo); <span class="comment">//logs "bar"</span></div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> testThis().foo); <span class="comment">//logs "foo"</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="prototype-this"><a href="#prototype-this" class="headerlink" title="prototype this"></a>prototype this</h2><p>你创建的每一个函数都是函数对象。它们会自动获得一个特殊的属性prototype，你可以给这个属性赋值。当你用new的方式调用一个函数的时候，你就能通过this访问你给prototype赋的值了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123;</div><div class="line">       <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo);</div><div class="line">&#125;</div><div class="line"></div><div class="line">Thing.prototype.foo = <span class="string">"bar"</span>;</div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing(); <span class="comment">//logs "bar"</span></div><div class="line"><span class="built_in">console</span>.log(thing.foo);  <span class="comment">//logs "bar"</span></div></pre></td></tr></table></figure></p>
<p>当你使用new为你的函数创建多个实例的时候，这些实例会共享你给prototype设定的值。对于下面的例子，当你调用this.foo的时候，都会返回相同的值，除非你在某个实例里面重写了自己的this.foo<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Thing.prototype.foo = <span class="string">"bar"</span>;</div><div class="line">Thing.prototype.logFoo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo);</div><div class="line">&#125;</div><div class="line">Thing.prototype.setFoo = <span class="function"><span class="keyword">function</span> (<span class="params">newFoo</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.foo = newFoo;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> thing1 = <span class="keyword">new</span> Thing();</div><div class="line"><span class="keyword">var</span> thing2 = <span class="keyword">new</span> Thing();</div><div class="line"></div><div class="line">thing1.logFoo(); <span class="comment">//logs "bar"</span></div><div class="line">thing2.logFoo(); <span class="comment">//logs "bar"</span></div><div class="line">thing1.setFoo(<span class="string">"foo"</span>);</div><div class="line">thing1.logFoo(); <span class="comment">//logs "foo";</span></div><div class="line">thing2.logFoo(); <span class="comment">//logs "bar";</span></div><div class="line"></div><div class="line">thing2.foo = <span class="string">"foobar"</span>;</div><div class="line">thing1.logFoo(); <span class="comment">//logs "foo";</span></div><div class="line">thing2.logFoo(); <span class="comment">//logs "foobar";</span></div></pre></td></tr></table></figure></p>
<p>实例里面的this是一个特殊的对象。你可以把this想成一种获取prototype的值的一种方式。当你在一个实例里面直接给this添加属性的时候，会隐藏prototype中与之同名的属性。如果你想访问prototype中的这个属性值而不是你自己设定的属性值，你可以通过在实例里面删除你自己添加的属性的方式来实现。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Thing.prototype.foo = <span class="string">"bar"</span>;</div><div class="line">Thing.prototype.logFoo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo);</div><div class="line">&#125;</div><div class="line">Thing.prototype.setFoo = <span class="function"><span class="keyword">function</span> (<span class="params">newFoo</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.foo = newFoo;</div><div class="line">&#125;</div><div class="line">Thing.prototype.deleteFoo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.foo;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing();</div><div class="line">thing.setFoo(<span class="string">"foo"</span>);</div><div class="line">thing.logFoo(); <span class="comment">//logs "foo";</span></div><div class="line">thing.deleteFoo();</div><div class="line">thing.logFoo(); <span class="comment">//logs "bar";</span></div><div class="line">thing.foo = <span class="string">"foobar"</span>;</div><div class="line">thing.logFoo(); <span class="comment">//logs "foobar";</span></div><div class="line"><span class="keyword">delete</span> thing.foo;</div><div class="line">thing.logFoo(); <span class="comment">//logs "bar";</span></div></pre></td></tr></table></figure></p>
<p>或者你也能直接通过引用函数对象的prototype 来获得你需要的值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Thing.prototype.foo = <span class="string">"bar"</span>;</div><div class="line">Thing.prototype.logFoo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo, Thing.prototype.foo);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing();</div><div class="line">thing.foo = <span class="string">"foo"</span>;</div><div class="line">thing.logFoo(); <span class="comment">//logs "foo bar";</span></div></pre></td></tr></table></figure></p>
<p>通过一个函数创建的实例会共享这个函数的prototype属性的值，如果你给这个函数的prototype赋值一个Array，那么所有的实例都会共享这个Array，除非你在实例里面重写了这个Array，这种情况下，函数的prototype的Array就会被隐藏掉。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Thing.prototype.things = [];</div><div class="line"><span class="keyword">var</span> thing1 = <span class="keyword">new</span> Thing();</div><div class="line"><span class="keyword">var</span> thing2 = <span class="keyword">new</span> Thing();</div><div class="line">thing1.things.push(<span class="string">"foo"</span>);</div><div class="line"><span class="built_in">console</span>.log(thing2.things); <span class="comment">//logs ["foo"]</span></div></pre></td></tr></table></figure></p>
<p>给一个函数的prototype赋值一个Array通常是一个错误的做法。如果你想每一个实例有他们专属的Array，你应该在函数里面创建而不是在prototype里面创建。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.things = [];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> thing1 = <span class="keyword">new</span> Thing();</div><div class="line"><span class="keyword">var</span> thing2 = <span class="keyword">new</span> Thing();</div><div class="line">thing1.things.push(<span class="string">"foo"</span>);</div><div class="line"><span class="built_in">console</span>.log(thing1.things); <span class="comment">//logs ["foo"]</span></div><div class="line"><span class="built_in">console</span>.log(thing2.things); <span class="comment">//logs []</span></div></pre></td></tr></table></figure></p>
<p>实你可以通过把多个函数的prototype链接起来的从而形成一个原型链，因此this就会魔法般地沿着这条原型链往上查找直到找你你需要引用的值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Thing1.prototype.foo = <span class="string">"bar"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing2</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Thing2.prototype = <span class="keyword">new</span> Thing1();</div><div class="line"></div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing2();</div><div class="line"><span class="built_in">console</span>.log(thing.foo); <span class="comment">//logs "bar"</span></div></pre></td></tr></table></figure></p>
<p>一些人利用原型链的特性来在JavaScript模仿经典的面向对象的继承方式。任何给用于构建原型链的函数的this的赋值的语句都会隐藏原型链上游的相同的属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Thing1.prototype.foo = <span class="string">"bar"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing2</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.foo = <span class="string">"foo"</span>;</div><div class="line">&#125;</div><div class="line">Thing2.prototype = <span class="keyword">new</span> Thing1();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing3</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Thing3.prototype = <span class="keyword">new</span> Thing2();</div><div class="line"></div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing3();</div><div class="line"><span class="built_in">console</span>.log(thing.foo); <span class="comment">//logs "foo"</span></div></pre></td></tr></table></figure></p>
<p>在prototype里面定义的方法里面使用this会影响到当前实例的原型链的上游的this。这意味着你直接给this赋值的时候，隐藏了原型链上游的相同的属性值。这个实例的任何方法都会使用这个最新的值而不是原型里面定义的这个相同的值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Thing1.prototype.foo = <span class="string">"bar"</span>;</div><div class="line">Thing1.prototype.logFoo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing2</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.foo = <span class="string">"foo"</span>;</div><div class="line">&#125;</div><div class="line">Thing2.prototype = <span class="keyword">new</span> Thing1();</div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing2();</div><div class="line">thing.logFoo(); <span class="comment">//logs "foo";</span></div></pre></td></tr></table></figure></p>
<p>在JavaScript里面你可以嵌套函数，也就是你可以在函数里面定义函数。嵌套函数可以通过闭包捕获父函数的变量，但是这个函数没有继承this.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Thing.prototype.foo = <span class="string">"bar"</span>;</div><div class="line">Thing.prototype.logFoo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> info = <span class="string">"attempting to log this.foo:"</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doIt</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(info, <span class="keyword">this</span>.foo);</div><div class="line">    &#125;</div><div class="line">    doIt();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing();</div><div class="line">thing.logFoo();  <span class="comment">//logs "attempting to log this.foo: undefined"</span></div></pre></td></tr></table></figure></p>
<p>在doIt里面的this是global对象或者在严格模式下面是undefined。这是造成很多不熟悉JavaScript的人深陷 this陷阱的根源。在这种情况下事情变得非常糟糕，就像你把一个实例的方法当作一个值，把这个值当作函数参数传递给另外一个函数但是却不把这个实例传递给这个函数一样。在这种情况下，一个方法里面的环境变成了全局范围，或者在严格模式下面的undefined。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Thing.prototype.foo = <span class="string">"bar"</span>;</div><div class="line">Thing.prototype.logFoo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo);   </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doIt</span>(<span class="params">method</span>) </span>&#123;</div><div class="line">    method();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing();</div><div class="line">thing.logFoo(); <span class="comment">//logs "bar"</span></div><div class="line">doIt(thing.logFoo); <span class="comment">//logs undefined</span></div></pre></td></tr></table></figure></p>
<p>我喜欢先把this捕获到一个变量里面，通常这个变量叫做self，来避免上面这种情况的发生。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Thing.prototype.foo = <span class="string">"bar"</span>;</div><div class="line">Thing.prototype.logFoo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">var</span> info = <span class="string">"attempting to log this.foo:"</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doIt</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(info, self.foo);</div><div class="line">    &#125;</div><div class="line">    doIt();</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing();</div><div class="line">thing.logFoo();  <span class="comment">//logs "attempting to log this.foo: bar"</span></div></pre></td></tr></table></figure></p>
<p>但是当需要把一个方法作为一个值传递给一个函数的时候并不管用。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Thing.prototype.foo = <span class="string">"bar"</span>;</div><div class="line">Thing.prototype.logFoo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </div><div class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doIt</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(self.foo);</div><div class="line">    &#125;</div><div class="line">    doIt();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doItIndirectly</span>(<span class="params">method</span>) </span>&#123;</div><div class="line">    method();</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing();</div><div class="line">thing.logFoo(); <span class="comment">//logs "bar"</span></div><div class="line">doItIndirectly(thing.logFoo); <span class="comment">//logs undefined</span></div></pre></td></tr></table></figure></p>
<p>可以通过bind将实例和方法一切传递给函数来解决这个问题，bind是一个函数定义在所有函数和方法的函数对象上面.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Thing.prototype.foo = <span class="string">"bar"</span>;</div><div class="line">Thing.prototype.logFoo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doIt</span>(<span class="params">method</span>) </span>&#123;</div><div class="line">    method();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing();</div><div class="line">doIt(thing.logFoo.bind(thing)); <span class="comment">//logs bar</span></div></pre></td></tr></table></figure></p>
<p>同样可以使用apply和call来在新的上下文中调用方法或函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Thing.prototype.foo = <span class="string">"bar"</span>;</div><div class="line">Thing.prototype.logFoo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doIt</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo);</div><div class="line">    &#125;</div><div class="line">    doIt.apply(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doItIndirectly</span>(<span class="params">method</span>) </span>&#123;</div><div class="line">    method();</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing();</div><div class="line">doItIndirectly(thing.logFoo.bind(thing)); <span class="comment">//logs bar</span></div></pre></td></tr></table></figure></p>
<p>可以用bind来代替任何一个函数或者方法的this，即便它没有赋值给实例的初始prototype。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Thing.prototype.foo = <span class="string">"bar"</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logFoo</span>(<span class="params">aStr</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(aStr, <span class="keyword">this</span>.foo);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing();</div><div class="line">logFoo.bind(thing)(<span class="string">"using bind"</span>); <span class="comment">//logs "using bind bar"</span></div><div class="line">logFoo.apply(thing, [<span class="string">"using apply"</span>]); <span class="comment">//logs "using apply bar"</span></div><div class="line">logFoo.call(thing, <span class="string">"using call"</span>); <span class="comment">//logs "using call bar"</span></div><div class="line">logFoo(<span class="string">"using nothing"</span>); <span class="comment">//logs "using nothing undefined"</span></div></pre></td></tr></table></figure></p>
<p>应该避免在构造函数里面返回任何东西，因为这可能代替本来应该返回的实例。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="keyword">return</span> &#123;&#125;;</div><div class="line">&#125;</div><div class="line">Thing.prototype.foo = <span class="string">"bar"</span>;</div><div class="line"></div><div class="line">Thing.prototype.logFoo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing();</div><div class="line">thing.logFoo(); <span class="comment">//Uncaught TypeError: undefined is not a function</span></div></pre></td></tr></table></figure></p>
<p>但如果你在构造函数里面返回了一个原始值，上面所述的情况并不会发生并且返回语句被忽略了。最好不要在你将通过new调用的构造函数里面返回任何类型的数据，即便你知道自己正在做什么。如果你想创建一个工厂模式，通过一个函数来创建一个实例，这个时候不要使用new来调用函数。当然这个建议是可选的。</p>
<p>可以通过使用Object.create来避免使用new，这样同样能够创建一个实例。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Thing.prototype.foo = <span class="string">"bar"</span>;</div><div class="line"></div><div class="line">Thing.prototype.logFoo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> thing =  <span class="built_in">Object</span>.create(Thing.prototype);</div><div class="line">thing.logFoo(); <span class="comment">//logs "bar"</span></div></pre></td></tr></table></figure></p>
<p>在这种情况下并不会调用构造函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.foo = <span class="string">"foo"</span>;</div><div class="line">&#125;</div><div class="line">Thing.prototype.foo = <span class="string">"bar"</span>;</div><div class="line">Thing.prototype.logFoo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> thing =  <span class="built_in">Object</span>.create(Thing.prototype);</div><div class="line">thing.logFoo(); <span class="comment">//logs "bar"</span></div></pre></td></tr></table></figure></p>
<p>因为Object.create不会调用构造函数的特性在你继承模式下你想通过原型链重写构造函数的时候非常有用.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.foo = <span class="string">"foo"</span>;</div><div class="line">&#125;</div><div class="line">Thing1.prototype.foo = <span class="string">"bar"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing2</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.logFoo(); <span class="comment">//logs "bar"</span></div><div class="line">    Thing1.apply(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">this</span>.logFoo(); <span class="comment">//logs "foo"</span></div><div class="line">&#125;</div><div class="line">Thing2.prototype = <span class="built_in">Object</span>.create(Thing1.prototype);</div><div class="line">Thing2.prototype.logFoo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing2();</div></pre></td></tr></table></figure></p>
<h2 id="object-this"><a href="#object-this" class="headerlink" title="object this"></a>object this</h2><p>在一个对象的一个函数里，你可以通过this来引用这个对象的其他属性。这个用new来新建一个实例是不一样的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">foo</span>: <span class="string">"bar"</span>,</div><div class="line">    <span class="attr">logFoo</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo);</div><div class="line">   &#125;</div><div class="line">&#125;;</div><div class="line">obj.logFoo(); <span class="comment">//logs "bar"</span></div></pre></td></tr></table></figure></p>
<p>注意，没有使用new，没有使用Object.create，也没有使用函数调用创建一个对象。你也可以将对象当作一个实例将函数绑定到上面。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">foo</span>: <span class="string">"bar"</span></div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logFoo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo);</div><div class="line">&#125;</div><div class="line">logFoo.apply(obj); <span class="comment">//logs "bar"</span></div></pre></td></tr></table></figure></p>
<p>当你用这种方式使用this的时候，并不会越出当前的对象。只有有相同直接父元素的属性才能通过this共享变量.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">foo</span>: <span class="string">"bar"</span>,</div><div class="line">    <span class="attr">deeper</span>: &#123;</div><div class="line">        <span class="attr">logFoo</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">obj.deeper.logFoo(); <span class="comment">//logs undefined</span></div></pre></td></tr></table></figure></p>
<p>可以直接通过对象引用你需要的属性.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">foo</span>: <span class="string">"bar"</span>,</div><div class="line">    <span class="attr">deeper</span>: &#123;</div><div class="line">        <span class="attr">logFoo</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(obj.foo);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">obj.deeper.logFoo(); <span class="comment">//logs "bar"</span></div></pre></td></tr></table></figure></p>
<h2 id="DOM-event-this"><a href="#DOM-event-this" class="headerlink" title="DOM event this"></a>DOM event this</h2><p>在一个HTML DOM事件处理程序里面，this始终指向这个处理程序被所绑定到的HTML DOM节点<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Listener</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"foo"</span>).addEventListener(<span class="string">"click"</span>,</div><div class="line">      <span class="keyword">this</span>.handleClick);</div><div class="line">&#125;</div><div class="line">Listener.prototype.handleClick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//logs "&lt;div id="foo"&gt;&lt;/div&gt;"</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> listener = <span class="keyword">new</span> Listener();</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"foo"</span>).click();</div></pre></td></tr></table></figure></p>
<p>除非你自己通过bind切换了上下文.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Listener</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"foo"</span>).addEventListener(<span class="string">"click"</span>, </div><div class="line">        <span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>));</div><div class="line">&#125;</div><div class="line">Listener.prototype.handleClick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//logs Listener &#123;handleClick: function&#125;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> listener = <span class="keyword">new</span> Listener();</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"foo"</span>).click();</div></pre></td></tr></table></figure></p>
<h2 id="HTML-this"><a href="#HTML-this" class="headerlink" title="HTML this"></a>HTML this</h2><p>在HTML节点的属性里面，你可以放置JavaScript代码，this指向了这个元素.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"foo"</span> <span class="attr">onclick</span>=<span class="string">"console.log(this);"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"foo"</span>).click(); <span class="comment">//logs &lt;div id="foo"...</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="override-this"><a href="#override-this" class="headerlink" title="override this"></a>override this</h2><p>不能重写this，因为它是保留字。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="keyword">var</span> <span class="keyword">this</span> = &#123;&#125;;  <span class="comment">// Uncaught SyntaxError: Unexpected token this </span></div><div class="line">&#125;</div><div class="line"><span class="built_in">eval</span> <span class="keyword">this</span></div></pre></td></tr></table></figure></p>
<p>可以通过eval来访问this,但会造成一个安全问题，除非不用eval，没有其他方式来避免这个问题。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span> (<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Thing.prototype.foo = <span class="string">"bar"</span>;</div><div class="line">Thing.prototype.logFoo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">eval</span>(<span class="string">"console.log(this.foo)"</span>); <span class="comment">//logs "bar"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing();</div><div class="line">thing.logFoo();</div></pre></td></tr></table></figure></p>
<p>在通过Function来创建一个函数的时候，同样能够访问this。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span> (<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Thing.prototype.foo = <span class="string">"bar"</span>;</div><div class="line">Thing.prototype.logFoo = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"console.log(this.foo);"</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing();</div><div class="line">thing.logFoo(); <span class="comment">//logs "bar"</span></div></pre></td></tr></table></figure></p>
<h2 id="with-this"><a href="#with-this" class="headerlink" title="with this"></a>with this</h2><p>可以通过with来将this添加到当前的执行环境，并且读写this的属性的时候不需要通过this.但许多人认为这样使用是不好的因为with本身就饱受争议。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span> (<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Thing.prototype.foo = <span class="string">"bar"</span>;</div><div class="line">Thing.prototype.logFoo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">with</span> (<span class="keyword">this</span>) &#123;</div><div class="line">        <span class="built_in">console</span>.log(foo);</div><div class="line">        foo = <span class="string">"foo"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing();</div><div class="line">thing.logFoo(); <span class="comment">// logs "bar"</span></div><div class="line"><span class="built_in">console</span>.log(thing.foo); <span class="comment">// logs "foo"</span></div></pre></td></tr></table></figure></p>
<h2 id="jQuery-this"><a href="#jQuery-this" class="headerlink" title="jQuery this"></a>jQuery this</h2><p>和HTML DOM元素节点的事件处理程序一样，在许多情况下JQuery的this都指向HTML元素节点。这在事件处理程序和一些方便的方法中都是管用的，比如$.each.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"foo bar1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"foo bar2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">$(<span class="string">".foo"</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//logs &lt;div class="foo...</span></div><div class="line">&#125;);</div><div class="line">$(<span class="string">".foo"</span>).on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//logs &lt;div class="foo...</span></div><div class="line">&#125;);</div><div class="line">$(<span class="string">".foo"</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.click();</div><div class="line">&#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="thisArg-this"><a href="#thisArg-this" class="headerlink" title="thisArg this"></a>thisArg this</h2><p>如果你用过underscore.js 或者 lo-dash 你可能知道许多类库的方法可以通过一个叫做thisArg 的函数参数来传递实例，这个函数参数会作为this的上下文。举个例子，这适用于_.each。原生的JavaScript在ECMAScript 5的时候也允许函数传递一个thisArg参数了，比如forEach。事实上，之前阐述的bind，apply和call的使用已经给你创造了传递thisArg参数给函数的机会。这个参数将this绑定为你所传递的对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params">type</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.type = type;</div><div class="line">&#125;</div><div class="line">Thing.prototype.log = <span class="function"><span class="keyword">function</span> (<span class="params">thing</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.type, thing);</div><div class="line">&#125;</div><div class="line">Thing.prototype.logThings = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</div><div class="line">   arr.forEach(<span class="keyword">this</span>.log, <span class="keyword">this</span>); <span class="comment">// logs "fruit apples..."</span></div><div class="line">   _.each(arr, <span class="keyword">this</span>.log, <span class="keyword">this</span>); <span class="comment">//logs "fruit apples..."</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing(<span class="string">"fruit"</span>);</div><div class="line">thing.logThings([<span class="string">"apples"</span>, <span class="string">"oranges"</span>, <span class="string">"strawberries"</span>, <span class="string">"bananas"</span>]);</div></pre></td></tr></table></figure></p>
<p>这使得代码变得更加简介，因为避免了一大堆bind语句、函数嵌套和this暂存的使用。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://zy380196088.github.io./2016/03/29/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
