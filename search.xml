<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[垂直和水平循环滚动]]></title>
      <url>http://zy380196088.github.io./2018/05/21/%E5%9E%82%E7%9B%B4%E5%92%8C%E6%B0%B4%E5%B9%B3%E5%BE%AA%E7%8E%AF%E6%BB%9A%E5%8A%A8/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>类似广告循环滚动的效果.<br><a id="more"></a></p>
<ol>
<li><p>垂直循环滚动</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//无缝垂直滚动(time 越大越慢),$area显示区域窗口,$con1滚动UL, $con1为UL副本</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">VerticalScroll</span>(<span class="params">$area, $con1, $con2, time</span>) </span>&#123;</div><div class="line">  <span class="comment">//垂直滚动</span></div><div class="line">  <span class="keyword">this</span>.areaDom = $area;</div><div class="line">  <span class="keyword">this</span>.con1Dom = $con1;</div><div class="line">  <span class="keyword">this</span>.con2Dom = $con2;</div><div class="line">  <span class="keyword">this</span>.con2Dom.innerHTML = <span class="keyword">this</span>.con1Dom.innerHTML;</div><div class="line">  <span class="keyword">this</span>.time = time;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line">VerticalScroll.prototype = &#123;</div><div class="line">  <span class="attr">init</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">    self.scrollUp();</div><div class="line">    self.trigger();</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">scrollUp</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">if</span> (self.areaDom.scrollTop &gt;= self.con1Dom.offsetHeight) &#123;</div><div class="line">      self.areaDom.scrollTop = <span class="number">0</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      self.areaDom.scrollTop++;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">trigger</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">var</span> _scroll_timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      self.scrollUp();</div><div class="line">    &#125;, self.time);</div><div class="line">    self.areaDom.onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      clearInterval(_scroll_timer);</div><div class="line">    &#125;;</div><div class="line">    self.areaDom.onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      _scroll_timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        self.scrollUp();</div><div class="line">      &#125;, self.time);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>水平循环滚动</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">HorizontalScroll</span>(<span class="params">$area, $con1, $con2, time</span>) </span>&#123;</div><div class="line">  <span class="comment">//水平滚动</span></div><div class="line">  <span class="keyword">this</span>.areaDom = $area;</div><div class="line">  <span class="keyword">this</span>.con1Dom = $con1;</div><div class="line">  <span class="keyword">this</span>.con2Dom = $con2;</div><div class="line">  <span class="keyword">this</span>.con2Dom.innerHTML = <span class="keyword">this</span>.con1Dom.innerHTML;</div><div class="line">  <span class="keyword">this</span>.time = time;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div><div class="line">HorizontalScroll.prototype = &#123;</div><div class="line">  <span class="attr">init</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">    self.scrollRight();</div><div class="line">    self.trigger();</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">scrollRight</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">if</span> (self.areaDom.scrollLeft &gt;= self.con1Dom.offsetWidth) &#123;</div><div class="line">      self.areaDom.scrollLeft -= self.con1Dom.offsetWidth;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      self.areaDom.scrollLeft++;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">trigger</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">var</span> _scroll_timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      self.scrollRight();</div><div class="line">    &#125;, self.time);</div><div class="line">    self.areaDom.onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      clearInterval(_scroll_timer);</div><div class="line">    &#125;;</div><div class="line">    self.areaDom.onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      _scroll_timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        self.scrollRight();</div><div class="line">      &#125;, self.time);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>调用示例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> area = <span class="built_in">document</span>.getElementById(<span class="string">'scrollBox'</span>);</div><div class="line"><span class="keyword">var</span> con1 = <span class="built_in">document</span>.getElementById(<span class="string">'con1'</span>);</div><div class="line"><span class="keyword">var</span> con2 = <span class="built_in">document</span>.getElementById(<span class="string">'con2'</span>);</div><div class="line"><span class="keyword">var</span> newScroll = <span class="keyword">new</span> VesrticalScroll(area, con1, con2, <span class="number">50</span>);</div><div class="line">newScroll.init()</div></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数组对象根据另外一个数组中的值作为对象属性求差集]]></title>
      <url>http://zy380196088.github.io./2018/05/21/%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E6%A0%B9%E6%8D%AE%E5%8F%A6%E5%A4%96%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E5%80%BC%E4%BD%9C%E4%B8%BA%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E6%B1%82%E5%B7%AE%E9%9B%86/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>做一个实时动态更新的大屏,之前本来和后端商量好用 Websocket 的.<br>接口调试的时候,发现后端并不是只把新的数据推送过来,还是有重复的,所以去重就落到我头上了. OMG…<br><a id="more"></a></p>
<p>我的思路是:<br>每次拿到数据先除重,求差集.然后渲染数据.并将已经渲染数据的某个属性push进另一个数组.<br>例如:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> users = [&#123;</div><div class="line">  <span class="attr">city_id</span>:<span class="literal">null</span>,</div><div class="line">  <span class="attr">head_photo</span>:<span class="string">"common/default_head_photo.png"</span>,</div><div class="line">  <span class="attr">id</span>:<span class="number">0</span>,</div><div class="line">  <span class="attr">nick_name</span>:<span class="string">"小号23333"</span>,</div><div class="line">  <span class="attr">role</span>:<span class="number">0</span>,</div><div class="line">  <span class="attr">sex</span>:<span class="number">0</span></div><div class="line">&#125;,</div><div class="line">&#123;</div><div class="line">  <span class="attr">city_id</span>:<span class="literal">null</span>,</div><div class="line">  <span class="attr">head_photo</span>:<span class="string">"common/default_head_photo.png"</span>,</div><div class="line">  <span class="attr">id</span>:<span class="number">1</span>,</div><div class="line">  <span class="attr">nick_name</span>:<span class="string">"小号23333"</span>,</div><div class="line">  <span class="attr">role</span>:<span class="number">0</span>,</div><div class="line">  <span class="attr">sex</span>:<span class="number">0</span></div><div class="line">&#125;,&#123;</div><div class="line">  <span class="attr">city_id</span>:<span class="literal">null</span>,</div><div class="line">  <span class="attr">head_photo</span>:<span class="string">"common/default_head_photo.png"</span>,</div><div class="line">  <span class="attr">id</span>:<span class="number">2</span>,</div><div class="line">  <span class="attr">nick_name</span>:<span class="string">"小号23333"</span>,</div><div class="line">  <span class="attr">role</span>:<span class="number">0</span>,</div><div class="line">  <span class="attr">sex</span>:<span class="number">0</span></div><div class="line">&#125;</div><div class="line">,&#123;</div><div class="line">  <span class="attr">city_id</span>:<span class="literal">null</span>,</div><div class="line">  <span class="attr">head_photo</span>:<span class="string">"common/default_head_photo.png"</span>,</div><div class="line">  <span class="attr">id</span>:<span class="number">3</span>,</div><div class="line">  <span class="attr">nick_name</span>:<span class="string">"小号23333"</span>,</div><div class="line">  <span class="attr">role</span>:<span class="number">0</span>,</div><div class="line">  <span class="attr">sex</span>:<span class="number">0</span></div><div class="line">&#125;,&#123;</div><div class="line">  <span class="attr">city_id</span>:<span class="literal">null</span>,</div><div class="line">  <span class="attr">head_photo</span>:<span class="string">"common/default_head_photo.png"</span>,</div><div class="line">  <span class="attr">id</span>:<span class="number">4</span>,</div><div class="line">  <span class="attr">nick_name</span>:<span class="string">"小号23333"</span>,</div><div class="line">  <span class="attr">role</span>:<span class="number">0</span>,</div><div class="line">  <span class="attr">sex</span>:<span class="number">0</span></div><div class="line">&#125;]</div></pre></td></tr></table></figure></p>
<p>如上是一组用户数据,场景是做一个签到的动画显示展示.<br>定时向后台取一组长度的用户,后端约定返回最近签到的10个人;(不一定是全是新签到的,有可能包含一些之前已经渲染过得签到用户,这时候就可以将新的这10个人根据之前渲染过的用户进行去重);<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//thisArr:需要进行除重的对象数组,</span></div><div class="line"><span class="comment">//targetIdArr:储存渲染的数据的某个属性</span></div><div class="line"><span class="comment">//key:储存的属性在对象中的属性字段 key</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">minusArr</span>(<span class="params">thisArr, targetIdArr, key</span>) </span>&#123;</div><div class="line">  <span class="comment">// console.log(thisArr, targetIdArr, key);</span></div><div class="line">  <span class="keyword">var</span> resArr = [];</div><div class="line">  <span class="keyword">if</span> (!!thisArr &amp;&amp; thisArr.length &gt; <span class="number">0</span>) &#123;</div><div class="line">    $.each(thisArr, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> ($.inArray(<span class="keyword">this</span>[key], targetIdArr) == <span class="number">-1</span>) &#123;</div><div class="line">        resArr.push(<span class="keyword">this</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> resArr;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SVG Notes]]></title>
      <url>http://zy380196088.github.io./2018/03/27/SVG-Notes/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="基本形状"><a href="#基本形状" class="headerlink" title="基本形状"></a>基本形状</h1><h2 id="线段"><a href="#线段" class="headerlink" title="线段"></a>线段<line></line></h2><h3 id="stroke-width-线条粗细"><a href="#stroke-width-线条粗细" class="headerlink" title="stroke-width: 线条粗细"></a>stroke-width: 线条粗细</h3><h3 id="stroke-线条填充颜色"><a href="#stroke-线条填充颜色" class="headerlink" title="stroke: 线条填充颜色"></a>stroke: 线条填充颜色</h3><blockquote>
<p>rgba()<br>hsl()<br>hsla()<br>transparent == rgba(0,0,0,0)</p>
<h3 id="stroke-opacity-线条的不透明度"><a href="#stroke-opacity-线条的不透明度" class="headerlink" title="stroke-opacity: 线条的不透明度"></a>stroke-opacity: 线条的不透明度</h3><h3 id="stroke-dasharray-虚线段长度"><a href="#stroke-dasharray-虚线段长度" class="headerlink" title="stroke-dasharray: 虚线段长度"></a>stroke-dasharray: 虚线段长度</h3></blockquote>
<a id="more"></a>
<h2 id="矩形"><a href="#矩形" class="headerlink" title="矩形 "></a>矩形 <rect></rect></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"10"</span> <span class="attr">y</span>=<span class="string">"50"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"50"</span> <span class="attr">style</span>=<span class="string">"fill:#fff;stoke:red;fill-opacity:0.5;"</span>/&gt;</span></div></pre></td></tr></table></figure>
<h2 id="圆角矩形"><a href="#圆角矩形" class="headerlink" title="圆角矩形"></a>圆角矩形</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"10"</span> <span class="attr">y</span>=<span class="string">"10"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"50"</span> <span class="attr">rx</span>=<span class="string">"2"</span> <span class="attr">ry</span>=<span class="string">"2"</span> <span class="attr">style</span>=<span class="string">"stoke:black;fill:none;"</span>/&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>PS:CSS 中 border-radius 可以通过百分比来设置圆角, SVG通过百分比来制定圆角半径的值,并不是相对矩形本身的宽高的百分比,而是相对视口的宽高的百分比;</p>
</blockquote>
<h2 id="圆-和-椭圆"><a href="#圆-和-椭圆" class="headerlink" title="圆 和 椭圆 "></a>圆 和 椭圆 <circle></circle></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">"30"</span> <span class="attr">cy</span>=<span class="string">"30"</span> <span class="attr">r</span>=<span class="string">"20"</span> <span class="attr">style</span>=<span class="string">"stoke:black;fill:none;"</span>/&gt;</span></div></pre></td></tr></table></figure>
<h2 id="多邊形"><a href="#多邊形" class="headerlink" title="多邊形 "></a>多邊形 <polygon></polygon></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">polygon</span> <span class="attr">points</span>=<span class="string">"48 16, 16 96, 96 48, 0 48, 80 96"</span>/&gt;</span></div></pre></td></tr></table></figure>
<h3 id="填充波阿边线交叉的多边形"><a href="#填充波阿边线交叉的多边形" class="headerlink" title="填充波阿边线交叉的多边形"></a>填充波阿边线交叉的多边形</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">polygon</span> <span class="attr">points</span>=<span class="string">"48,16 16,96 96,48 0,48 80,96"</span> <span class="attr">style</span>=<span class="string">"fill-rule:nonzero;fill:yellow;stroke:black;"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">polygon</span> <span class="attr">points</span>=<span class="string">"48,16 16,96 96,48 0,48 80,96"</span> <span class="attr">style</span>=<span class="string">"fill-rule:evenodd;fill:yellow;stroke:black;"</span>/&gt;</span></div></pre></td></tr></table></figure>
<h2 id="折线"><a href="#折线" class="headerlink" title="折线 "></a>折线 <polyline></polyline></h2><h2 id="线帽和线连接"><a href="#线帽和线连接" class="headerlink" title="线帽和线连接"></a>线帽和线连接</h2><h3 id="stroke-linecap"><a href="#stroke-linecap" class="headerlink" title="stroke-linecap"></a>stroke-linecap</h3><p>该属性用来指定线的头尾形状(butt/round/square),默认 butt</p>
<h3 id="stroke-linejoin"><a href="#stroke-linejoin" class="headerlink" title="stroke-linejoin"></a>stroke-linejoin</h3><p>该属性用来指定线段在图形棱角处交叉时的效果(miter尖的/round 圆的/ bevel 平的)</p>
<h1 id="文档结构"><a href="#文档结构" class="headerlink" title="文档结构"></a>文档结构</h1><h2 id="SVG样式"><a href="#SVG样式" class="headerlink" title="SVG样式"></a>SVG样式</h2><h3 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h3><h3 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h3><h3 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h3><h3 id="表现属性"><a href="#表现属性" class="headerlink" title="表现属性"></a>表现属性</h3><h2 id="分组和引用对象"><a href="#分组和引用对象" class="headerlink" title="分组和引用对象"></a>分组和引用对象</h2><h3 id="元素"><a href="#元素" class="headerlink" title="元素"></a><g></g>元素</h3><p>将其所有子元素作为一个组合,附带唯一一个 id 作为名称;<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">g</span> <span class="attr">id</span>=<span class="string">"house"</span> <span class="attr">style</span>=<span class="string">"fill:none;stroke:black;"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">desc</span>&gt;</span>House<span class="tag">&lt;/<span class="name">desc</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"6"</span> <span class="attr">y</span>=<span class="string">"50"</span> <span class="attr">width</span>=<span class="string">"60"</span> <span class="attr">height</span>=<span class="string">"60"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">polyline</span> <span class="attr">points</span>=<span class="string">"6 50,36 9,66 50"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">polyline</span> <span class="attr">points</span>=<span class="string">"36 110, 36 80, 50 80, 50 110"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">g</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="元素-1"><a href="#元素-1" class="headerlink" title="元素"></a><use></use>元素</h3><p>重用 <g>元素内的组合;<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">"#house"</span> <span class="attr">x</span>=<span class="string">"80"</span> <span class="attr">y</span>=<span class="string">"100"</span>/&gt;</span></div></pre></td></tr></table></figure></g></p>
<h3 id="元素-2"><a href="#元素-2" class="headerlink" title="元素"></a><defs></defs>元素</h3><p>模板</p>
<h3 id="元素-3"><a href="#元素-3" class="headerlink" title="元素"></a><symbol></symbol>元素</h3><h4 id="viewBox"><a href="#viewBox" class="headerlink" title="viewBox"></a>viewBox</h4><h4 id="preserveAspectRatio"><a href="#preserveAspectRatio" class="headerlink" title="preserveAspectRatio"></a>preserveAspectRatio</h4><h3 id="元素-4"><a href="#元素-4" class="headerlink" title="元素"></a><image>元素</image></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">xlink:href</span>=<span class="string">"xxxx.jpg"</span> <span class="attr">x</span>=<span class="string">"40"</span> <span class="attr">y</span>=<span class="string">"100"</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"100"</span>/&gt;</span></div></pre></td></tr></table></figure>
<h1 id="坐标系统变换"><a href="#坐标系统变换" class="headerlink" title="坐标系统变换"></a>坐标系统变换</h1><h2 id="translate-x-y"><a href="#translate-x-y" class="headerlink" title="translate(x,y)"></a>translate(x,y)</h2><p>按照指定的 x和 y值移动用户坐标系统,若果没有指定 y的值默认为0.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">"#house"</span> <span class="attr">transorm</span>=<span class="string">"translate(50,50)"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="scale-x-y"><a href="#scale-x-y" class="headerlink" title="scale(x,y)"></a>scale(x,y)</h2><p>使用指定的 x 和 y 乘以所有的用户坐标系统,比例值可以使小数或负数.</p>
<h2 id="变换序列"><a href="#变换序列" class="headerlink" title="变换序列"></a>变换序列</h2><p>将多个便哈通过空格或逗号分隔,一次放入 trasnform 属性即可;</p>
<h2 id="笛卡尔坐标系统转换"><a href="#笛卡尔坐标系统转换" class="headerlink" title="笛卡尔坐标系统转换"></a>笛卡尔坐标系统转换</h2><h2 id="rotate-angle-centerX-centerY"><a href="#rotate-angle-centerX-centerY" class="headerlink" title="rotate(angle,centerX,centerY)"></a>rotate(angle,centerX,centerY)</h2><p>按照指定 angele 旋转用户坐标,旋转中心有 centerX 和 centerY指定,无 centerX 和 centerY默认为(0,0)</p>
<h2 id="围绕中心点缩放"><a href="#围绕中心点缩放" class="headerlink" title="围绕中心点缩放"></a>围绕中心点缩放</h2><h2 id="skewX-angle-和-skewY-angle"><a href="#skewX-angle-和-skewY-angle" class="headerlink" title="skewX(angle) 和 skewY(angle)"></a>skewX(angle) 和 skewY(angle)</h2><p>根据指定的 angle 倾斜 x 坐标或 y 坐标</p>
<h2 id="matrix-a-b-c-d-e-f"><a href="#matrix-a-b-c-d-e-f" class="headerlink" title="matrix(a b c d e f)"></a>matrix(a b c d e f)</h2><p>指定一个六个值组成的矩阵变换.</p>
<h1 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h1><h2 id="moveto-lineto-closepath-M-L-Z"><a href="#moveto-lineto-closepath-M-L-Z" class="headerlink" title="moveto , lineto , closepath ( M , L , Z)"></a>moveto , lineto , closepath ( M , L , Z)</h2><p>每个路径都必须以 moveto 命令开始,命令字母为大写的 M;<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M 10 10 L 100 10"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="相对-moveto-和-lineto-m-l"><a href="#相对-moveto-和-lineto-m-l" class="headerlink" title="相对 moveto 和 lineto ( m , l)"></a>相对 moveto 和 lineto ( m , l)</h2><p>如果使用小写的字母启动路径,它的坐标会被解析为相对位置;<br>closepath 命令没有坐标,大小写效果相同;</p>
<h2 id="路径的快捷方式"><a href="#路径的快捷方式" class="headerlink" title="路径的快捷方式"></a>路径的快捷方式</h2><h3 id="水平-lineto-H-h"><a href="#水平-lineto-H-h" class="headerlink" title="水平 lineto ( H , h)"></a>水平 lineto ( H , h)</h3><blockquote>
<p>H 20 =&gt; L 20 current_y<br>h 20 =&gt; l 20 0</p>
<h3 id="垂直-lineto-V-v"><a href="#垂直-lineto-V-v" class="headerlink" title="垂直 lineto ( V , v)"></a>垂直 lineto ( V , v)</h3><p>V 20 =&gt; L current_x 20<br>v 20 =&gt; l 0 20</p>
</blockquote>
<h2 id="椭圆弧"><a href="#椭圆弧" class="headerlink" title="椭圆弧"></a>椭圆弧</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2018 浮生记]]></title>
      <url>http://zy380196088.github.io./2018/03/26/2018-%E6%B5%AE%E7%94%9F%E8%AE%B0/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><a id="more"></a>
<blockquote>
<p>不要知道的的太多,会难过.<br>擅自喜欢,<br>擅自想入非非,<br>所以,<br>活该你难过.</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2017,再见,你好,2018]]></title>
      <url>http://zy380196088.github.io./2017/12/31/2017-%E5%86%8D%E8%A7%81-%E4%BD%A0%E5%A5%BD-2018/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><a id="more"></a>
<p>2017年的最后一天,晚上一个人出去溜达了会儿,迫于夜晚的寒冷,最后还是决定宅卧室里跨年吧,囧…<br>听到赵雷的&lt;&lt;理想&gt;&gt;.<br>歌里他唱着:<br>“一个人住在这城市,为了填饱肚子就已经精疲力尽,还谈什么理想,那是我们的美梦…”<br>突然特别想家…</p>
<p>今年4月的时候来到被誉为人间天堂的杭州.这也是我除了上海其次向往的城市.<br>妈妈之前没来过杭州,所以毛遂自荐的要送我来杭州,来之前在网上看到别人发转租小单配,正好适合我短租了一个月(结果调到大坑里,遇到黑心二房东,最后退房大概扣了我6张毛爷爷的押金,);<br>离开了重庆,代表和 VIOLIN 圈子的告别…有不舍,但我相信这是我向前跨出的一步.<br>4月底,入职XYCM,遇到了一些可爱的同事,就是刚来杭州那段时间真心吃不惯这边的菜额…还是蜜汁想念重庆火辣辣的味道,哈哈~</p>
<p>2018年我列几个 Flag :</p>
<blockquote>
<p>前端专注方向&lt;数据可视化&gt; D3.js,Three.js<br>学 Python,研究量化 (股票爱好者的小99)<br>升职加薪,租个里公司稍微近点的,别太辛苦<br>跨境旅游(日/韩/泰),滑雪.<br>脱单(跟去年一样 = =)</p>
</blockquote>
<p>多余的不想写了…就这样吧,2018对自己好一点.加油!</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Promise和Ajax结合进行数据交互]]></title>
      <url>http://zy380196088.github.io./2017/12/01/Promise%E5%92%8CAjax%E7%BB%93%E5%90%88%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><a id="more"></a>
<h2 id="Ajax问题"><a href="#Ajax问题" class="headerlink" title="Ajax问题"></a>Ajax问题</h2><p>当处理复杂页面和很多ajax请求的时候,经常会遇到某个ajax请求依赖其他ajax请求结果的情况.当依赖比较少和简单的时候,估计大多前端小伙伴将有依赖的ajax写在依赖的ajax回调函数里;</p>
<p>当ajax很多,而且还设计到很复杂的事件异步操作时候,这种方法就不太合适了.</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>现代浏览器大都已经内置支持了Promise，连第三方库都不需要了，只有IE不行，放弃了(鄙视IE一波)</p>
<ol>
<li><p>改造ajax封装函数,在成功的时候调用resolve(),失败的时候调用reject(),并且返回Promise对象;</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">funciton _ajax(url,type,data,successFn,errorFn)&#123;</div><div class="line">  <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(funciton(resolve,reject)&#123;</div><div class="line">    $.ajax(&#123;</div><div class="line">      <span class="attr">url</span>:url,</div><div class="line">      <span class="attr">type</span>:type==<span class="literal">null</span>?<span class="string">'POST'</span>:type,</div><div class="line">      <span class="attr">dataType</span>:<span class="string">'json'</span>,</div><div class="line">      <span class="attr">data</span>: data==<span class="literal">null</span>?<span class="string">''</span>:<span class="built_in">JSON</span>.stringify(data),</div><div class="line">      <span class="attr">async</span>:<span class="literal">true</span>,</div><div class="line">      <span class="attr">contentType</span>:<span class="string">"application/json"</span>,</div><div class="line">      <span class="attr">success</span>:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">        successFn(res);</div><div class="line">        resolve();</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">error</span>:<span class="function"><span class="keyword">function</span>(<span class="params">XMLHttpRequest,textStatus,errorThrown</span>)</span>&#123;</div><div class="line">          errorFn(XMLHttpRequest,textStatus,errorThrown);</div><div class="line">          reject();</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">return</span> p;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>调用示例</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">_ajax(</div><div class="line">  <span class="string">'/rest/commom/login'</span>,</div><div class="line">  <span class="string">'post'</span>,</div><div class="line">  &#123;</div><div class="line">    <span class="string">"userName"</span>:<span class="string">'joy'</span>,</div><div class="line">    <span class="string">"passWord"</span>:<span class="string">'xxxxoooo'</span></div><div class="line">  &#125;,</div><div class="line">  loginOK(res),</div><div class="line">  loginFail(errorCode,<span class="string">"登录失败"</span>,backLoginPage)</div><div class="line">).then(</div><div class="line">  _ajax(</div><div class="line">    <span class="string">'/rest/commom/userInfo'</span>,</div><div class="line">    <span class="string">'post'</span>,</div><div class="line">    &#123;</div><div class="line">      <span class="string">"userId"</span>:<span class="number">1</span></div><div class="line">    &#125;,</div><div class="line">    renderUserInfo(res),</div><div class="line">    UserInfoFail(errorCode,<span class="string">"获取用户信息失败"</span>,backLoginPage)</div><div class="line">  )</div><div class="line">).then(initUserPage);</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于SASS]]></title>
      <url>http://zy380196088.github.io./2017/11/08/SASS/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="SASS-常用"><a href="#SASS-常用" class="headerlink" title="SASS 常用"></a>SASS 常用</h1><ol>
<li>@mixin 混合宏<br>建议使用混合宏来创建相同的代码块.<br>优点:可传参.<br>缺点:容易造成代码冗余.</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@mixin position-center($width,$height)&#123;</div><div class="line">    width:$width;</div><div class="line">    height:$height;</div><div class="line">    position:absolute;</div><div class="line">    left:50%;</div><div class="line">    top:50%;</div><div class="line">    margin:(-($height)/2) 0 0 (-($width)/2);</div><div class="line">&#125;</div><div class="line"></div><div class="line">.center&#123;</div><div class="line">    @include position-center(600px,300px)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>@extend() 继承<br>如果你的代码块不需要专任何变量参数，而且有一个基类已在文件中存在，那么建议使用 继承。<br>不足：如果是类(.class)，不管有没有调用(@extend)，在编译的时候，都会生成对应的CSS。</li>
</ol>
<ol>
<li>占坑符 %placeholder<br>占坑和继承基本类似，唯一不同的是，相同的生成CSS块并没有在类中存在，而是额外声明。<br>如果不调用已声明的占位符，将不会产生任何CSS。<br>如果在不同选择器调用占位符，那么编译出来CSS将会把相同的代码合并在一起。<br>不足：就是不能传参啦！个人觉得%placeholder优于@extend。</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">%mt15&#123;</div><div class="line">    margin-top:15px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">%pt15&#123;</div><div class="line">    padding-top:15px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.btn6&#123;</div><div class="line">    @extend %mt15;</div><div class="line">    @extend %pt15;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="建议-如果你需要参数变量，使用mixin。否则，继承一个placehodler。"><a href="#建议-如果你需要参数变量，使用mixin。否则，继承一个placehodler。" class="headerlink" title="建议: 如果你需要参数变量，使用mixin。否则，继承一个placehodler。"></a>建议: 如果你需要参数变量，使用mixin。否则，继承一个placehodler。</h2><h1 id="写个-Sass组件"><a href="#写个-Sass组件" class="headerlink" title="写个 Sass组件"></a>写个 Sass组件</h1><ol>
<li><p>定义提示颜色</p>
<blockquote>
<p>验证<br>错误<br>警告<br>信息</p>
</blockquote>
</li>
<li><p>基本样式</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">%message&#123;</div><div class="line">    padding: .05rem;</div><div class="line">    border-radius: .1rem;</div><div class="line">    border:1px solid ;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@mixin message($color)&#123;</div><div class="line">    @extend %message;</div><div class="line">    color:$color;</div><div class="line">    border-color:lighten($color,20%);</div><div class="line">    background:lighten($color,40%);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>调用 mixin</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">.message-error &#123;</div><div class="line">  @include message(#b94a48);</div><div class="line">&#125;</div><div class="line"></div><div class="line">.message-valid &#123;</div><div class="line">  @include message(#468847);</div><div class="line">&#125;</div><div class="line"></div><div class="line">.message-warning &#123;</div><div class="line">  @include message(#c09853);</div><div class="line">&#125;</div><div class="line"></div><div class="line">.message-info &#123;</div><div class="line">  @include message(#3a87ad);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>用嵌套列表（Nested Lists 可扩展配置的组件</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$message-types: (</div><div class="line">  (error    #b94a48)</div><div class="line">  (valid    #468847)</div><div class="line">  (warning  #c09853)</div><div class="line">  (info     #3a87ad)</div><div class="line">) !default;</div><div class="line"></div><div class="line">@each $message-type in $message-types &#123;</div><div class="line">  $type:  nth($message-type, 1);</div><div class="line">  $color: nth($message-type, 2);</div><div class="line"></div><div class="line">  .message-#&#123;$type&#125; &#123;</div><div class="line">    @include message($color);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用 map (Sass 3.3)<br>可以使用Sass 3.3中新增的数据类型：Maps.代码更简洁方便.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$message-types: (</div><div class="line">  error   :  #b94a48,</div><div class="line">  valid   :  #468847,</div><div class="line">  warning :  #c09853,</div><div class="line">  info    :  #3a87ad</div><div class="line">) !default;</div><div class="line"></div><div class="line">@each $type, $color in $message-types &#123;</div><div class="line">  .message-#&#123;$type&#125; &#123;</div><div class="line">    @include message($color);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vue 和 Echarts]]></title>
      <url>http://zy380196088.github.io./2017/07/21/Vue%E5%92%8CEcharts/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>讲讲在 Vue 使用 Echarts.</p>
<a id="more"></a>
<h2 id="首先安装依赖包"><a href="#首先安装依赖包" class="headerlink" title="首先安装依赖包:"></a>首先安装依赖包:</h2><p>在项目顶级目录下执行如下命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install echarts -S</div></pre></td></tr></table></figure></p>
<p>echarts 和 axios 类似,没法通过 Vue.use()全局配置.<br>通常在需要使用 echarts 图表的 .vue 文件中直接引入.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">'echarts'</span></div></pre></td></tr></table></figure></p>
<p>觉得太麻烦的话,可以在 main.js 中引用,然后修改原型链,就可以全局使用了.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Vue.prototype.$echarts = echarts</div></pre></td></tr></table></figure></p>
<h2 id="创建图表"><a href="#创建图表" class="headerlink" title="创建图表"></a>创建图表</h2><ol>
<li><p>首先在 HTML 模板中创建图表的容器</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"chart"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>为容器设置宽高(注意:这里不能用百分比,可以用 JS 控制并且改变width 和 height)</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#chart</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">7.5rem</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">6rem</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>图表初始化<br>因为 echarts.init 方法必须绑定到实际的 DOM 元素上,所以该方法需要在vue 生命周期 mounted里调用:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let chart = this.$echarts.init(docueng.getElementById(&apos;chart&apos;))</div><div class="line">chart.setOption(options);</div></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">this</span>.$nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//DOM 更新</span></div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">'Line'</span>,</div><div class="line">        <span class="attr">props</span>: &#123;&#125;, <span class="comment">// 父到子传参</span></div><div class="line">        components: &#123;&#125;, <span class="comment">// 组件接收</span></div><div class="line">        mixins: [], <span class="comment">// 混合</span></div><div class="line">        data () &#123; <span class="comment">// 基础数据</span></div><div class="line">            <span class="keyword">return</span> &#123;</div><div class="line">                <span class="comment">//初始化空对象</span></div><div class="line">                chart: <span class="literal">null</span>,</div><div class="line">                <span class="attr">colorArr</span>: [<span class="string">'rgba(205,47,95,.5)'</span>, <span class="string">'rgba(250,157,236,.5)'</span>, <span class="string">'rgba(136,243,226,.5)'</span>, <span class="string">'rgba(102,205,170,.5)'</span>],</div><div class="line">                <span class="attr">legendArr</span>: [],</div><div class="line">                <span class="attr">options</span>: &#123;</div><div class="line">                    <span class="attr">title</span>: &#123;</div><div class="line">                        <span class="attr">show</span>: <span class="literal">true</span>,</div><div class="line">                        <span class="attr">text</span>: <span class="string">''</span></div><div class="line">                    &#125;,</div><div class="line">                    <span class="attr">tooltip</span>: &#123;</div><div class="line">                        <span class="attr">trigger</span>: <span class="string">'axis'</span>,</div><div class="line">                        <span class="attr">axisPointer</span>: &#123;</div><div class="line">                            <span class="attr">type</span>: <span class="string">'cross'</span>,</div><div class="line">                            <span class="attr">label</span>: &#123;</div><div class="line">                                <span class="attr">backgroundColor</span>: <span class="string">'#6a7985'</span></div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;,</div><div class="line">                    <span class="attr">legend</span>: &#123;</div><div class="line">                        <span class="attr">data</span>: [<span class="string">'邮件营销'</span>, <span class="string">'联盟广告'</span>, <span class="string">'视频广告'</span>, <span class="string">'直接访问'</span>, <span class="string">'搜索引擎'</span>]</div><div class="line">                    &#125;,</div><div class="line">                    <span class="attr">toolbox</span>: &#123;</div><div class="line">                        <span class="attr">feature</span>: &#123;</div><div class="line">                            <span class="attr">saveAsImage</span>: &#123;&#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;,</div><div class="line">                    <span class="attr">grid</span>: &#123;</div><div class="line">                        <span class="attr">left</span>: <span class="string">'5%'</span>,</div><div class="line">                        <span class="attr">right</span>: <span class="string">'5%'</span>,</div><div class="line">                        <span class="attr">bottom</span>: <span class="string">'3%'</span>,</div><div class="line">                        <span class="attr">containLabel</span>: <span class="literal">true</span></div><div class="line">                    &#125;,</div><div class="line">                    <span class="attr">xAxis</span>: [</div><div class="line">                        &#123;</div><div class="line">                            <span class="attr">type</span>: <span class="string">'category'</span>,</div><div class="line">                            <span class="attr">boundaryGap</span>: <span class="literal">false</span>,</div><div class="line">                            <span class="attr">data</span>: [<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>,<span class="string">'6'</span>]</div><div class="line">                        &#125;</div><div class="line">                    ],</div><div class="line">                    <span class="attr">yAxis</span>: [</div><div class="line">                        &#123;</div><div class="line">                            <span class="attr">type</span>: <span class="string">'value'</span></div><div class="line">                        &#125;</div><div class="line">                    ],</div><div class="line">                    <span class="attr">series</span>: [</div><div class="line">                        &#123;</div><div class="line">                            <span class="attr">name</span>: <span class="string">'邮件营销'</span>,</div><div class="line">                            <span class="attr">type</span>: <span class="string">'line'</span>,</div><div class="line">                            <span class="attr">stack</span>: <span class="string">'总量'</span>,</div><div class="line">                            <span class="attr">symbol</span>: <span class="string">'diamond'</span>,</div><div class="line">                            <span class="attr">symbolSize</span>: <span class="number">5</span>,</div><div class="line">                            <span class="attr">areaStyle</span>: &#123;<span class="attr">normal</span>: &#123;&#125;&#125;,</div><div class="line">                            <span class="attr">data</span>: [<span class="number">120</span>, <span class="number">132</span>, <span class="number">101</span>, <span class="number">134</span>, <span class="number">90</span>, <span class="number">230</span>, <span class="number">210</span>]</div><div class="line">                        &#125;,</div><div class="line">                        &#123;</div><div class="line">                            <span class="attr">name</span>: <span class="string">'联盟广告'</span>,</div><div class="line">                            <span class="attr">type</span>: <span class="string">'line'</span>,</div><div class="line">                            <span class="attr">stack</span>: <span class="string">'总量'</span>,</div><div class="line">                            <span class="attr">areaStyle</span>: &#123;<span class="attr">normal</span>: &#123;&#125;&#125;,</div><div class="line">                            <span class="attr">data</span>: [<span class="number">220</span>, <span class="number">182</span>, <span class="number">191</span>, <span class="number">234</span>, <span class="number">290</span>, <span class="number">330</span>, <span class="number">310</span>]</div><div class="line">                        &#125;,</div><div class="line">                        &#123;</div><div class="line">                            <span class="attr">name</span>: <span class="string">'视频广告'</span>,</div><div class="line">                            <span class="attr">type</span>: <span class="string">'line'</span>,</div><div class="line">                            <span class="attr">stack</span>: <span class="string">'总量'</span>,</div><div class="line">                            <span class="attr">areaStyle</span>: &#123;<span class="attr">normal</span>: &#123;&#125;&#125;,</div><div class="line">                            <span class="attr">data</span>: [<span class="number">150</span>, <span class="number">232</span>, <span class="number">201</span>, <span class="number">154</span>, <span class="number">190</span>, <span class="number">330</span>, <span class="number">410</span>]</div><div class="line">                        &#125;,</div><div class="line">                        &#123;</div><div class="line">                            <span class="attr">name</span>: <span class="string">'直接访问'</span>,</div><div class="line">                            <span class="attr">type</span>: <span class="string">'line'</span>,</div><div class="line">                            <span class="attr">stack</span>: <span class="string">'总量'</span>,</div><div class="line">                            <span class="attr">areaStyle</span>: &#123;<span class="attr">normal</span>: &#123;&#125;&#125;,</div><div class="line">                            <span class="attr">data</span>: [<span class="number">320</span>, <span class="number">332</span>, <span class="number">301</span>, <span class="number">334</span>, <span class="number">390</span>, <span class="number">330</span>, <span class="number">320</span>]</div><div class="line">                        &#125;,</div><div class="line">                        &#123;</div><div class="line">                            <span class="attr">name</span>: <span class="string">'搜索引擎'</span>,</div><div class="line">                            <span class="attr">type</span>: <span class="string">'line'</span>,</div><div class="line">                            <span class="attr">stack</span>: <span class="string">'总量'</span>,</div><div class="line">                            <span class="attr">label</span>: &#123;</div><div class="line">                                <span class="attr">normal</span>: &#123;</div><div class="line">                                    <span class="attr">show</span>: <span class="literal">true</span>,</div><div class="line">                                    <span class="attr">position</span>: <span class="string">'top'</span></div><div class="line">                                &#125;</div><div class="line">                            &#125;,</div><div class="line">                            <span class="attr">areaStyle</span>: &#123;<span class="attr">normal</span>: &#123;&#125;&#125;,</div><div class="line">                            <span class="attr">data</span>: [<span class="number">820</span>, <span class="number">932</span>, <span class="number">901</span>, <span class="number">934</span>, <span class="number">1290</span>, <span class="number">1330</span>, <span class="number">1320</span>]</div><div class="line">                        &#125;</div><div class="line">                    ],</div><div class="line">                    <span class="attr">color</span>: [<span class="string">'rgba(205,47,95,.5)'</span>, <span class="string">'rgba(250,157,236,.5)'</span>, <span class="string">'rgba(0,191,255,.5)'</span>,<span class="string">'rgba(102,205,170,.5)'</span>,<span class="string">'rgba(72,61,139,.5)'</span>]</div><div class="line">                &#125;,</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        mounted()&#123;</div><div class="line">            <span class="keyword">this</span>.$nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">this</span>.drawChart(<span class="string">'LineChart'</span>)</div><div class="line">            &#125;);</div><div class="line">        &#125;,</div><div class="line">        created () &#123;</div><div class="line">            <span class="comment">// 创建周期</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">watch</span>: &#123;</div><div class="line">            <span class="attr">options</span>: &#123;</div><div class="line">                handler(options) &#123;</div><div class="line">                    <span class="keyword">this</span>.chart.setOption(<span class="keyword">this</span>.options)</div><div class="line">                &#125;,</div><div class="line">                <span class="attr">deep</span>: <span class="literal">true</span></div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">methods</span>: &#123;</div><div class="line">            <span class="comment">// 方法</span></div><div class="line">            drawChart: <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">                <span class="keyword">this</span>.chart = <span class="keyword">this</span>.$echarts.init(<span class="built_in">document</span>.getElementById(id));</div><div class="line">                <span class="keyword">this</span>.chart.setOption(self.options);</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">computed</span>: &#123;&#125;, <span class="comment">// 计算属性</span></div><div class="line">        filters: &#123;&#125;, <span class="comment">// 过滤</span></div><div class="line">        directives: &#123;&#125; <span class="comment">// 指令</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[强制清除缓存的几种方法]]></title>
      <url>http://zy380196088.github.io./2017/07/20/%E5%BC%BA%E5%88%B6%E6%B8%85%E9%99%A4%E7%BC%93%E5%AD%98%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><a id="more"></a>
<h1 id="关于浏览器缓存"><a href="#关于浏览器缓存" class="headerlink" title="关于浏览器缓存"></a>关于浏览器缓存</h1><p>浏览器缓存,有时候我们需要他用来提高网站性能和浏览器速度.<br>但是有时候又不得不清除缓存,因为缓存可能会存在一些错误的数据.</p>
<h1 id="清除网页缓存的几种方法"><a href="#清除网页缓存的几种方法" class="headerlink" title="清除网页缓存的几种方法"></a>清除网页缓存的几种方法</h1><h2 id="META"><a href="#META" class="headerlink" title="META"></a>META</h2><p>在 head里添加 如下meta标签,比较友好的高级浏览器可以清除缓存.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">META</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">"pragma"</span> <span class="attr">CONTENT</span>=<span class="string">"no-cache"</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">META</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">"Cache-Control"</span> <span class="attr">CONTENT</span>=<span class="string">"no-cache, must-revalidate"</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">META</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">"expires"</span> <span class="attr">CONTENT</span>=<span class="string">"0"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="清理-form-表单的临时缓存"><a href="#清理-form-表单的临时缓存" class="headerlink" title="清理 form 表单的临时缓存"></a>清理 form 表单的临时缓存</h2><h3 id="用-ajax-请求服务器最新文件-并加上请求头-If-Modified-Since和Cache-Control-如下"><a href="#用-ajax-请求服务器最新文件-并加上请求头-If-Modified-Since和Cache-Control-如下" class="headerlink" title="用 ajax 请求服务器最新文件,并加上请求头 If-Modified-Since和Cache-Control,如下:"></a>用 ajax 请求服务器最新文件,并加上请求头 If-Modified-Since和Cache-Control,如下:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">    <span class="attr">url</span>:<span class="string">'www.xxxxxx.com'</span>,</div><div class="line">    <span class="attr">dataType</span>:<span class="string">'json'</span>,</div><div class="line">    <span class="attr">data</span>:&#123;&#125;,</div><div class="line">    <span class="attr">beforeSend</span>:<span class="function"><span class="keyword">function</span>(<span class="params">xmlHttp</span>)</span>&#123;</div><div class="line">        xmlHttp.setRequestHeader(<span class="string">"If-Modified-Since"</span>,<span class="string">"0"</span>); </div><div class="line">        xmlHttp.setRequestHeader(<span class="string">"Cache-Control"</span>,<span class="string">"no-cache"</span>);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">success</span>:<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</div><div class="line">        <span class="comment">//操作</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">async</span>:<span class="literal">false</span></div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<h2 id="地址加上随机数"><a href="#地址加上随机数" class="headerlink" title="地址加上随机数"></a>地址加上随机数</h2><p>在网页地址后加上:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"?v="</span>+<span class="built_in">Math</span>.random();<span class="comment">//v 可以自己定义成别的字符串</span></div></pre></td></tr></table></figure></p>
<h2 id="地址加时间戳"><a href="#地址加时间戳" class="headerlink" title="地址加时间戳"></a>地址加时间戳</h2><p>其实原理和随机数差不多,<br>URL + <code>&quot;?timestamp=&quot; + new Date().getTime()</code>;</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[共勉]]></title>
      <url>http://zy380196088.github.io./2017/07/08/%E5%85%B1%E5%8B%89/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>莫语常言道知足,万事至终总是空.<br>理想现实一线隔,心无旁骛脚踏实.<br>谁无暴风劲雨时,守得云开见月明.<br>花开复见却飘零,残憾莫使今生留.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[移动端之坑]]></title>
      <url>http://zy380196088.github.io./2017/07/05/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E4%B9%8B%E5%9D%91/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><a id="more"></a>
<h2 id="iOS-Safari-微信浏览器等中-click点击事件失效的解决办法"><a href="#iOS-Safari-微信浏览器等中-click点击事件失效的解决办法" class="headerlink" title="iOS Safari,微信浏览器等中,click点击事件失效的解决办法"></a>iOS Safari,微信浏览器等中,click点击事件失效的解决办法</h2><p>Iphone上对于动态生成的html元素绑定点击事件$(document).click()失效.</p>
<p>最近在微信公众号上利用Clipboard实现网页内容复制<br>最近做一个一键复制的功能.结果测试时在 Android 机器上没问题,但是iPhone 上就是复制不成功.<br>一下午百思不得其解…最后终于找到了问题所在.</p>
<p>苹果对于默认不可点击的事件动态绑定 click 是无效的.<br>当使用委托给一个元素添加click事件时，如果事件是委托到 document 或 body 上，并且委托的元素是默认不可点击的（如 div, span 等），此时 click 事件会失效。</p>
<p>给​目标元素加一条css样式规则: <strong>cursor: pointer;</strong><br>哈哈,如此简单粗暴,记住了!</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[移动开发之-touch事件]]></title>
      <url>http://zy380196088.github.io./2017/06/10/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91%E4%B9%8B-touch%E4%BA%8B%E4%BB%B6/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="属性"><a href="#属性" class="headerlink" title="属性:"></a>属性:</h1><h2 id="touches-当前屏幕上所有触摸点的列表"><a href="#touches-当前屏幕上所有触摸点的列表" class="headerlink" title="touches:当前屏幕上所有触摸点的列表"></a>touches:当前屏幕上所有触摸点的列表</h2><h2 id="targetTouches-当前对象上所有触触摸点的列表"><a href="#targetTouches-当前对象上所有触触摸点的列表" class="headerlink" title="targetTouches:当前对象上所有触触摸点的列表"></a>targetTouches:当前对象上所有触触摸点的列表</h2><h2 id="changedTouches-涉及当前-引发-事件的触摸点的列表"><a href="#changedTouches-涉及当前-引发-事件的触摸点的列表" class="headerlink" title="changedTouches:涉及当前(引发)事件的触摸点的列表"></a>changedTouches:涉及当前(引发)事件的触摸点的列表</h2><p>接下来要了解下它们之间的区别.</p>
<a id="more"></a>
<ol>
<li><p>用一个手指接触屏幕,出发事件,此时上述三个属性有相同的值.</p>
</li>
<li><p>用第二个手指触摸屏幕时,touches 有两个元素,当两个手指触摸相同元素时,targetTouches 和 touches 的值相同,否则 targetTouches 只有一个值.changedTouches此时只有一个值，<br>为第二个手指的触摸点，因为第二个手指是引发事件的原因.</p>
</li>
<li><p>用两个手指同时接触屏幕，此时changedTouches有两个值，每一个手指的触摸点都有一个值</p>
</li>
<li><p>手指滑动时,三个值都将变化</p>
</li>
<li><p>一个手指离开屏幕，touches和targetTouches中对应的元素会同时移除，而changedTouches仍然会存在元素。</p>
</li>
<li><p>手指都离开屏幕之后，touches和targetTouches中将不会再有值，changedTouches还会有一个值，为最后一个离开屏幕的手指的接触点.</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vue2 项目开发配置]]></title>
      <url>http://zy380196088.github.io./2017/06/02/Vue2-%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>首先 Node.js 开发环境需要提前安装好, 当然老司机都必备了…<br>没装好的自行搜索解决…就不多说了</p>
<a id="more"></a>
<h1 id="安装-vue-cli-官方脚手架搭建工具"><a href="#安装-vue-cli-官方脚手架搭建工具" class="headerlink" title="安装 vue-cli 官方脚手架搭建工具"></a>安装 vue-cli 官方脚手架搭建工具</h1><h2 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装:"></a>全局安装:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm install vue-cli -g</div></pre></td></tr></table></figure>
<h2 id="vue-cli-创建项目"><a href="#vue-cli-创建项目" class="headerlink" title="vue-cli 创建项目"></a>vue-cli 创建项目</h2><p>终端进入你想存放项目的文件夹目录下,执行下方命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vue init webpack project</div></pre></td></tr></table></figure></p>
<p>project 为你创建项目的文件目录名,自行拟定.</p>
<p>命令行会一步一步提示并指引你完成项目创建,注意项目名不能大写.<br>建议开启 vue-router , 其他不熟悉的就不要配置了…</p>
<p>建好后,项目基本结构如下:<br><img src="/images/vue-folder.png" alt=""></p>
<blockquote>
<p>build : webpack 打包构建相关配置<br>config : 关于 webpack打包构建 开发环境 和 上线环境的配置</p>
</blockquote>
<p>src 目录下文件目录简述:</p>
<blockquote>
<p>assets : 存放静态资源(图片,字体,音频等)<br>components : vue 组件<br>router : 路由配置<br>.babelrc 转码<br>.gitignore git 提交上传忽略的文件目录</p>
</blockquote>
<h1 id="引入-Vuex-状态管理系统"><a href="#引入-Vuex-状态管理系统" class="headerlink" title="引入 Vuex 状态管理系统"></a>引入 Vuex 状态管理系统</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install vuex --save</div></pre></td></tr></table></figure>
<p>在 src 文件夹下新建一个store文件夹,并在其中新建几个基本文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir store</div><div class="line">cd store</div><div class="line">touch actions.js getters.js index.js mutations.js</div></pre></td></tr></table></figure></p>
<blockquote>
<p>actions.js : vuex 状态管理核心之一<br>getters.js : 工具集接口,构建全局 state 自定义方法<br>index.js : 所有状态汇聚于此 store<br>mutations.js : 改变 store 中各个数据的唯一方法</p>
</blockquote>
<h1 id="配置-store"><a href="#配置-store" class="headerlink" title="配置 store"></a>配置 store</h1><p>编辑src/store/index.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</div><div class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span>;</div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actions <span class="keyword">from</span> <span class="string">'./actions'</span>;</div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> mutations <span class="keyword">from</span> <span class="string">'./mutations'</span>;</div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> getters <span class="keyword">from</span> <span class="string">'./getters'</span>;</div><div class="line"><span class="keyword">import</span> state <span class="keyword">from</span> <span class="string">'./rootState'</span>;</div><div class="line"></div><div class="line">Vue.use(Vuex)</div><div class="line"></div><div class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</div><div class="line">  state,</div><div class="line">  getters,</div><div class="line">  actions,</div><div class="line">  mutations</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</div></pre></td></tr></table></figure></p>
<h1 id="挂载-store到-vue-上"><a href="#挂载-store到-vue-上" class="headerlink" title="挂载 store到 vue 上"></a>挂载 store到 vue 上</h1><p>编辑 src/main.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</div><div class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span>;</div><div class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span>;</div><div class="line"></div><div class="line"><span class="comment">/* eslint-disable no-new */</span></div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">  store,</div><div class="line">  router,</div><div class="line">  <span class="attr">template</span>: <span class="string">'&lt;App/&gt;'</span>,</div><div class="line">  <span class="attr">components</span>: &#123; App &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[window.location]]></title>
      <url>http://zy380196088.github.io./2017/05/19/window-location/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="window-location"><a href="#window-location" class="headerlink" title="window.location"></a>window.location</h1><p>属性                  描述<br>hash                设置或获取 href 属性中在井号“#”后面的分段。<br>host                 设置或获取 location 或 URL 的 hostname 和 port 号码。<br>hostname      设置或获取 location 或 URL 的主机名称部分。<br>href                  设置或获取整个 URL 为字符串。<br>pathname      设置或获取对象指定的文件名或路径。<br>port                  设置或获取与 URL 关联的端口号码。<br>protocol          设置或获取 URL 的协议部分。<br>search            设置或获取 href 属性中跟在问号后面的部分。</p>
<a id="more"></a>
<h2 id="window-location-pathname"><a href="#window-location-pathname" class="headerlink" title="window.location.pathname"></a>window.location.pathname</h2><p>设置或获取对象指定的文件名或路径。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">例：http://localhost:8086/topic/index?topicId=361</div><div class="line">alert(window.location.pathname); 则输出：/topic/index</div></pre></td></tr></table></figure></p>
<h2 id="window-location-href"><a href="#window-location-href" class="headerlink" title="window.location.href"></a>window.location.href</h2><p>设置或获取整个 URL 为字符串。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">例：http://localhost:8086/topic/index?topicId=361</div><div class="line">alert(window.location.href); 则输出：http://localhost:8086/topic/index?topicId=361</div></pre></td></tr></table></figure></p>
<h2 id="window-location-port"><a href="#window-location-port" class="headerlink" title="window.location.port"></a>window.location.port</h2><p>设置或获取与 URL 关联的端口号码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">例：http://localhost:8086/topic/index?topicId=361</div><div class="line">alert(window.location.port); 则输出：8086</div></pre></td></tr></table></figure></p>
<h2 id="window-location-protocol"><a href="#window-location-protocol" class="headerlink" title="window.location.protocol"></a>window.location.protocol</h2><p>设置或获取 URL 的协议部分。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">例：http://localhost:8086/topic/index?topicId=361</div><div class="line">console.log(window.location.protocol); 则输出：http:</div></pre></td></tr></table></figure></p>
<h2 id="window-location-hash"><a href="#window-location-hash" class="headerlink" title="window.location.hash"></a>window.location.hash</h2><p>设置或获取 href 属性中在井号“#”后面的分段。</p>
<h2 id="window-location-host"><a href="#window-location-host" class="headerlink" title="window.location.host"></a>window.location.host</h2><p>设置或获取 location 或 URL 的 hostname 和 port 号码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">例：http://localhost:8086/topic/index?topicId=361</div><div class="line">console.log(window.location.host); 则输出：http:localhost:8086</div></pre></td></tr></table></figure></p>
<h2 id="window-location-search"><a href="#window-location-search" class="headerlink" title="window.location.search"></a>window.location.search</h2><p>设置或获取 href 属性中跟在问号后面的部分。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">例：http://localhost:8086/topic/index?topicId=361</div><div class="line">console.log(window.location.search); 则输出：?topicId=361</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[触发加载及刷新]]></title>
      <url>http://zy380196088.github.io./2017/04/21/%E8%A7%A6%E5%8F%91%E5%8A%A0%E8%BD%BD%E5%8F%8A%E5%88%B7%E6%96%B0/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><a id="more"></a>
<p>命名组件为zRefresh.<br>组件化思想分析:</p>
<h2 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h2><h2 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">".zRefreshDemo"</span>).zRefresh(&#123;</div><div class="line">    <span class="attr">threshold</span>:<span class="number">150</span>,<span class="comment">//阈值</span></div><div class="line">    animHTML:<span class="string">""</span><span class="comment">//盒子动画 HTML 内容</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h2><h3 id="传参回调"><a href="#传参回调" class="headerlink" title="传参回调"></a>传参回调</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">".zRefreshDemo"</span>).zRefresh(&#123;</div><div class="line">    <span class="attr">threshold</span>:<span class="number">150</span>,<span class="comment">//阈值</span></div><div class="line">    animHTML:<span class="string">""</span><span class="comment">//盒子动画 HTML 内容</span></div><div class="line">    onInit:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;&#125;,<span class="comment">//已经准备</span></div><div class="line">    onRrop:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;&#125;,<span class="comment">//拖拽过程</span></div><div class="line">    onStart:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;&#125;,<span class="comment">//超过阈值时松开</span></div><div class="line">    onFinish:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;&#125;<span class="comment">//超过阈值时松开触发回弹动画</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Flex 布局]]></title>
      <url>http://zy380196088.github.io./2017/04/19/Flex-%E5%B8%83%E5%B1%80/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><a id="more"></a>
<p>学习 FLex, 首先我们来了解几个相关概念:</p>
<h1 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h1><p>容器具有这样的特点：父容器可以统一设置子容器的排列方式，子容器也可以单独设置自身的排列方式，如果两者同时设置，以子容器的设置为准.</p>
<h2 id="父容器-container"><a href="#父容器-container" class="headerlink" title="父容器 container"></a>父容器 container</h2><h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h3><p>用于定义如何沿着主轴方向排列子容器.</p>
<h4 id="位置排列"><a href="#位置排列" class="headerlink" title="位置排列"></a>位置排列</h4><blockquote>
<p>flex-start 起始端对齐<br>flex-end 末尾端对齐<br>center 居中对齐</p>
</blockquote>
<h4 id="分布排列"><a href="#分布排列" class="headerlink" title="分布排列"></a>分布排列</h4><blockquote>
<p>space-between<br>子容器沿主轴均匀分布，位于首尾两端的子容器与父容器相切。</p>
<p>space-around<br>子容器沿主轴均匀分布，位于首尾两端的子容器到父容器的距离是子容器间距的一半。</p>
</blockquote>
<h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h3><p>属性用于定义如何沿着交叉轴方向分配子容器的间距</p>
<h4 id="位置排列-flex-start-flex-end-center"><a href="#位置排列-flex-start-flex-end-center" class="headerlink" title="位置排列 flex-start flex-end center"></a>位置排列 flex-start flex-end center</h4><blockquote>
<p>flex-start<br>flex-end<br>center</p>
</blockquote>
<h4 id="基线排列-baseline"><a href="#基线排列-baseline" class="headerlink" title="基线排列 baseline"></a>基线排列 baseline</h4><p>基线对齐,默认指首行文字.</p>
<h4 id="拉伸排列-stretch"><a href="#拉伸排列-stretch" class="headerlink" title="拉伸排列 stretch"></a>拉伸排列 stretch</h4><p>子容器沿交叉轴方向的尺寸拉伸至与父容器一致.</p>
<h3 id="flex-wrap-设置换行方式"><a href="#flex-wrap-设置换行方式" class="headerlink" title="flex-wrap 设置换行方式"></a>flex-wrap 设置换行方式</h3><h4 id="flex-wrap-nowrap-不换行"><a href="#flex-wrap-nowrap-不换行" class="headerlink" title="flex-wrap:nowrap 不换行"></a>flex-wrap:nowrap 不换行</h4><h4 id="flex-wrap-wrap-换行"><a href="#flex-wrap-wrap-换行" class="headerlink" title="flex-wrap:wrap 换行"></a>flex-wrap:wrap 换行</h4><h4 id="flex-wrap-wrap-reverse-逆序换行"><a href="#flex-wrap-wrap-reverse-逆序换行" class="headerlink" title="flex-wrap:wrap-reverse 逆序换行"></a>flex-wrap:wrap-reverse 逆序换行</h4><p>逆序换行是指沿着交叉轴的反方向换行。</p>
<h3 id="flex-flow-轴向与换行组合设置"><a href="#flex-flow-轴向与换行组合设置" class="headerlink" title="flex-flow 轴向与换行组合设置"></a>flex-flow 轴向与换行组合设置</h3><h3 id="flex-content-多行沿交叉轴对齐"><a href="#flex-content-多行沿交叉轴对齐" class="headerlink" title="flex-content 多行沿交叉轴对齐"></a>flex-content 多行沿交叉轴对齐</h3><h2 id="子容器-item"><a href="#子容器-item" class="headerlink" title="子容器 item"></a>子容器 item</h2><h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><p>子容器是有弹性的（flex 即弹性），它们会自动填充剩余空间，子容器的伸缩比例由 flex 属性确定.<br>flex 的值可以使无单位数字(1,2,3…),也可以是带单位的(100px,200px…)<br>还可以为 none,设置为 none 的话不会伸缩.</p>
<h3 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h3><p>每个子容器也可以单独定义沿交叉轴排列的方式，此属性的可选值与父容器 align-items 属性完全一致，如果两者同时设置则以子容器的 align-self 属性为准。</p>
<h1 id="轴"><a href="#轴" class="headerlink" title="轴"></a>轴</h1><h2 id="主轴-main-axis"><a href="#主轴-main-axis" class="headerlink" title="主轴 main axis"></a>主轴 main axis</h2><p>主轴的起始端由 flex-start 表示，末尾段由 flex-end 表示。不同的主轴方向对应的起始端、末尾段的位置也不相同。</p>
<h3 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h3><h4 id="flex-direction-row-向右"><a href="#flex-direction-row-向右" class="headerlink" title="flex-direction:row 向右"></a>flex-direction:row 向右</h4><h4 id="flex-direction-column-向下"><a href="#flex-direction-column-向下" class="headerlink" title="flex-direction: column 向下"></a>flex-direction: column 向下</h4><h4 id="flex-direction-row-reverse-向左"><a href="#flex-direction-row-reverse-向左" class="headerlink" title="flex-direction: row-reverse 向左"></a>flex-direction: row-reverse 向左</h4><h4 id="flex-direction-column-reverse-向上"><a href="#flex-direction-column-reverse-向上" class="headerlink" title="flex-direction: column-reverse 向上"></a>flex-direction: column-reverse 向上</h4><h2 id="交叉轴-cross-axis"><a href="#交叉轴-cross-axis" class="headerlink" title="交叉轴 cross axis"></a>交叉轴 cross axis</h2><p>主轴沿逆时针方向旋转 90° 就得到了交叉轴，交叉轴的起始端和末尾段也由 flex-start 和 flex-end 表示。</p>
<h1 id="居中"><a href="#居中" class="headerlink" title="居中"></a>居中</h1><p>使用 flex 居中布局首先要设置父容器:<br><code>display:flex;</code><br>设置 <code>justify-content:center;</code>实现水平居中;<br>再设置 <code>align-items:center;</code>实现垂直居中;</p>
<p>代码示例:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#dad</span>&#123;</div><div class="line">    <span class="attribute">display</span>:flex;</div><div class="line">    <span class="attribute">justify-content</span>:center;</div><div class="line">    <span class="attribute">align-items</span>:center;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#son</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">50%</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">50%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac 下换 oh my zsh 排坑]]></title>
      <url>http://zy380196088.github.io./2017/04/19/Mac-%E4%B8%8B%E6%8D%A2-oh-my-zsh-%E6%8E%92%E5%9D%91/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>Mac下默认的终端使用的是bash,有没有更好的? 当然非zsh莫属咯.</p>
<a id="more"></a>
<p>Linux / Unix 提供了很多种 Shell , 例如 sh , bash , csh等;<br>可以通过命令行查看:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /etc/shells</div></pre></td></tr></table></figure></p>
<h1 id="设置当前用户使用-zsh"><a href="#设置当前用户使用-zsh" class="headerlink" title="设置当前用户使用 zsh"></a>设置当前用户使用 zsh</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chsh -s /bin/zsh</div></pre></td></tr></table></figure>
<p>输入当前用户密码即可;</p>
<h1 id="安装-oh-my-zsh"><a href="#安装-oh-my-zsh" class="headerlink" title="安装 oh my zsh"></a>安装 oh my zsh</h1><p>[oh-my-zsh] : <a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="external">https://github.com/robbyrussell/oh-my-zsh</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</div></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</div></pre></td></tr></table></figure></p>
<h1 id="创建一个zsh的配置文件"><a href="#创建一个zsh的配置文件" class="headerlink" title="创建一个zsh的配置文件"></a>创建一个zsh的配置文件</h1><p>注意:如果你已经有一个~/.zshrc文件的话，建议先做备份。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</div></pre></td></tr></table></figure></p>
<h1 id="重启终端"><a href="#重启终端" class="headerlink" title="重启终端"></a>重启终端</h1><h1 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h1><p>如果你是个外貌协会的主题控,可以编辑 ~/.zshrc来修改主题:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi ~/.zshrc</div></pre></td></tr></table></figure></p>
<p>主题文件在 ~/.oh-my-zsh/themes 目录,选个自己喜欢的,并修改双引号里的主题名字, 例如:ZSH_THEME = “ys”</p>
<h1 id="出现的问题-坑"><a href="#出现的问题-坑" class="headerlink" title="出现的问题(坑)"></a>出现的问题(坑)</h1><p><code>source ~/.bash_profile</code><br>但是每次关闭终端重新打开都要source才能重新生效,难道每次打开终端都要重新 source 一下吗!<br>我拒绝!</p>
<blockquote>
<p>terminal init的时候并不会执行~/.bash_profile、~/.bashrc等脚本了<br>这是因为其默认启动执行脚本变为了～/.zshrc<br>解决办法就是修改～/.zshrc文件，其中添加:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source ～/.bash_profile、～/.bashrc</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[初学Node.js小记]]></title>
      <url>http://zy380196088.github.io./2017/04/13/Node.js%E5%85%A5%E9%97%A8%E5%B0%8F%E8%AE%B0/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><a id="more"></a>
<h1 id="require-和-module"><a href="#require-和-module" class="headerlink" title="require 和 module"></a>require 和 module</h1><p>Node提供了两个核心模块require,module来管理模块依赖. 他们在全局范围内可以用.不需要用 require(‘require’)和 require(‘module’)医用.</p>
<h1 id="path"><a href="#path" class="headerlink" title="path"></a>path</h1><h2 id="path-dirname-filepath-获取路径"><a href="#path-dirname-filepath-获取路径" class="headerlink" title="path.dirname(filepath) 获取路径"></a>path.dirname(filepath) 获取路径</h2><h2 id="path-basename-filepath-获取文件名"><a href="#path-basename-filepath-获取文件名" class="headerlink" title="path.basename(filepath) 获取文件名"></a>path.basename(filepath) 获取文件名</h2><h2 id="path-extname-filepath-获取扩展名"><a href="#path-extname-filepath-获取扩展名" class="headerlink" title="path.extname(filepath) 获取扩展名"></a>path.extname(filepath) 获取扩展名</h2><h2 id="path-join-…paths"><a href="#path-join-…paths" class="headerlink" title="path.join([…paths])"></a>path.join([…paths])</h2><h2 id="path-resolve-…paths"><a href="#path-resolve-…paths" class="headerlink" title="path.resolve([…paths])"></a>path.resolve([…paths])</h2><h2 id="path-normalize-filepath"><a href="#path-normalize-filepath" class="headerlink" title="path.normalize(filepath)"></a>path.normalize(filepath)</h2><h2 id="path-format-pathObject-文件路径分解"><a href="#path-format-pathObject-文件路径分解" class="headerlink" title="path.format(pathObject) 文件路径分解"></a>path.format(pathObject) 文件路径分解</h2><p>将pathObject 的 root ,dir , base , name , ext属性按照一定的规则,组合成一个文件路径.</p>
<h2 id="path-parse-filepath-文件路径解析"><a href="#path-parse-filepath-文件路径解析" class="headerlink" title="path.parse(filepath) 文件路径解析"></a>path.parse(filepath) 文件路径解析</h2><h2 id="path-relative-from-to-获取相对路径"><a href="#path-relative-from-to-获取相对路径" class="headerlink" title="path.relative(from,to) 获取相对路径"></a>path.relative(from,to) 获取相对路径</h2><h2 id="path-delimiter"><a href="#path-delimiter" class="headerlink" title="path.delimiter"></a>path.delimiter</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//Linux</div><div class="line">console.log(process.env.PATH)</div><div class="line">// &apos;/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin&apos;</div><div class="line"></div><div class="line">process.env.PATH.split(path.delimiter)</div><div class="line">// returns [&apos;/usr/bin&apos;, &apos;/bin&apos;, &apos;/usr/sbin&apos;, &apos;/sbin&apos;, &apos;/usr/local/bin&apos;]</div><div class="line"></div><div class="line">//Windows</div><div class="line">console.log(process.env.PATH)</div><div class="line">// &apos;C:\Windows\system32;C:\Windows;C:\Program Files\node\&apos;</div><div class="line"></div><div class="line">process.env.PATH.split(path.delimiter)</div><div class="line">// returns [&apos;C:\\Windows\\system32&apos;, &apos;C:\\Windows&apos;, &apos;C:\\Program Files\\node\\&apos;]</div></pre></td></tr></table></figure>
<h2 id="util"><a href="#util" class="headerlink" title="util"></a>util</h2><h3 id="until-inherits-constructor-superConstructor"><a href="#until-inherits-constructor-superConstructor" class="headerlink" title="until.inherits(constructor,superConstructor)"></a>until.inherits(constructor,superConstructor)</h3><p>实现对象间原型继承的函数.</p>
<h3 id="util-inspect-object-showHidden-depth-colors"><a href="#util-inspect-object-showHidden-depth-colors" class="headerlink" title="util.inspect(object,[showHidden],[depth],[colors])"></a>util.inspect(object,[showHidden],[depth],[colors])</h3><p>将任意对象转换为字符串的方法，通常用于调试和错误输出.</p>
<h3 id="util-isArray"><a href="#util-isArray" class="headerlink" title="util.isArray()"></a>util.isArray()</h3><h3 id="xutil-isRegExp"><a href="#xutil-isRegExp" class="headerlink" title="xutil.isRegExp()"></a>xutil.isRegExp()</h3><h3 id="util-isDate"><a href="#util-isDate" class="headerlink" title="util.isDate()"></a>util.isDate()</h3><h3 id="util-isError"><a href="#util-isError" class="headerlink" title="util.isError()"></a>util.isError()</h3><h3 id="util-format"><a href="#util-format" class="headerlink" title="util.format()"></a>util.format()</h3><h3 id="util-debug"><a href="#util-debug" class="headerlink" title="util. debug()"></a>util. debug()</h3><h2 id="事件驱动-events"><a href="#事件驱动-events" class="headerlink" title="事件驱动 events"></a>事件驱动 events</h2><h3 id="events-EventEmitter"><a href="#events-EventEmitter" class="headerlink" title="events.EventEmitter"></a>events.EventEmitter</h3><p>事件发射与事件监听器功能的封装.</p>
<h4 id="EventEmitter-on-event-listener"><a href="#EventEmitter-on-event-listener" class="headerlink" title="EventEmitter.on(event, listener)"></a>EventEmitter.on(event, listener)</h4><p>为指定事件注册一个监听器.</p>
<h4 id="EventEmitter-emit-event-arg1-arg2-…"><a href="#EventEmitter-emit-event-arg1-arg2-…" class="headerlink" title="EventEmitter.emit(event, [arg1], [arg2], […])"></a>EventEmitter.emit(event, [arg1], [arg2], […])</h4><p>发射 event 事件.</p>
<h4 id="EventEmitter-once-event-listener"><a href="#EventEmitter-once-event-listener" class="headerlink" title="EventEmitter.once(event, listener)"></a>EventEmitter.once(event, listener)</h4><p>为指定事件注册一个<strong><em>单次</em></strong>监听器</p>
<h4 id="EventEmitter-removeListener-event-listener"><a href="#EventEmitter-removeListener-event-listener" class="headerlink" title="EventEmitter.removeListener(event, listener)"></a>EventEmitter.removeListener(event, listener)</h4><p> 除指定事件的某个监听器，listener必须是该事件已经注册过的监听器。</p>
<h4 id="EventEmitter-removeAllListeners-event"><a href="#EventEmitter-removeAllListeners-event" class="headerlink" title="EventEmitter.removeAllListeners([event])"></a>EventEmitter.removeAllListeners([event])</h4><p>移除所有事件的所有监听器,如果指定 event，则移除指定事件的所有监听器。</p>
<h3 id="继承-EventEmitter"><a href="#继承-EventEmitter" class="headerlink" title="继承 EventEmitter"></a>继承 EventEmitter</h3><p>包括 fs、net、 http 在内的，只要是支持事件响应的核心模块都是 EventEmitter 的 子类。</p>
<h2 id="文件系统-fs"><a href="#文件系统-fs" class="headerlink" title="文件系统 fs"></a>文件系统 fs</h2><h3 id="fs-readFile-filename-encoding-callback-err-data"><a href="#fs-readFile-filename-encoding-callback-err-data" class="headerlink" title="fs.readFile(filename,[encoding],[callback(err,data)])"></a>fs.readFile(filename,[encoding],[callback(err,data)])</h3><h3 id="fs-readFileSync-filename-encoding"><a href="#fs-readFileSync-filename-encoding" class="headerlink" title="fs.readFileSync(filename, [encoding])"></a>fs.readFileSync(filename, [encoding])</h3><h3 id="fs-open-path-flags-mode-callback-err-fd"><a href="#fs-open-path-flags-mode-callback-err-fd" class="headerlink" title="fs.open(path,flags,[mode],[callback(err,fd)])"></a>fs.open(path,flags,[mode],[callback(err,fd)])</h3><h3 id="fs-read-fd-buffer-offset-length-position-callback-err-bytesRead-buffer"><a href="#fs-read-fd-buffer-offset-length-position-callback-err-bytesRead-buffer" class="headerlink" title="fs.read(fd, buffer, offset, length, position, [callback(err, bytesRead, buffer)])"></a>fs.read(fd, buffer, offset, length, position, [callback(err, bytesRead, buffer)])</h3><h2 id="HTTP服务器与客户端"><a href="#HTTP服务器与客户端" class="headerlink" title="HTTP服务器与客户端"></a>HTTP服务器与客户端</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[webpack 小结]]></title>
      <url>http://zy380196088.github.io./2017/04/12/webpack-%E4%BA%8C%E4%B8%89%E4%BA%8B/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><a id="more"></a>
<h1 id="安装-node-js-和-webpack"><a href="#安装-node-js-和-webpack" class="headerlink" title="安装 node.js 和 webpack"></a>安装 node.js 和 webpack</h1><p>终端输入<code>node -v</code> 成功显示node 版本,证明已经安装好, 否则,请自行百度 node 安装教程…</p>
<h2 id="全局安装-webpack"><a href="#全局安装-webpack" class="headerlink" title="全局安装 webpack"></a>全局安装 webpack</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install webpack -g</div></pre></td></tr></table></figure>
<h2 id="配置-package-json"><a href="#配置-package-json" class="headerlink" title="配置 package.json"></a>配置 package.json</h2><p>如果没有,<code>npm init</code>初始化安装.<br>webpack 命令行须知:</p>
<blockquote>
<p>webpack : 执行开发编译<br>webpack -p : 发布发布环境的编译(压缩代码)<br>webpack –watch : 监听项目<br>webpack -d : 包含 source maps 方便调试<br>webpack –colors : 让打包界面更好看</p>
</blockquote>
<p>构建项目时,可以按需求写进 package.json<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//package.json</div><div class="line">&#123;</div><div class="line">    //...</div><div class="line">    "script":&#123;</div><div class="line">        "dev":"webpack-dev-server --devtoll eval --progress --colors",</div><div class="line">        "deploy":"NODE_ENV=production webpack -p"</div><div class="line">    &#125;,</div><div class="line">    //...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="entry-入口文件"><a href="#entry-入口文件" class="headerlink" title="entry 入口文件"></a>entry 入口文件</h1><p>用哪个文件作为项目入口</p>
<h1 id="output-出口"><a href="#output-出口" class="headerlink" title="output 出口"></a>output 出口</h1><p>把处理完成的文件放在哪里</p>
<h1 id="module-模块"><a href="#module-模块" class="headerlink" title="module 模块"></a>module 模块</h1><p>用什么不同的模块来处理各种类型的文件</p>
<p>代码示例:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;  </div><div class="line">  <span class="attr">entry</span>: <span class="string">'./index.js'</span>,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">filename</span>: <span class="string">'bundle.js'</span>       </div><div class="line">  &#125;,</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">loaders</span>: [</div><div class="line">                  &#123;</div><div class="line">                <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>,</div><div class="line">                <span class="comment">// loader: extractCSS.extract(['css','sass'])</span></div><div class="line">                loaders: [<span class="string">'style'</span>, <span class="string">'css'</span>]</div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</div><div class="line">                <span class="comment">// loader: extractCSS.extract(['css'])</span></div><div class="line">                loaders: [<span class="string">'style'</span>, <span class="string">'css'</span>, <span class="string">'sass'</span>]</div><div class="line">            &#125;,<span class="comment">// loaders 可以接受 querystring 格式的参数</span></div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h1 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h1><p>Vue-cli webpack 项目参考:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">|-- build                            // 项目构建(webpack)相关代码</div><div class="line">|   |-- build.js                     // 生产环境构建代码</div><div class="line">|   |-- check-version.js             // 检查node、npm等版本</div><div class="line">|   |-- dev-client.js                // 热重载相关</div><div class="line">|   |-- dev-server.js                // 构建本地服务器</div><div class="line">|   |-- utils.js                     // 构建工具相关</div><div class="line">|   |-- webpack.base.conf.js         // webpack基础配置</div><div class="line">|   |-- webpack.dev.conf.js          // webpack开发环境配置</div><div class="line">|   |-- webpack.prod.conf.js         // webpack生产环境配置</div><div class="line">|-- config                           // 项目开发环境配置</div><div class="line">|   |-- dev.env.js                   // 开发环境变量</div><div class="line">|   |-- index.js                     // 项目一些配置变量</div><div class="line">|   |-- prod.env.js                  // 生产环境变量</div><div class="line">|   |-- test.env.js                  // 测试环境变量</div><div class="line">|-- src                              // 源码目录</div><div class="line">|   |-- components                     // vue公共组件</div><div class="line">|   |-- store                          // vuex的状态管理</div><div class="line">|   |-- App.vue                        // 页面入口文件</div><div class="line">|   |-- main.js                        // 程序入口文件，加载各种公共组件</div><div class="line">|-- static                           // 静态文件，比如一些图片，json数据等</div><div class="line">|   |-- data                           // 群聊分析得到的数据用于数据可视化</div><div class="line">|-- .babelrc                         // ES6语法编译配置</div><div class="line">|-- .editorconfig                    // 定义代码格式</div><div class="line">|-- .gitignore                       // git上传需要忽略的文件格式</div><div class="line">|-- README.md                        // 项目说明</div><div class="line">|-- favicon.ico </div><div class="line">|-- index.html                       // 入口页面</div><div class="line">|-- package.json                     // 项目基本信息</div><div class="line">.</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Python学习]]></title>
      <url>http://zy380196088.github.io./2017/03/14/Python%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>先开个坑,记录 Python的学习, 因为我作为一枚小散股民有个量化投资梦…</p>
<a id="more"></a>
<h1 id="Python-基础"><a href="#Python-基础" class="headerlink" title="Python 基础"></a>Python 基础</h1><h2 id="print"><a href="#print" class="headerlink" title="print()"></a>print()</h2><p>打印是 Python 中最常用的功能.</p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>“双引号中的字符串”,<br>‘单引号和双引号一样’,<br>‘’’三个引号被用于过于长段的文字或者是说明,只要三个引号不完就可以随意换行写下文字’’’</p>
<h3 id="字符串的分片与索引-string-x"><a href="#字符串的分片与索引-string-x" class="headerlink" title="字符串的分片与索引 string[x]"></a>字符串的分片与索引 string[x]</h3><p>字符串的分片是实际上就是从字符串中找出来你要截取的东西,复制出来一小段你要的长度,储存在另一个地方,而不会对原字符串改动.<br>看完下面的代码,你会对此有进一步的了解:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">name = <span class="string">'My name is Zoey'</span></div><div class="line">print(name[<span class="number">0</span>])</div><div class="line"><span class="string">'M'</span></div><div class="line">print(name[<span class="number">-4</span>])</div><div class="line"><span class="string">'Z'</span></div><div class="line">print(name[<span class="number">11</span>:<span class="number">14</span>])</div><div class="line"><span class="string">'Zoe'</span></div><div class="line">print(name[<span class="number">11</span>:<span class="number">15</span>])</div><div class="line"><span class="string">'Zoey'</span></div><div class="line">print(name[<span class="number">5</span>:])</div><div class="line"><span class="string">'me is Zoey'</span></div><div class="line">print(name[:<span class="number">5</span>])</div><div class="line"><span class="string">'My na'</span></div></pre></td></tr></table></figure></p>
<p><strong>“:”号</strong>两边分别代表字符串的分割从哪里开始哪里结束.<br><strong><em>正数从0开始,表示从前到后;</em></strong><br><strong><em>负数从-1开始,表示从后到前;</em></strong><br><strong>注意,结束的位置,是不截取它本身的(不知道这么说懂不懂,不懂就多看几遍上面的代码吧^-^)</strong></p>
<p>下面看段有意思的:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//找出你朋友中的魔鬼</div><div class="line">word = <span class="string">'friend'</span></div><div class="line">find_the_evil = word[<span class="number">0</span>] + word[<span class="number">2</span>:<span class="number">4</span>]+word[<span class="number">-3</span>:<span class="number">-1</span>]</div><div class="line">print(find_the_evil)</div><div class="line">//fiend</div></pre></td></tr></table></figure></p>
<h3 id="type"><a href="#type" class="headerlink" title="type()"></a>type()</h3><p>通过 type()函数来查看类型.例如:<code>print(type(word))</code></p>
<h3 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">phone_number = <span class="string">'136-6760-2008'</span></div><div class="line">hideing_number = phone_number.replace(phone_number[:<span class="number">9</span>,<span class="string">'*'</span>*<span class="number">9</span>])</div><div class="line">print(hideing_number)</div><div class="line">//*********<span class="number">2008</span></div></pre></td></tr></table></figure>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>Python3.5包含了68个内键函数,就不一一详细列出了,自行查阅学习吧.</p>
<blockquote>
<p>print()<br>放入对象就能打印的函数<br>input()<br>让用户输入信息的函数<br>len()<br>测量对象长度<br>int()<br>将字符串类型的数字转换成整数类型的函数</p>
</blockquote>
<h3 id="创建函数"><a href="#创建函数" class="headerlink" title="创建函数"></a>创建函数</h3><h4 id="def-functionName-arg1-arg2-return-‘something’"><a href="#def-functionName-arg1-arg2-return-‘something’" class="headerlink" title="def functionName(arg1,arg2): return ‘something’"></a><strong>def functionName(arg1,arg2): return ‘something’</strong></h4><p>创建函数.</p>
<h3 id="传递参数与参数类型"><a href="#传递参数与参数类型" class="headerlink" title="传递参数与参数类型"></a>传递参数与参数类型</h3><h4 id="位置参数-positional-argument"><a href="#位置参数-positional-argument" class="headerlink" title="位置参数 (positional argument)"></a>位置参数 (positional argument)</h4><h4 id="关键词参数-keyword-argument"><a href="#关键词参数-keyword-argument" class="headerlink" title="关键词参数 (keyword argument)"></a>关键词参数 (keyword argument)</h4><p>在函数调用的时候,将没个参数名称后面赋予一个我们想要传入的值.</p>
<h4 id="给参数设定默认值"><a href="#给参数设定默认值" class="headerlink" title="给参数设定默认值"></a>给参数设定默认值</h4><p>定义参数的时候给参数赋值即可.<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">def sum(num1 , num2, num3 = 100)</div><div class="line">    return num1 + num2 + num3</div><div class="line">//调用的时候只需要传入 前面两个参数就能正常运行</div><div class="line">sum(50,20)</div><div class="line">//如果想改变默认参数的值允许函数</div><div class="line">sum(50,20,num3 = 50)</div></pre></td></tr></table></figure></p>
<h3 id="open-url-method"><a href="#open-url-method" class="headerlink" title="open(url,method)"></a>open(url,method)</h3><p>两个参数分别对应文件的完整路径和名称,打开的方式;</p>
<h3 id="write"><a href="#write" class="headerlink" title="write()"></a>write()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">file = open(<span class="string">'/Users/zhouyu/Desktop/stack.txt'</span>,<span class="string">'w'</span>)</div><div class="line">file.write(<span class="string">'Hello World'</span>)</div></pre></td></tr></table></figure>
<p>创建个函数:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">text_create</span><span class="params">(name,text)</span>:</span></div><div class="line">    desktop_path = <span class="string">'/Users/zhouyu/Desktop/'</span></div><div class="line">    full_path = desktop_path + name + <span class="string">'.txt'</span></div><div class="line">    file = open(full_path, <span class="string">'w'</span>)</div><div class="line">    file.write(text)</div><div class="line">    file.close()</div><div class="line">    print(<span class="string">'Done'</span>)</div><div class="line">//调用函数</div><div class="line">text_create(<span class="string">'hello'</span>,<span class="string">'Hello World'</span>)</div></pre></td></tr></table></figure></p>
<h2 id="循环与判断"><a href="#循环与判断" class="headerlink" title="循环与判断"></a>循环与判断</h2><h3 id="布尔类型-True-与-False-注意首字母大写"><a href="#布尔类型-True-与-False-注意首字母大写" class="headerlink" title="布尔类型 True 与 False (注意首字母大写)"></a>布尔类型 True 与 False (注意首字母大写)</h3><p>但凡能够产生一个布尔值的表达式为布尔表达式(Boolean Expressions)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>&gt;<span class="number">2</span>                 //<span class="keyword">False</span></div><div class="line"><span class="number">1</span>&lt;<span class="number">2</span>&lt;<span class="number">3</span>               //<span class="keyword">True</span></div><div class="line"><span class="number">42</span> != <span class="string">'42'</span>          //<span class="keyword">True</span></div><div class="line"><span class="string">'Name'</span> == <span class="string">'name'</span>    //<span class="keyword">False</span></div></pre></td></tr></table></figure></p>
<h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p><strong>== , != , &gt; , &lt; , &lt;= , &gt;=</strong><br>这些符号的解释一般都能懂就不一一说明了.<br><strong>要注意: Python 中有着严格的大小写区分</strong><br><strong>不同类型的对象不能使用”&lt;,&gt;,&lt;=,&gt;=”进行比较,却可以使用”==,!==”</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">42</span> &gt; <span class="string">'number'</span>   //无法比较</div><div class="line"><span class="number">42</span> == <span class="string">'number'</span>  //<span class="keyword">False</span></div><div class="line"><span class="number">42</span> != <span class="string">'number'</span>  //<span class="keyword">True</span></div></pre></td></tr></table></figure></p>
<p><strong>注意:浮点和整数虽然不是同类型,但是不影响比较运算</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">5.0</span> ==<span class="number">5</span> //<span class="keyword">True</span></div><div class="line"><span class="number">3.0</span> &gt;<span class="number">1</span> //<span class="keyword">True</span></div></pre></td></tr></table></figure></p>
<h3 id="成员运算符-in-not-in-与-身份运算符-is-is-not"><a href="#成员运算符-in-not-in-与-身份运算符-is-is-not" class="headerlink" title="成员运算符 in / not in 与 身份运算符 is / is not"></a>成员运算符 in / not in 与 身份运算符 is / is not</h3><h3 id="布尔运算符-not-and-or"><a href="#布尔运算符-not-and-or" class="headerlink" title="布尔运算符 not , and , or"></a>布尔运算符 not , and , or</h3><h3 id="条件控制"><a href="#条件控制" class="headerlink" title="条件控制"></a>条件控制</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> condition:</div><div class="line">    do something</div><div class="line"><span class="keyword">elif</span> condition:</div><div class="line">    do something</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    do something</div></pre></td></tr></table></figure>
<h3 id="循环-Loop"><a href="#循环-Loop" class="headerlink" title="循环 Loop"></a>循环 Loop</h3><h4 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> item <span class="keyword">in</span> iterable:</div><div class="line">    do something</div></pre></td></tr></table></figure>
<h4 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for i in iterable:</div><div class="line">    for j in iterable:</div><div class="line">        do something</div></pre></td></tr></table></figure>
<h4 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> condition:</div><div class="line">    do something</div></pre></td></tr></table></figure>
<h2 id="数据结构-Data-Structure"><a href="#数据结构-Data-Structure" class="headerlink" title="数据结构 Data Structure"></a>数据结构 Data Structure</h2><h3 id="列表-list-val1-val2-val3-val4"><a href="#列表-list-val1-val2-val3-val4" class="headerlink" title="列表 list = [val1,val2,val3,val4]"></a>列表 list = [val1,val2,val3,val4]</h3><blockquote>
<p>列表中的每一个元素都是可变的<br>列表中的元素是有序的<br>列表可以容纳 Python 中的任何对象</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">all_in_list = [</div><div class="line">    <span class="number">1</span>,              <span class="comment">#整数</span></div><div class="line">    <span class="number">1.0</span>,            <span class="comment">#浮点数</span></div><div class="line">    <span class="string">'a word'</span>,       <span class="comment">#字符串</span></div><div class="line">    print(<span class="number">1</span>),       <span class="comment">#函数</span></div><div class="line">    <span class="keyword">True</span>,           <span class="comment">#布尔值</span></div><div class="line">    [<span class="number">1</span>,<span class="number">2</span>],          <span class="comment">#列表中套列表</span></div><div class="line">    (<span class="number">1</span>,<span class="number">2</span>),          <span class="comment">#元组</span></div><div class="line">    &#123;<span class="string">'key'</span>:<span class="string">'value'</span>&#125; <span class="comment">#字典</span></div><div class="line">]</div></pre></td></tr></table></figure>
<h4 id="列表的增删改查"><a href="#列表的增删改查" class="headerlink" title="列表的增删改查"></a>列表的增删改查</h4><blockquote>
<p>insert() 插入</p>
</blockquote>
<p>插入元素的实际位置在<strong>指定位置元素之前,如果指定插入的位置在列表中不存在,那么这个元素一定会被放在列表的最后位置</strong></p>
<blockquote>
<p>remove() 删除</p>
<p>extend() 添加多个元素</p>
</blockquote>
<h3 id="字典-dict-key1-val1-key2-val2"><a href="#字典-dict-key1-val1-key2-val2" class="headerlink" title="字典 dict = {key1,:val1,key2:val2}"></a>字典 dict = {key1,:val1,key2:val2}</h3><blockquote>
<p>字典中数据必须是以键值对的形式出现的;<br>逻辑上讲,键时不能重复的,而值可以重复;<br>字典中的键(key)是不可变的,无法修改;值( value)是可变的,可修改,可以是任何对象</p>
</blockquote>
<h4 id="字典的增删改查-字典不能切片"><a href="#字典的增删改查-字典不能切片" class="headerlink" title="字典的增删改查 (字典不能切片)"></a>字典的增删改查 (字典不能切片)</h4><blockquote>
<p>update() 添加多个元素<br>del 删除字典中的元素</p>
</blockquote>
<h3 id="元组-tuple-val1-val2-val3-val4"><a href="#元组-tuple-val1-val2-val3-val4" class="headerlink" title="元组 tuple = (val1,val2,val3,val4)"></a>元组 tuple = (val1,val2,val3,val4)</h3><p>元组其实可以理解成为一个稳固版的列表,因为元组是不可修改的.</p>
<h3 id="集合-set-val1-val2-val3-val4"><a href="#集合-set-val1-val2-val3-val4" class="headerlink" title="集合 set ={val1,val2,val3,val4}"></a>集合 set ={val1,val2,val3,val4}</h3><p>每一个集合中的元素是无序的,不重复的任意对象</p>
<blockquote>
<p>add() 添加<br>discard() 删除</p>
</blockquote>
<h3 id="数据结构的一些技巧"><a href="#数据结构的一些技巧" class="headerlink" title="数据结构的一些技巧"></a>数据结构的一些技巧</h3><h4 id="多重循环"><a href="#多重循环" class="headerlink" title="多重循环"></a>多重循环</h4><blockquote>
<p>sorted()<br>sorted 函数按照长短,大小,英文字母的顺序给每个列表中的元素进行排序.<br><strong>但是 sorted 函数并不会改变列表本身</strong><br>zip()<br>如果同时需要整理两个列表: </p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> a,b <span class="keyword">in</span> zip(num ,str)</div><div class="line">    print(b,<span class="string">'is'</span>,a)</div></pre></td></tr></table></figure>
<h4 id="推导式-列表解析式-list-item-for-item-in-iterable"><a href="#推导式-列表解析式-list-item-for-item-in-iterable" class="headerlink" title="推导式(列表解析式) list = [ item for item in iterable]"></a>推导式(列表解析式) list = [ item for item in iterable]</h4><p>假设我现在有10个元素要装进列表中,普通写法:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a = []</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</div><div class="line">    a.append(i)</div></pre></td></tr></table></figure></p>
<p>换成列表解析式写法:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">b = [ i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>)]</div></pre></td></tr></table></figure></p>
<p><strong>列表解析式不仅方便,并且在执行效率上要远胜过前者</strong></p>
<h4 id="循环列表时获取元素索引-enumerate"><a href="#循环列表时获取元素索引-enumerate" class="headerlink" title="循环列表时获取元素索引 enumerate()"></a>循环列表时获取元素索引 enumerate()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">letters = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>,<span class="string">'g'</span>]</div><div class="line"><span class="keyword">for</span> num ,letter <span class="keyword">in</span> enumerate(letters):</div><div class="line">    print(letter,<span class="string">'is'</span>,num+<span class="number">1</span>)</div></pre></td></tr></table></figure>
<h2 id="类与可口可乐"><a href="#类与可口可乐" class="headerlink" title="类与可口可乐"></a>类与可口可乐</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CocaCola</span>:</span></div><div class="line">    formular = [<span class="string">'caffeine'</span>,<span class="string">'sugar'</span>,<span class="string">'water'</span>,<span class="string">'soda'</span>]</div></pre></td></tr></table></figure>
<h3 id="类的实例化"><a href="#类的实例化" class="headerlink" title="类的实例化"></a>类的实例化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">coke_for_me = CocaCola()</div><div class="line">coke_for_you = CocaCola()</div></pre></td></tr></table></figure>
<h3 id="类属性引用-类-属性名"><a href="#类属性引用-类-属性名" class="headerlink" title="类属性引用 (类.属性名)"></a>类属性引用 (类.属性名)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">print(CocaCola.formular)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">'caffeine'</span>,<span class="string">'sugar'</span>,<span class="string">'water'</span>,<span class="string">'soda'</span>]</div><div class="line"><span class="keyword">for</span> element <span class="keyword">in</span> coke_for_me.formular:</div><div class="line">    print(element)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>caffeine</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sugar</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>water</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>soda</div></pre></td></tr></table></figure>
<h4 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h4><p>创建了类后,通过 object.new_attr 的形式赋值,就得到了一个新的实例的变量.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CocaCola</span>:</span></div><div class="line">    formula = [<span class="string">'caffeine'</span>,<span class="string">'sugar'</span>,<span class="string">'water'</span>,<span class="string">'soda'</span>]</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drink</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'Energy!'</span>)</div><div class="line">coke = CocaCola()</div><div class="line">coke.drink()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>Energy!</div></pre></td></tr></table></figure></p>
<p>一旦一个类被实例化,下面使用方式是相似的:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">coke = CocaCola</div><div class="line">coke.drink == CocaCola.drink(coke) //两边一样</div></pre></td></tr></table></figure></p>
<h4 id="init"><a href="#init" class="headerlink" title="init()"></a><strong>init</strong>()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CocaCola</span><span class="params">()</span>:</span></div><div class="line">    formula = [<span class="string">'caffeine'</span>,<span class="string">'sugar'</span>,<span class="string">'water'</span>,<span class="string">'soda'</span>]</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">self.local_logo = <span class="string">'    '</span> <span class="function"><span class="keyword">def</span> <span class="title">drink</span><span class="params">(self)</span>:</span> <span class="comment"># HERE </span></div><div class="line">        print(<span class="string">'Energy!'</span>)</div><div class="line">coke = CocaCola() <span class="keyword">print</span> coke.local_logo)</div></pre></td></tr></table></figure>
<h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CaffeineFree</span><span class="params">(CocaCola)</span>:</span></div><div class="line">    caffeine = <span class="number">0</span></div><div class="line">    ingredients =  [</div><div class="line">        <span class="string">'High Fructose Corn Syrup'</span>,</div><div class="line">        <span class="string">'Carbonated Water'</span>,</div><div class="line">        <span class="string">'Phosphoric Acid'</span>,</div><div class="line">        <span class="string">'Natural Flavors'</span>,</div><div class="line">        <span class="string">'Caramel Color'</span>,</div><div class="line">    ]</div><div class="line">coke_a = CaffeineFree(<span class="string">'Cocacola-FREE'</span>)</div><div class="line">coke_a.drink()</div></pre></td></tr></table></figure>
<p>我们在新类 CaffeineFree 后面的括号中放入 CocaCola ,这就表示这个类是继承与 CocaCola 这个父类; 类中的变量和方法可以完全被子类继承,可以对特殊改动进行覆盖.</p>
<h3 id="dict"><a href="#dict" class="headerlink" title="dict"></a><strong>dict</strong></h3><p><strong>dict</strong>是一个类的特殊属性,他是一个字典,用于储存类或者实例的属性.它是默认隐藏的.你不去定义它,他也会存在于每一个类中.<br>Python 中属性的引用机制是自外而内的,当你创建了一个实例后,引用属性的时候,编译器会先搜索该实例是否拥有该属性,如果有,则引用;如果没有,将搜索这个实例所属的类是否有这个属性,如果有,就引用,没有就只能报错了.</p>
<h1 id="Python-数据分析"><a href="#Python-数据分析" class="headerlink" title="Python 数据分析"></a>Python 数据分析</h1>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[面试小记]]></title>
      <url>http://zy380196088.github.io./2017/03/14/%E9%9D%A2%E8%AF%95%E5%B0%8F%E8%AE%B0/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>总结一些常见和必GET的前端面试点.<br><a id="more"></a></p>
<h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><h3 id="ES6的新语法-babel编译"><a href="#ES6的新语法-babel编译" class="headerlink" title="ES6的新语法, babel编译"></a>ES6的新语法, babel编译</h3><h3 id="如何便利数据量大的-json"><a href="#如何便利数据量大的-json" class="headerlink" title="如何便利数据量大的 json"></a>如何便利数据量大的 json</h3><h3 id="Js动画与CSS动画区别及相应实现"><a href="#Js动画与CSS动画区别及相应实现" class="headerlink" title="Js动画与CSS动画区别及相应实现"></a>Js动画与CSS动画区别及相应实现</h3><h3 id="基本类型与引用类型区别，在内存中的存储方式"><a href="#基本类型与引用类型区别，在内存中的存储方式" class="headerlink" title="基本类型与引用类型区别，在内存中的存储方式"></a>基本类型与引用类型区别，在内存中的存储方式</h3><h3 id="性能优化手段"><a href="#性能优化手段" class="headerlink" title="性能优化手段"></a>性能优化手段</h3><h3 id="前端安全措施-XSS-攻击原理"><a href="#前端安全措施-XSS-攻击原理" class="headerlink" title="前端安全措施, XSS 攻击原理"></a>前端安全措施, XSS 攻击原理</h3><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><h3 id="深拷贝的两种实现方式"><a href="#深拷贝的两种实现方式" class="headerlink" title="深拷贝的两种实现方式"></a>深拷贝的两种实现方式</h3><h3 id="遍历数组与对象的方式"><a href="#遍历数组与对象的方式" class="headerlink" title="遍历数组与对象的方式"></a>遍历数组与对象的方式</h3><h3 id="原型与原型链-写原型继承"><a href="#原型与原型链-写原型继承" class="headerlink" title="原型与原型链,写原型继承"></a>原型与原型链,写原型继承</h3><h3 id="this-作用域问题"><a href="#this-作用域问题" class="headerlink" title="this 作用域问题"></a>this 作用域问题</h3><h3 id="ES6的let-const与var区别、class与ES5的构造函数的区别、解构赋值"><a href="#ES6的let-const与var区别、class与ES5的构造函数的区别、解构赋值" class="headerlink" title="ES6的let/const与var区别、class与ES5的构造函数的区别、解构赋值"></a>ES6的let/const与var区别、class与ES5的构造函数的区别、解构赋值</h3><h3 id="cookie和session区别"><a href="#cookie和session区别" class="headerlink" title="cookie和session区别"></a>cookie和session区别</h3><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="css实现一行三等分的方式"><a href="#css实现一行三等分的方式" class="headerlink" title="css实现一行三等分的方式"></a>css实现一行三等分的方式</h3><h3 id="写三种方式实现上下左右居中"><a href="#写三种方式实现上下左右居中" class="headerlink" title="写三种方式实现上下左右居中"></a>写三种方式实现上下左右居中</h3><h3 id="左边栏固定宽度-右边内容随着屏幕变化"><a href="#左边栏固定宽度-右边内容随着屏幕变化" class="headerlink" title="左边栏固定宽度,右边内容随着屏幕变化"></a>左边栏固定宽度,右边内容随着屏幕变化</h3><h3 id="三种方式清楚浮动"><a href="#三种方式清楚浮动" class="headerlink" title="三种方式清楚浮动"></a>三种方式清楚浮动</h3><h3 id="stylus-sass-less-区别"><a href="#stylus-sass-less-区别" class="headerlink" title="stylus/sass/less 区别"></a>stylus/sass/less 区别</h3><h3 id="postcss-的作用"><a href="#postcss-的作用" class="headerlink" title="postcss 的作用"></a>postcss 的作用</h3><h2 id="算法与数据结构"><a href="#算法与数据结构" class="headerlink" title="算法与数据结构"></a>算法与数据结构</h2><h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2><p>平衡二叉树又叫<strong>AVL树</strong>,特点:每个节点的左右子树的高度之差的绝对值（平衡因子）最多为1。</p>
<h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><h3 id="对模块化的理解"><a href="#对模块化的理解" class="headerlink" title="对模块化的理解"></a>对模块化的理解</h3><h3 id="AMD-与-CMD区别"><a href="#AMD-与-CMD区别" class="headerlink" title="AMD 与 CMD区别"></a>AMD 与 CMD区别</h3><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><h3 id="Redux-的流程与作用机制"><a href="#Redux-的流程与作用机制" class="headerlink" title="Redux 的流程与作用机制"></a>Redux 的流程与作用机制</h3><h3 id="React组件间通信方式"><a href="#React组件间通信方式" class="headerlink" title="React组件间通信方式"></a>React组件间通信方式</h3><h3 id="Angular-与-React-区别-Angular-特点"><a href="#Angular-与-React-区别-Angular-特点" class="headerlink" title="Angular 与 React 区别, Angular 特点"></a>Angular 与 React 区别, Angular 特点</h3><h3 id="可视化框架"><a href="#可视化框架" class="headerlink" title="可视化框架"></a>可视化框架</h3><h3 id="WebGL-与-Three-js"><a href="#WebGL-与-Three-js" class="headerlink" title="WebGL 与 Three.js"></a>WebGL 与 Three.js</h3><h2 id="打包工具"><a href="#打包工具" class="headerlink" title="打包工具"></a>打包工具</h2><h3 id="简述-gulp-webpack"><a href="#简述-gulp-webpack" class="headerlink" title="简述 gulp , webpack"></a>简述 gulp , webpack</h3><h3 id="webpack2用法-优点"><a href="#webpack2用法-优点" class="headerlink" title="webpack2用法,优点"></a>webpack2用法,优点</h3><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MongoDB学习]]></title>
      <url>http://zy380196088.github.io./2017/03/13/MongoDB%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。</p>
<p>MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。<br><a id="more"></a></p>
<h1 id="简单了解下-MongoDB"><a href="#简单了解下-MongoDB" class="headerlink" title="简单了解下 MongoDB"></a>简单了解下 MongoDB</h1><p>MongoDB 将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">name</span>:<span class="string">"Zoey"</span>,</div><div class="line">    <span class="attr">age</span>:<span class="string">"24"</span>,</div><div class="line">    <span class="attr">hobby</span>: [<span class="string">"music"</span>,<span class="string">"reading"</span>,<span class="string">"violin"</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="MongoDB-的主要特点"><a href="#MongoDB-的主要特点" class="headerlink" title="MongoDB 的主要特点"></a>MongoDB 的主要特点</h2><ol>
<li>可以在MongoDB记录中设置任何属性的索引 (如：FirstName=”Sameer”,Address=”8 Gandhi Road”)来实现更快的排序。</li>
<li>可以通过本地或者网络创建数据镜像，这使得MongoDB有更强的扩展性。</li>
<li>如果负载的增加（需要更多的存储空间和更强的处理能力） ，它可以分布在计算机网络中的其他节点上这就是所谓的分片。</li>
<li>支持丰富的查询表达式。查询指令使用JSON形式的标记，可轻易查询文档中内嵌的对象及数组。</li>
<li>使用update()命令可以实现替换完成的文档（数据）或者一些指定的数据字段 。</li>
<li>Mongodb中的Map/reduce主要是用来对数据进行批量处理和聚合操作。Map函数调用emit(key,value)遍历集合中所有的记录，将key与value传给Reduce函数进行处理.</li>
<li>GridFS是MongoDB中的一个内置功能，可以用于存放大量小文件。</li>
<li>MongoDB允许在服务端执行脚本，可以用Javascript编写某个函数，直接在服务端执行，也可以把函数的定义存储在服务端，下次直接调用即可。</li>
</ol>
<h1 id="MongoDB-常用的数据类型"><a href="#MongoDB-常用的数据类型" class="headerlink" title="MongoDB 常用的数据类型"></a>MongoDB 常用的数据类型</h1><table>
<thead>
<tr>
<th>数据类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>String</td>
<td>字符串。存储数据常用的数据类型。在 MongoDB 中，UTF-8 编码的字符串才是合法的。</td>
</tr>
<tr>
<td>Integer</td>
<td>整型数值。用于存储数值。根据你所采用的服务器，可分为 32 位或 64 位。</td>
</tr>
<tr>
<td>Boolean</td>
<td>布尔值。用于存储布尔值（真/假）。</td>
</tr>
<tr>
<td>Double</td>
<td>双精度浮点值。用于存储浮点值。</td>
</tr>
<tr>
<td>Min/Max keys</td>
<td>将一个值与 BSON（二进制的 JSON）元素的最低值和最高值相对比。</td>
</tr>
<tr>
<td>Arrays</td>
<td>用于将数组或列表或多个值存储为一个键。</td>
</tr>
<tr>
<td>Timestamp</td>
<td>时间戳。记录文档修改或添加的具体时间。</td>
</tr>
<tr>
<td>Object</td>
<td>用于内嵌文档。</td>
</tr>
<tr>
<td>Null</td>
<td>用于创建空值。</td>
</tr>
<tr>
<td>Symbol</td>
<td>符号。该数据类型基本上等同于字符串类型，但不同的是，它一般用于采用特殊符号类型的语言。</td>
</tr>
<tr>
<td>Date</td>
<td>日期时间。用 UNIX 时间格式来存储当前日期或时间。你可以指定自己的日期时间：创建 Date 对象，传入年月日信息。</td>
</tr>
<tr>
<td>Object ID</td>
<td>对象 ID。用于创建文档的 ID。</td>
</tr>
<tr>
<td>Binary Data 二进制数据。用于存储二进制数据。</td>
</tr>
<tr>
<td>Code</td>
<td>代码类型。用于在文档中存储 JavaScript 代码。</td>
</tr>
<tr>
<td>Regular expression</td>
<td>正则表达式类型。用于存储正则表达式。</td>
</tr>
</tbody>
</table>
<h1 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h1><h2 id="启动-MongoDB服务"><a href="#启动-MongoDB服务" class="headerlink" title="启动 MongoDB服务"></a>启动 MongoDB服务</h2><p>在MongoDB安装目录的bin目录下执行’mongod’即可。</p>
<p>执行启动操作后，mongodb在输出一些必要信息后不会输出任何信息，之后就等待连接的建立，当连接被建立后，就会开始打印日志信息。</p>
<p>你可以使用 MongoDB shell 来连接 MongoDB 服务器。你也可以使用 PHP 来连接 MongoDB。本教程我们会使用 MongoDB shell 来连接 Mongodb 服务，之后的章节我们将会介绍如何通过php 来连接MongoDB服务。</p>
<h2 id="通过shell连接MongoDB服务"><a href="#通过shell连接MongoDB服务" class="headerlink" title="通过shell连接MongoDB服务"></a>通过shell连接MongoDB服务</h2><p>你可以通过执行以下命令来连接MongoDB的服务。</p>
<p>注意：localhost为主机名，这个选项是必须的：<br><code>mongodb://localhost</code><br>当你执行以上命令时，你可以看到以下输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ ./mongo</div><div class="line">MongoDB shell version: 3.0.6</div><div class="line">connecting to: test</div><div class="line">&gt; mongodb://localhostmongodb://localhost</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>这时候你返回查看运行 ./mongod 命令的窗口，可以看到是从哪里连接到MongoDB的服务器，您可以看到如下信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">……省略信息……</div><div class="line">2015-09-25T17:22:27.336+0800 I CONTROL  [initandlisten] allocator: tcmalloc</div><div class="line">2015-09-25T17:22:27.336+0800 I CONTROL  [initandlisten] options: &#123; storage: &#123; dbPath: &quot;/data/db&quot; &#125; &#125;</div><div class="line">2015-09-25T17:22:27.350+0800 I NETWORK  [initandlisten] waiting for connections on port 27017</div><div class="line">2015-09-25T17:22:36.012+0800 I NETWORK  [initandlisten] connection accepted from 127.0.0.1:37310 #1 (1 connection now open)  # 该行表明一个来自本机的连接</div><div class="line">……省略信息……</div></pre></td></tr></table></figure></p>
<h2 id="MongoDB连接命令格式"><a href="#MongoDB连接命令格式" class="headerlink" title="MongoDB连接命令格式"></a>MongoDB连接命令格式</h2><p>使用用户名和密码连接到MongoDB服务器，你必须使用 ‘username:password@hostname/dbname’ 格式，’username’为用户名，’password’ 为密码。</p>
<p>使用用户名和密码连接登陆到默认数据库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ ./mongo</div><div class="line">MongoDB shell version: 3.0.6</div><div class="line">connecting to: test</div><div class="line">mongodb://admin:123456@localhost/</div></pre></td></tr></table></figure></p>
<p>以上命令中，用户 admin 使用密码 123456 连接到本地的 MongoDB 服务上。输出结果如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; mongodb://admin:123456@localhost/</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>使用用户名和密码连接登陆到指定数据库：</p>
<p>连接到指定数据库的格式如下：</p>
<p>mongodb://admin:123456@localhost/test</p>
<h2 id="更多连接实例"><a href="#更多连接实例" class="headerlink" title="更多连接实例"></a>更多连接实例</h2><p>连接本地数据库服务器，端口是默认的。</p>
<p>mongodb://localhost<br>使用用户名fred，密码foobar登录localhost的admin数据库。</p>
<p>mongodb://fred:foobar@localhost<br>使用用户名fred，密码foobar登录localhost的baz数据库。</p>
<p>mongodb://fred:foobar@localhost/baz<br>连接 replica pair, 服务器1为example1.com服务器2为example2。</p>
<p>mongodb://example1.com:27017,example2.com:27017<br>连接 replica set 三台服务器 (端口 27017, 27018, 和27019):</p>
<p>mongodb://localhost,localhost:27018,localhost:27019<br>连接 replica set 三台服务器, 写入操作应用在主服务器 并且分布查询到从服务器。</p>
<p>mongodb://host1,host2,host3/?slaveOk=true<br>直接连接第一个服务器，无论是replica set一部分或者主服务器或者从服务器。</p>
<p>mongodb://host1,host2,host3/?connect=direct;slaveOk=true<br>当你的连接服务器有优先级，还需要列出所有服务器，你可以使用上述连接方式。</p>
<p>安全模式连接到localhost:</p>
<p>mongodb://localhost/?safe=true<br>以安全模式连接到replica set，并且等待至少两个复制服务器成功写入，超时时间设置为2秒。</p>
<p>mongodb://host1,host2,host3/?safe=true;w=2;wtimeoutMS=2000</p>
<h2 id="参数选项说明"><a href="#参数选项说明" class="headerlink" title="参数选项说明"></a>参数选项说明</h2><p>标准格式：</p>
<p>mongodb://[username:password@]host1[:port1][,host2[:port2],…[,hostN[:portN]]][/[database][?options]]<br>标准的连接格式包含了多个选项(options)，如下所示：</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>replicaSet=name</td>
<td>验证replica set的名称。 Impliesconnect=replicaSet.</td>
</tr>
<tr>
<td>slaveOk=true/false</td>
<td>true在connect=direct模式下，驱动会连接第一台机器，即使这台服务器不是主。在connect=replicaSet模式下，驱动会发送所有的写请求到主并且把读取操作分布在其他从服务器。false 在 connect=direct模式下，驱动会自动找寻主服务器. 在connect=replicaSet 模式下，驱动仅仅连接主服务器，并且所有的读写命令都连接到主服务器。</td>
</tr>
<tr>
<td>safe=true/false</td>
<td>true:在执行更新操作之后，驱动都会发送getLastError命令来确保更新成功。(还要参考 wtimeoutMS).false: 在每次更新之后，驱动不会发送getLastError来确保更新成功。</td>
</tr>
<tr>
<td>w=n</td>
<td>驱动添加 { w : n } 到getLastError命令. 应用于safe=true。</td>
</tr>
<tr>
<td>wtimeoutMS=ms</td>
<td>驱动添加 { wtimeout : ms } 到 getlasterror 命令. 应用于 safe=true. true: 驱动添加 { fsync : true } 到 getlasterror 命令.应用于 safe=true.false: 驱动不会添加到getLastError命令中。</td>
</tr>
<tr>
<td>journal=true/false</td>
<td>如果设置为 true, 同步到 journal (在提交到数据库前写入到实体中). 应用于 safe=true</td>
</tr>
<tr>
<td>connectTimeoutMS=ms</td>
<td>可以打开连接的时间。</td>
</tr>
<tr>
<td>socketTimeoutMS=ms</td>
<td>发送和接受sockets的时间。</td>
</tr>
</tbody>
</table>
<h1 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>MongoDB 创建数据库的语法格式如下：<br><code>use DATABASE_NAME</code><br>如果数据库不存在，则创建数据库，否则切换到指定数据库。</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>以下实例我们创建了数据库 runoob:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; use runoob</div><div class="line">switched to db runoob</div><div class="line">&gt; db</div><div class="line">runoob</div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
<p>如果你想查看所有数据库，可以使用 show dbs 命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; show dbs</div><div class="line">local  0.078GB</div><div class="line">test   0.078GB</div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
<p>可以看到，我们刚创建的数据库 runoob 并不在数据库的列表中， 要显示它，我们需要向 runoob 数据库插入一些数据。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt; db.runoob.insert(&#123;&quot;name&quot;:&quot;菜鸟教程&quot;&#125;)</div><div class="line">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</div><div class="line">&gt; show dbs</div><div class="line">local   0.078GB</div><div class="line">runoob  0.078GB</div><div class="line">test    0.078GB</div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
<p>MongoDB 中默认的数据库为 test，如果你没有创建新的数据库，集合将存放在 test 数据库中</p>
<h1 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h1><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><p>MongoDB 删除数据库的语法格式如下：<br><code>db.dropDatabase()</code><br>删除当前数据库，默认为 test，你可以使用 db 命令查看当前数据库名。</p>
<h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><p>以下实例我们删除了数据库 runoob。</p>
<p>首先，查看所有数据库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; show dbs</div><div class="line">local   0.078GB</div><div class="line">runoob  0.078GB</div><div class="line">test    0.078GB</div></pre></td></tr></table></figure></p>
<p>接下来我们切换到数据库 runoob：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; use runoob</div><div class="line">switched to db runoob</div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
<p>执行删除命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; db.dropDatabase()</div><div class="line">&#123; &quot;dropped&quot; : &quot;runoob&quot;, &quot;ok&quot; : 1 &#125;</div></pre></td></tr></table></figure></p>
<p>最后，我们再通过 show dbs 命令数据库是否删除成功：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; show dbs</div><div class="line">local  0.078GB</div><div class="line">test   0.078GB</div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
<h1 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h1><p>文档的数据结构和JSON基本一样。<br>所有存储在集合中的数据都是BSON格式。</p>
<p>BSON是一种类json的一种二进制形式的存储格式,简称Binary JSON。</p>
<h2 id="插入文档-1"><a href="#插入文档-1" class="headerlink" title="插入文档"></a>插入文档</h2><p>MongoDB 使用 insert() 或 save() 方法向集合中插入文档，语法如下：<br><code>db.COLLECTION_NAME.insert(document)</code></p>
<h2 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h2><p>以下文档可以存储在 MongoDB 的 runoob 数据库 的 col集合中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;db.col.insert(&#123;title: &apos;MongoDB 教程&apos;, </div><div class="line">    description: &apos;MongoDB 是一个 Nosql 数据库&apos;,</div><div class="line">    by: &apos;菜鸟教程&apos;,</div><div class="line">    url: &apos;http://www.runoob.com&apos;,</div><div class="line">    tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</div><div class="line">    likes: 100</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>以上实例中 col 是我们的集合名，前一章节我们已经创建过了，如果该集合不在该数据库中， MongoDB 会自动创建该集合比插入文档。</p>
<p>查看已插入文档：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; db.col.find()</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;56064886ade2f21f36b03134&quot;), &quot;title&quot; : &quot;MongoDB 教程&quot;, &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot; ], &quot;likes&quot; : 100 &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
<p>我们也可以将数据定义为一个变量，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt; document=(&#123;title: &apos;MongoDB 教程&apos;, </div><div class="line">    description: &apos;MongoDB 是一个 Nosql 数据库&apos;,</div><div class="line">    by: &apos;菜鸟教程&apos;,</div><div class="line">    url: &apos;http://www.runoob.com&apos;,</div><div class="line">    tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</div><div class="line">    likes: 100</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>执行后显示结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">        &quot;title&quot; : &quot;MongoDB 教程&quot;,</div><div class="line">        &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;,</div><div class="line">        &quot;by&quot; : &quot;菜鸟教程&quot;,</div><div class="line">        &quot;url&quot; : &quot;http://www.runoob.com&quot;,</div><div class="line">        &quot;tags&quot; : [</div><div class="line">                &quot;mongodb&quot;,</div><div class="line">                &quot;database&quot;,</div><div class="line">                &quot;NoSQL&quot;</div><div class="line">        ],</div><div class="line">        &quot;likes&quot; : 100</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>执行插入操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; db.col.insert(document)</div><div class="line">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
<p>插入文档你也可以使用 db.col.save(document) 命令。如果不指定 _id 字段 save() 方法类似于 insert() 方法。如果指定 _id 字段，则会更新该 _id 的数据。</p>
<h1 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h1><h2 id="update-方法"><a href="#update-方法" class="headerlink" title="update() 方法"></a>update() 方法</h2><p>update() 方法用于更新已存在的文档。语法格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">db.collection.update(</div><div class="line">   &lt;query&gt;,</div><div class="line">   &lt;update&gt;,</div><div class="line">   &#123;</div><div class="line">     upsert: &lt;boolean&gt;,</div><div class="line">     multi: &lt;boolean&gt;,</div><div class="line">     writeConcern: &lt;document&gt;</div><div class="line">   &#125;</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>参数说明：<br>query : update的查询条件，类似sql update查询内where后面的。<br>update : update的对象和一些更新的操作符（如$,$inc…）等，也可以理解为sql update查询内set后面的<br>upsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。<br>multi : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。<br>writeConcern :可选，抛出异常的级别。</p>
<h2 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h2><p>我们在集合 col 中插入如下数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt;db.col.insert(&#123;</div><div class="line">    title: &apos;MongoDB 教程&apos;, </div><div class="line">    description: &apos;MongoDB 是一个 Nosql 数据库&apos;,</div><div class="line">    by: &apos;菜鸟教程&apos;,</div><div class="line">    url: &apos;http://www.runoob.com&apos;,</div><div class="line">    tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</div><div class="line">    likes: 100</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>接着我们通过 update() 方法来更新标题(title):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&gt;db.col.update(&#123;&apos;title&apos;:&apos;MongoDB 教程&apos;&#125;,&#123;$set:&#123;&apos;title&apos;:&apos;MongoDB&apos;&#125;&#125;)</div><div class="line">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)   # 输出信息</div><div class="line">&gt; db.col.find().pretty()</div><div class="line">&#123;</div><div class="line">        &quot;_id&quot; : ObjectId(&quot;56064f89ade2f21f36b03136&quot;),</div><div class="line">        &quot;title&quot; : &quot;MongoDB&quot;,</div><div class="line">        &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;,</div><div class="line">        &quot;by&quot; : &quot;菜鸟教程&quot;,</div><div class="line">        &quot;url&quot; : &quot;http://www.runoob.com&quot;,</div><div class="line">        &quot;tags&quot; : [</div><div class="line">                &quot;mongodb&quot;,</div><div class="line">                &quot;database&quot;,</div><div class="line">                &quot;NoSQL&quot;</div><div class="line">        ],</div><div class="line">        &quot;likes&quot; : 100</div><div class="line">&#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
<p>可以看到标题(title)由原来的 “MongoDB 教程” 更新为了 “MongoDB”。<br>以上语句只会修改第一条发现的文档，如果你要修改多条相同的文档，则需要设置 multi 参数为 true。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&gt;db.col.update(&#123;&apos;title&apos;:&apos;MongoDB 教程&apos;&#125;,&#123;$set:&#123;&apos;title&apos;:&apos;MongoDB&apos;&#125;&#125;,&#123;multi:true&#125;)</div><div class="line">save() 方法</div><div class="line">save() 方法通过传入的文档来替换已有文档。语法格式如下：</div><div class="line"></div><div class="line">db.collection.save(</div><div class="line">   &lt;document&gt;,</div><div class="line">   &#123;</div><div class="line">     writeConcern: &lt;document&gt;</div><div class="line">   &#125;</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>参数说明：<br>document : 文档数据。<br>writeConcern :可选，抛出异常的级别。</p>
<h2 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h2><p>以下实例中我们替换了 _id 为 56064f89ade2f21f36b03136 的文档数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&gt;db.col.save(&#123;</div><div class="line">    &quot;_id&quot; : ObjectId(&quot;56064f89ade2f21f36b03136&quot;),</div><div class="line">    &quot;title&quot; : &quot;MongoDB&quot;,</div><div class="line">    &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;,</div><div class="line">    &quot;by&quot; : &quot;Runoob&quot;,</div><div class="line">    &quot;url&quot; : &quot;http://www.runoob.com&quot;,</div><div class="line">    &quot;tags&quot; : [</div><div class="line">            &quot;mongodb&quot;,</div><div class="line">            &quot;NoSQL&quot;</div><div class="line">    ],</div><div class="line">    &quot;likes&quot; : 110</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>替换成功后，我们可以通过 find() 命令来查看替换后的数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&gt;db.col.find().pretty()</div><div class="line">&#123;</div><div class="line">        &quot;_id&quot; : ObjectId(&quot;56064f89ade2f21f36b03136&quot;),</div><div class="line">        &quot;title&quot; : &quot;MongoDB&quot;,</div><div class="line">        &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;,</div><div class="line">        &quot;by&quot; : &quot;Runoob&quot;,</div><div class="line">        &quot;url&quot; : &quot;http://www.runoob.com&quot;,</div><div class="line">        &quot;tags&quot; : [</div><div class="line">                &quot;mongodb&quot;,</div><div class="line">                &quot;NoSQL&quot;</div><div class="line">        ],</div><div class="line">        &quot;likes&quot; : 110</div><div class="line">&#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
<h2 id="更多实例"><a href="#更多实例" class="headerlink" title="更多实例"></a>更多实例</h2><p>只更新第一条记录：<br><code>db.col.update( { &quot;count&quot; : { $gt : 1 } } , { $set : { &quot;test2&quot; : &quot;OK&quot;} } );</code></p>
<p>全部更新：<br><code>db.col.update( { &quot;count&quot; : { $gt : 3 } } , { $set : { &quot;test2&quot; : &quot;OK&quot;} },false,true );</code></p>
<p>只添加第一条：<br><code>db.col.update( { &quot;count&quot; : { $gt : 4 } } , { $set : { &quot;test5&quot; : &quot;OK&quot;} },true,false );</code></p>
<p>全部添加加进去:<br><code>db.col.update( { &quot;count&quot; : { $gt : 5 } } , { $set : { &quot;test5&quot; : &quot;OK&quot;} },true,true );</code></p>
<p>全部更新：<br><code>db.col.update( { &quot;count&quot; : { $gt : 15 } } , { $inc : { &quot;count&quot; : 1} },false,true );</code></p>
<p>只更新第一条记录：<br><code>db.col.update( { &quot;count&quot; : { $gt : 10 } } , { $inc : { &quot;count&quot; : 1} },false,false );</code></p>
<h1 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h1><h2 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h2><p>remove() 方法的基本语法格式如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">db.collection.remove(</div><div class="line">   &lt;query&gt;,</div><div class="line">   &lt;justOne&gt;</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>如果你的 MongoDB 是 2.6 版本以后的，语法格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">db.collection.remove(</div><div class="line">   &lt;query&gt;,</div><div class="line">   &#123;</div><div class="line">     justOne: &lt;boolean&gt;,</div><div class="line">     writeConcern: &lt;document&gt;</div><div class="line">   &#125;</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>参数说明：<br>query :（可选）删除的文档的条件。<br>justOne : （可选）如果设为 true 或 1，则只删除一个文档。<br>writeConcern :（可选）抛出异常的级别。</p>
<h2 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h2><p>以下文档我们执行两次插入操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;db.col.insert(&#123;title: &apos;MongoDB 教程&apos;, </div><div class="line">    description: &apos;MongoDB 是一个 Nosql 数据库&apos;,</div><div class="line">    by: &apos;菜鸟教程&apos;,</div><div class="line">    url: &apos;http://www.runoob.com&apos;,</div><div class="line">    tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</div><div class="line">    likes: 100</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>使用 find() 函数查询数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; db.col.find()</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;56066169ade2f21f36b03137&quot;), &quot;title&quot; : &quot;MongoDB 教程&quot;, &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot; ], &quot;likes&quot; : 100 &#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5606616dade2f21f36b03138&quot;), &quot;title&quot; : &quot;MongoDB 教程&quot;, &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;mongodb&quot;, &quot;database&quot;, &quot;NoSQL&quot; ], &quot;likes&quot; : 100 &#125;</div></pre></td></tr></table></figure></p>
<p>接下来我们移除 title 为 ‘MongoDB 教程’ 的文档：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt;db.col.remove(&#123;&apos;title&apos;:&apos;MongoDB 教程&apos;&#125;)</div><div class="line">WriteResult(&#123; &quot;nRemoved&quot; : 2 &#125;)           # 删除了两条数据</div><div class="line">&gt;db.col.find()</div><div class="line">……                                        # 没有数据</div></pre></td></tr></table></figure></p>
<p>如果你只想删除第一条找到的记录可以设置 justOne 为 1，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;db.COLLECTION_NAME.remove(DELETION_CRITERIA,1)</div></pre></td></tr></table></figure></p>
<p>如果你想删除所有数据，可以使用以下方式（类似常规 SQL 的 truncate 命令）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;db.col.remove(&#123;&#125;)</div><div class="line">&gt;db.col.find()</div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
<h1 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h1><h2 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h2><p>MongoDB 查询数据的语法格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;db.COLLECTION_NAME.find()</div></pre></td></tr></table></figure></p>
<p>find() 方法以非结构化的方式来显示所有文档。<br>如果你需要以易读的方式来读取数据，可以使用 pretty() 方法，语法格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;db.col.find().pretty()</div></pre></td></tr></table></figure></p>
<p>pretty() 方法以格式化的方式来显示所有文档。</p>
<h2 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h2><p>以下实例我们查询了集合 col 中的数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&gt; db.col.find().pretty()</div><div class="line">&#123;</div><div class="line">        &quot;_id&quot; : ObjectId(&quot;56063f17ade2f21f36b03133&quot;),</div><div class="line">        &quot;title&quot; : &quot;MongoDB 教程&quot;,</div><div class="line">        &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;,</div><div class="line">        &quot;by&quot; : &quot;菜鸟教程&quot;,</div><div class="line">        &quot;url&quot; : &quot;http://www.runoob.com&quot;,</div><div class="line">        &quot;tags&quot; : [</div><div class="line">                &quot;mongodb&quot;,</div><div class="line">                &quot;database&quot;,</div><div class="line">                &quot;NoSQL&quot;</div><div class="line">        ],</div><div class="line">        &quot;likes&quot; : 100</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>除了 find() 方法之外，还有一个 findOne() 方法，它只返回一个文档。</p>
<h2 id="MongoDB-与-RDBMS-Where-语句比较"><a href="#MongoDB-与-RDBMS-Where-语句比较" class="headerlink" title="MongoDB 与 RDBMS Where 语句比较"></a>MongoDB 与 RDBMS Where 语句比较</h2><p>如果你熟悉常规的 SQL 数据，通过下表可以更好的理解 MongoDB 的条件语句查询：</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>格式</th>
<th>范例</th>
<th>RDBMS中的类似语句</th>
</tr>
</thead>
<tbody>
<tr>
<td>等于</td>
<td>{<key>:<value>}</value></key></td>
<td>db.col.find({“by”:”菜鸟教程”}).pretty()</td>
<td>where by = ‘菜鸟教程’</td>
</tr>
<tr>
<td>小于</td>
<td>{<key>:{$lt:<value>}}</value></key></td>
<td>db.col.find({“likes”:{$lt:50}}).pretty()</td>
<td>where likes &lt; 50</td>
</tr>
<tr>
<td>小于或等于</td>
<td>{<key>:{$lte:<value>}}</value></key></td>
<td>db.col.find({“likes”:{$lte:50}}).pretty()</td>
<td>where likes &lt;= 50</td>
</tr>
<tr>
<td>大于</td>
<td>{<key>:{$gt:<value>}}</value></key></td>
<td>db.col.find({“likes”:{$gt:50}}).pretty()</td>
<td>where likes &gt; 50</td>
</tr>
<tr>
<td>大于或等于</td>
<td>{<key>:{$gte:<value>}}</value></key></td>
<td>db.col.find({“likes”:{$gte:50}}).pretty()</td>
<td>where likes &gt;= 50</td>
</tr>
<tr>
<td>不等于</td>
<td>{<key>:{$ne:<value>}}</value></key></td>
<td>db.col.find({“likes”:{$ne:50}}).pretty()</td>
<td>where likes != 50</td>
</tr>
</tbody>
</table>
<h2 id="MongoDB-AND-条件"><a href="#MongoDB-AND-条件" class="headerlink" title="MongoDB AND 条件"></a>MongoDB AND 条件</h2><p>MongoDB 的 find() 方法可以传入多个键(key)，每个键(key)以逗号隔开，及常规 SQL 的 AND 条件。</p>
<p>语法格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;db.col.find(&#123;key1:value1, key2:value2&#125;).pretty()</div></pre></td></tr></table></figure></p>
<h2 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h2><p>以下实例通过 by 和 title 键来查询 菜鸟教程 中 MongoDB 教程 的数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&gt; db.col.find(&#123;&quot;by&quot;:&quot;菜鸟教程&quot;, &quot;title&quot;:&quot;MongoDB 教程&quot;&#125;).pretty()</div><div class="line">&#123;</div><div class="line">        &quot;_id&quot; : ObjectId(&quot;56063f17ade2f21f36b03133&quot;),</div><div class="line">        &quot;title&quot; : &quot;MongoDB 教程&quot;,</div><div class="line">        &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;,</div><div class="line">        &quot;by&quot; : &quot;菜鸟教程&quot;,</div><div class="line">        &quot;url&quot; : &quot;http://www.runoob.com&quot;,</div><div class="line">        &quot;tags&quot; : [</div><div class="line">                &quot;mongodb&quot;,</div><div class="line">                &quot;database&quot;,</div><div class="line">                &quot;NoSQL&quot;</div><div class="line">        ],</div><div class="line">        &quot;likes&quot; : 100</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以上实例中类似于 WHERE 语句：WHERE by=’菜鸟教程’ AND title=’MongoDB 教程’</p>
<h2 id="MongoDB-OR-条件"><a href="#MongoDB-OR-条件" class="headerlink" title="MongoDB OR 条件"></a>MongoDB OR 条件</h2><p>MongoDB OR 条件语句使用了关键字 $or,语法格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt;db.col.find(</div><div class="line">   &#123;</div><div class="line">      $or: [</div><div class="line">         &#123;key1: value1&#125;, &#123;key2:value2&#125;</div><div class="line">      ]</div><div class="line">   &#125;</div><div class="line">).pretty()</div></pre></td></tr></table></figure></p>
<h2 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h2><p>以下实例中，我们演示了查询键 by 值为 菜鸟教程 或键 title 值为 MongoDB 教程 的文档。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&gt;db.col.find(&#123;$or:[&#123;&quot;by&quot;:&quot;菜鸟教程&quot;&#125;,&#123;&quot;title&quot;: &quot;MongoDB 教程&quot;&#125;]&#125;).pretty()</div><div class="line">&#123;</div><div class="line">        &quot;_id&quot; : ObjectId(&quot;56063f17ade2f21f36b03133&quot;),</div><div class="line">        &quot;title&quot; : &quot;MongoDB 教程&quot;,</div><div class="line">        &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;,</div><div class="line">        &quot;by&quot; : &quot;菜鸟教程&quot;,</div><div class="line">        &quot;url&quot; : &quot;http://www.runoob.com&quot;,</div><div class="line">        &quot;tags&quot; : [</div><div class="line">                &quot;mongodb&quot;,</div><div class="line">                &quot;database&quot;,</div><div class="line">                &quot;NoSQL&quot;</div><div class="line">        ],</div><div class="line">        &quot;likes&quot; : 100</div><div class="line">&#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
<h2 id="AND-和-OR-联合使用"><a href="#AND-和-OR-联合使用" class="headerlink" title="AND 和 OR 联合使用"></a>AND 和 OR 联合使用</h2><p>以下实例演示了 AND 和 OR 联合使用，类似常规 SQL 语句为： ‘where likes&gt;50 AND (by = ‘菜鸟教程’ OR title = ‘MongoDB 教程’)’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&gt;db.col.find(&#123;&quot;likes&quot;: &#123;$gt:50&#125;, $or: [&#123;&quot;by&quot;: &quot;菜鸟教程&quot;&#125;,&#123;&quot;title&quot;: &quot;MongoDB 教程&quot;&#125;]&#125;).pretty()</div><div class="line">&#123;</div><div class="line">        &quot;_id&quot; : ObjectId(&quot;56063f17ade2f21f36b03133&quot;),</div><div class="line">        &quot;title&quot; : &quot;MongoDB 教程&quot;,</div><div class="line">        &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;,</div><div class="line">        &quot;by&quot; : &quot;菜鸟教程&quot;,</div><div class="line">        &quot;url&quot; : &quot;http://www.runoob.com&quot;,</div><div class="line">        &quot;tags&quot; : [</div><div class="line">                &quot;mongodb&quot;,</div><div class="line">                &quot;database&quot;,</div><div class="line">                &quot;NoSQL&quot;</div><div class="line">        ],</div><div class="line">        &quot;likes&quot; : 100</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="条件操作符"><a href="#条件操作符" class="headerlink" title="条件操作符"></a>条件操作符</h1><p>条件操作符用于比较两个表达式并从mongoDB集合中获取数据。</p>
<p>我们使用的数据库名称为”runoob” 我们的集合名称为”col”，以下为我们插入的数据。<br>为了方便测试，我们可以先使用以下命令清空集合 “col” 的数据：</p>
<p><code>db.col.remove({})db.col.remove({})</code></p>
<p>插入以下数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&gt;db.col.insert(&#123;</div><div class="line">    title: &apos;PHP 教程&apos;, </div><div class="line">    description: &apos;PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。&apos;,</div><div class="line">    by: &apos;菜鸟教程&apos;,</div><div class="line">    url: &apos;http://www.runoob.com&apos;,</div><div class="line">    tags: [&apos;php&apos;],</div><div class="line">    likes: 200</div><div class="line">&#125;)</div><div class="line">&gt;db.col.insert(&#123;title: &apos;Java 教程&apos;, </div><div class="line">    description: &apos;Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。&apos;,</div><div class="line">    by: &apos;菜鸟教程&apos;,</div><div class="line">    url: &apos;http://www.runoob.com&apos;,</div><div class="line">    tags: [&apos;java&apos;],</div><div class="line">    likes: 150</div><div class="line">&#125;)</div><div class="line">db.col.insert(&#123;title: &apos;MongoDB 教程&apos;, </div><div class="line">    description: &apos;MongoDB 是一个 Nosql 数据库&apos;,</div><div class="line">    by: &apos;菜鸟教程&apos;,</div><div class="line">    url: &apos;http://www.runoob.com&apos;,</div><div class="line">    tags: [&apos;mongodb&apos;],</div><div class="line">    likes: 100</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>使用<em>find()*</em>命令查看数据：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; db.col.find()</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;56066542ade2f21f36b0313a&quot;), &quot;title&quot; : &quot;PHP 教程&quot;, &quot;description&quot; : &quot;PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;php&quot; ], &quot;likes&quot; : 200 &#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;56066549ade2f21f36b0313b&quot;), &quot;title&quot; : &quot;Java 教程&quot;, &quot;description&quot; : &quot;Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;java&quot; ], &quot;likes&quot; : 150 &#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5606654fade2f21f36b0313c&quot;), &quot;title&quot; : &quot;MongoDB 教程&quot;, &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;mongodb&quot; ], &quot;likes&quot; : 100 &#125;</div></pre></td></tr></table></figure>
<h2 id="MongoDB-gt-大于操作符-gt"><a href="#MongoDB-gt-大于操作符-gt" class="headerlink" title="MongoDB (&gt;) 大于操作符 - $gt"></a>MongoDB (&gt;) 大于操作符 - $gt</h2><p>如果你想获取 “col” 集合中 “likes” 大于 100 的数据，你可以使用以下命令：<br><code>db.col.find({&quot;likes&quot; : {$gt : 100}})</code><br>类似于SQL语句：<br><code>Select * from col where likes &gt; 100;</code><br>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; db.col.find(&#123;&quot;likes&quot; : &#123;$gt : 100&#125;&#125;)</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;56066542ade2f21f36b0313a&quot;), &quot;title&quot; : &quot;PHP 教程&quot;, &quot;description&quot; : &quot;PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;php&quot; ], &quot;likes&quot; : 200 &#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;56066549ade2f21f36b0313b&quot;), &quot;title&quot; : &quot;Java 教程&quot;, &quot;description&quot; : &quot;Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;java&quot; ], &quot;likes&quot; : 150 &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
<h2 id="MongoDB（-gt-）大于等于操作符-gte"><a href="#MongoDB（-gt-）大于等于操作符-gte" class="headerlink" title="MongoDB（&gt;=）大于等于操作符 - $gte"></a>MongoDB（&gt;=）大于等于操作符 - $gte</h2><p>如果你想获取”col”集合中 “likes” 大于等于 100 的数据，你可以使用以下命令：<br><code>db.col.find({likes : {$gte : 100}})</code><br>类似于SQL语句：<br><code>Select * from col where likes &gt;=100;</code><br>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; db.col.find(&#123;likes : &#123;$gte : 100&#125;&#125;)</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;56066542ade2f21f36b0313a&quot;), &quot;title&quot; : &quot;PHP 教程&quot;, &quot;description&quot; : &quot;PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;php&quot; ], &quot;likes&quot; : 200 &#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;56066549ade2f21f36b0313b&quot;), &quot;title&quot; : &quot;Java 教程&quot;, &quot;description&quot; : &quot;Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;java&quot; ], &quot;likes&quot; : 150 &#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5606654fade2f21f36b0313c&quot;), &quot;title&quot; : &quot;MongoDB 教程&quot;, &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;mongodb&quot; ], &quot;likes&quot; : 100 &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
<h2 id="MongoDB-lt-小于操作符-lt"><a href="#MongoDB-lt-小于操作符-lt" class="headerlink" title="MongoDB (&lt;) 小于操作符 - $lt"></a>MongoDB (&lt;) 小于操作符 - $lt</h2><p>如果你想获取”col”集合中 “likes” 小于 150 的数据，你可以使用以下命令：<br><code>db.col.find({likes : {$lt : 150}})</code><br>类似于SQL语句：<br><code>Select * from col where likes &lt; 150;</code><br>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; db.col.find(&#123;likes : &#123;$lt : 150&#125;&#125;)</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5606654fade2f21f36b0313c&quot;), &quot;title&quot; : &quot;MongoDB 教程&quot;, &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;mongodb&quot; ], &quot;likes&quot; : 100 &#125;</div></pre></td></tr></table></figure></p>
<h2 id="MongoDB-lt-小于操作符-lte"><a href="#MongoDB-lt-小于操作符-lte" class="headerlink" title="MongoDB (&lt;=) 小于操作符 - $lte"></a>MongoDB (&lt;=) 小于操作符 - $lte</h2><p>如果你想获取”col”集合中 “likes” 小于等于 150 的数据，你可以使用以下命令：<br><code>db.col.find({likes : {$lte : 150}})</code><br>类似于SQL语句：<br><code>Select * from col where likes &lt;= 150;</code><br>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; db.col.find(&#123;likes : &#123;$lte : 150&#125;&#125;)</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;56066549ade2f21f36b0313b&quot;), &quot;title&quot; : &quot;Java 教程&quot;, &quot;description&quot; : &quot;Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;java&quot; ], &quot;likes&quot; : 150 &#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5606654fade2f21f36b0313c&quot;), &quot;title&quot; : &quot;MongoDB 教程&quot;, &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;mongodb&quot; ], &quot;likes&quot; : 100 &#125;</div></pre></td></tr></table></figure></p>
<h2 id="MongoDB-使用-lt-和-gt-查询-lt-和-gt"><a href="#MongoDB-使用-lt-和-gt-查询-lt-和-gt" class="headerlink" title="MongoDB 使用 (&lt;) 和 (&gt;) 查询 - $lt 和 $gt"></a>MongoDB 使用 (&lt;) 和 (&gt;) 查询 - $lt 和 $gt</h2><p>如果你想获取”col”集合中 “likes” 大于100，小于 200 的数据，你可以使用以下命令：<br><code>db.col.find({likes : {$lt :200, $gt : 100}})</code><br>类似于SQL语句:<br><code>Select * from col where likes&gt;100 AND  likes&lt;200;</code><br>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; db.col.find(&#123;likes : &#123;$lt :200, $gt : 100&#125;&#125;)</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;56066549ade2f21f36b0313b&quot;), &quot;title&quot; : &quot;Java 教程&quot;, &quot;description&quot; : &quot;Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;java&quot; ], &quot;likes&quot; : 150 &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
<h1 id="type-操作符"><a href="#type-操作符" class="headerlink" title="$type 操作符"></a>$type 操作符</h1><p>$type操作符是基于BSON类型来检索集合中匹配的数据类型，并返回结果。<br>$type操作符是基于BSON类型来检索集合中匹配的数据类型，并返回结果。<br>MongoDB 中可以使用的类型如下表所示：<br>|类型|数字|备注|<br>|—|—|—|<br>| Double | 1 ||<br>| String | 2 |<br>| Object | 3||<br>| Array | 4||<br>| Binary data | 5 ||<br>| Undefined | 6 | 已废弃。|<br>| Object id |  7| |<br>| Boolean | 8 |<br>| Date | 9 | |<br>| Null | 10| |<br>| Regular Expression | 11||<br>| JavaScript | 13 | |<br>| Symbol | 14 | |<br>| JavaScript (with scope) | 15 |<br>| 32-bit integer | 16 ||<br>| Timestamp |  17 ||<br>| 64-bit integer | 18 |<br>| Min key | 255 | Query with -1.|<br>| Max key | 127 |</p>
<h2 id="实例-9"><a href="#实例-9" class="headerlink" title="实例"></a>实例</h2><p>如果想获取 “col” 集合中 title 为 String 的数据，你可以使用以下命令：<br><code>db.col.find({&quot;title&quot; : {$type : 2}})</code></p>
<h1 id="MongoDB-Limit与Skip方法"><a href="#MongoDB-Limit与Skip方法" class="headerlink" title="MongoDB Limit与Skip方法"></a>MongoDB Limit与Skip方法</h1><h2 id="MongoDB-Limit-方法"><a href="#MongoDB-Limit-方法" class="headerlink" title="MongoDB Limit() 方法"></a>MongoDB Limit() 方法</h2><p>如果你需要在MongoDB中读取指定数量的数据记录，可以使用MongoDB的Limit方法，limit()方法接受一个数字参数，该参数指定从MongoDB中读取的记录条数。</p>
<h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><p><code>db.COLLECTION_NAME.find().limit(NUMBER)</code><br>注：如果你们没有指定limit()方法中的参数则显示集合中的所有数据。</p>
<h3 id="实例-10"><a href="#实例-10" class="headerlink" title="实例"></a>实例</h3><p>集合 col 中的数据如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;56066542ade2f21f36b0313a&quot;), &quot;title&quot; : &quot;PHP 教程&quot;, &quot;description&quot; : &quot;PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;php&quot; ], &quot;likes&quot; : 200 &#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;56066549ade2f21f36b0313b&quot;), &quot;title&quot; : &quot;Java 教程&quot;, &quot;description&quot; : &quot;Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;java&quot; ], &quot;likes&quot; : 150 &#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5606654fade2f21f36b0313c&quot;), &quot;title&quot; : &quot;MongoDB 教程&quot;, &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;mongodb&quot; ], &quot;likes&quot; : 100 &#125;</div></pre></td></tr></table></figure></p>
<p>以下实例为显示查询文档中的两条记录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; db.col.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).limit(2)</div><div class="line">&#123; &quot;title&quot; : &quot;PHP 教程&quot; &#125;</div><div class="line">&#123; &quot;title&quot; : &quot;Java 教程&quot; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
<h2 id="MongoDB-Skip-方法"><a href="#MongoDB-Skip-方法" class="headerlink" title="MongoDB Skip() 方法"></a>MongoDB Skip() 方法</h2><p>我们除了可以使用limit()方法来读取指定数量的数据外，还可以使用skip()方法来跳过指定数量的数据，skip方法同样接受一个数字参数作为跳过的记录条数。</p>
<h3 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h3><p><code>db.COLLECTION_NAME.find().limit(NUMBER).skip(NUMBER)</code></p>
<h3 id="实例-11"><a href="#实例-11" class="headerlink" title="实例"></a>实例</h3><p>以上实例只会显示第二条文档数据:注:skip()方法默认参数为 0 。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt;db.col.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).limit(1).skip(1)</div><div class="line">&#123; &quot;title&quot; : &quot;Java 教程&quot; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
<p>注:skip()方法默认参数为 0 。</p>
<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="MongoDB-sort-方法"><a href="#MongoDB-sort-方法" class="headerlink" title="MongoDB sort()方法"></a>MongoDB sort()方法</h2><h3 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h3><p><code>db.COLLECTION_NAME.find().sort({KEY:1})</code></p>
<h3 id="实例-12"><a href="#实例-12" class="headerlink" title="实例"></a>实例</h3><p>col 集合中的数据如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;56066542ade2f21f36b0313a&quot;), &quot;title&quot; : &quot;PHP 教程&quot;, &quot;description&quot; : &quot;PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;php&quot; ], &quot;likes&quot; : 200 &#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;56066549ade2f21f36b0313b&quot;), &quot;title&quot; : &quot;Java 教程&quot;, &quot;description&quot; : &quot;Java 是由Sun Microsystems公司于1995年5月推出的高级程序设计语言。&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;java&quot; ], &quot;likes&quot; : 150 &#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5606654fade2f21f36b0313c&quot;), &quot;title&quot; : &quot;MongoDB 教程&quot;, &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;, &quot;by&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;http://www.runoob.com&quot;, &quot;tags&quot; : [ &quot;mongodb&quot; ], &quot;likes&quot; : 100 &#125;</div></pre></td></tr></table></figure></p>
<p>以下实例演示了 col 集合中的数据按字段 likes 的降序排列：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;db.col.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).sort(&#123;&quot;likes&quot;:-1&#125;)</div><div class="line">&#123; &quot;title&quot; : &quot;PHP 教程&quot; &#125;</div><div class="line">&#123; &quot;title&quot; : &quot;Java 教程&quot; &#125;</div><div class="line">&#123; &quot;title&quot; : &quot;MongoDB 教程&quot; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
<p>注： 如果没有指定sort()方法的排序方式，默认按照文档的升序排列。</p>
<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>索引通常能够极大的提高查询的效率，如果没有索引，MongoDB在读取数据时必须扫描集合中的每个文件并选取那些符合查询条件的记录。</p>
<p>这种扫描全集合的查询效率是非常低的，特别在处理大量的数据时，查询可以要花费几十秒甚至几分钟，这对网站的性能是非常致命的。</p>
<p>索引是特殊的数据结构，索引存储在一个易于遍历读取的数据集合中，索引是对数据库表中一列或多列的值进行排序的一种结构</p>
<h2 id="ensureIndex-方法"><a href="#ensureIndex-方法" class="headerlink" title="ensureIndex() 方法"></a>ensureIndex() 方法</h2><h3 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h3><p><code>db.COLLECTION_NAME.ensureIndex({KEY:1})</code><br>语法中 Key 值为你要创建的索引字段，1为指定按升序创建索引，如果你想按降序来创建索引指定为-1即可。<br>ensureIndex() 方法中你也可以设置使用多个字段创建索引（关系型数据库中称作复合索引）。<br>ensureIndex() 接收可选参数，可选参数列表如下：<br>| Parameter  | Type  |  Description |<br>| ———- |——-| ————-|<br>| background | Boolean | 建索引过程会阻塞其它数据库操作，background可指定以后台方式创建索引，即增加 “background” 可选参数。 “background” 默认值为false。|<br>| unique | Boolean | 建立的索引是否唯一。指定为true创建唯一索引。默认值为false.|<br>| name  | string |索引的名称。如果未指定，MongoDB的通过连接索引的字段名和排序顺序生成一个索引名称。|<br>| dropDups  |  Boolean  |在建立唯一索引时是否删除重复记录,指定 true 创建唯一索引。默认值为 false. |<br>| sparse | Boolean | 对文档中不存在的字段数据不启用索引；这个参数需要特别注意，如果设置为true的话，在索引字段中不会查询出不包含对应字段的文档.。默认值为 false.|<br>| expireAfterSeconds | integer 指定一个以秒为单位的数值，完成 TTL设定，设定集合的生存时间。|<br>| v | index version | 索引的版本号。默认的索引版本取决于mongod创建索引时运行的版本。|<br>| weights | document |  索引权重值，数值在 1 到 99,999 之间，表示该索引相对于其他索引字段的得分权重。|<br>| default_language | string | 对于文本索引，该参数决定了停用词及词干和词器的规则的列表。 默认为英语 |<br>| language_override | string |对于文本索引，该参数指定了包含在文档中的字段名，语言覆盖默认的language，默认值为 language. |</p>
<h3 id="实例-13"><a href="#实例-13" class="headerlink" title="实例"></a>实例</h3><p>在后台创建索引：<br><code>db.values.ensureIndex({open: 1, close: 1}, {background: true})</code><br>通过在创建索引时加background:true 的选项，让创建工作在后台执行</p>
<h1 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h1><p>MongoDB中聚合(aggregate)主要用于处理数据(诸如统计平均值,求和等)，并返回计算后的数据结果。有点类似sql语句中的 count(*)。</p>
<h2 id="aggregate-方法"><a href="#aggregate-方法" class="headerlink" title="aggregate() 方法"></a>aggregate() 方法</h2><h3 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h3><p><code>&gt;db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)</code></p>
<h3 id="实例-14"><a href="#实例-14" class="headerlink" title="实例"></a>实例</h3><p>集合中的数据如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   _id: ObjectId(7df78ad8902c)</div><div class="line">   title: &apos;MongoDB Overview&apos;, </div><div class="line">   description: &apos;MongoDB is no sql database&apos;,</div><div class="line">   by_user: &apos;w3cschool.cc&apos;,</div><div class="line">   url: &apos;http://www.w3cschool.cc&apos;,</div><div class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</div><div class="line">   likes: 100</div><div class="line">&#125;,</div><div class="line">&#123;</div><div class="line">   _id: ObjectId(7df78ad8902d)</div><div class="line">   title: &apos;NoSQL Overview&apos;, </div><div class="line">   description: &apos;No sql database is very fast&apos;,</div><div class="line">   by_user: &apos;w3cschool.cc&apos;,</div><div class="line">   url: &apos;http://www.w3cschool.cc&apos;,</div><div class="line">   tags: [&apos;mongodb&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</div><div class="line">   likes: 10</div><div class="line">&#125;,</div><div class="line">&#123;</div><div class="line">   _id: ObjectId(7df78ad8902e)</div><div class="line">   title: &apos;Neo4j Overview&apos;, </div><div class="line">   description: &apos;Neo4j is no sql database&apos;,</div><div class="line">   by_user: &apos;Neo4j&apos;,</div><div class="line">   url: &apos;http://www.neo4j.com&apos;,</div><div class="line">   tags: [&apos;neo4j&apos;, &apos;database&apos;, &apos;NoSQL&apos;],</div><div class="line">   likes: 750</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<p>现在我们通过以上集合计算每个作者所写的文章数，使用aggregate()计算结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&gt; db.mycol.aggregate([&#123;$group : &#123;_id : &quot;$by_user&quot;, num_tutorial : &#123;$sum : 1&#125;&#125;&#125;])</div><div class="line">&#123;</div><div class="line">   &quot;result&quot; : [</div><div class="line">      &#123;</div><div class="line">         &quot;_id&quot; : &quot;w3cschool.cc&quot;,</div><div class="line">         &quot;num_tutorial&quot; : 2</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">         &quot;_id&quot; : &quot;Neo4j&quot;,</div><div class="line">         &quot;num_tutorial&quot; : 1</div><div class="line">      &#125;</div><div class="line">   ],</div><div class="line">   &quot;ok&quot; : 1</div><div class="line">&#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
<p>以上实例类似sql语句： select by_user, count(*) from mycol group by by_user</p>
<p>在上面的例子中，我们通过字段by_user字段对数据进行分组，并计算by_user字段相同值的总和。<br>下表展示了一些聚合的表达式:<br>| 表达式 | 描述 | 实例 |<br>| — | — | — |<br>| $sum  |  计算总和。| db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$sum : “$likes”}}}])|<br>| $avg  |  计算平均值 |  db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$avg : “$likes”}}}])|<br>| $min  |  获取集合中所有文档对应值得最小值。| db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$min : “$likes”}}}])|<br>| $max  |  获取集合中所有文档对应值得最大值。|db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$max : “$likes”}}}]) |<br>| $push |  在结果文档中插入值到一个数组中。| db.mycol.aggregate([{$group : {_id : “$by_user”, url : {$push: “$url”}}}])|<br>| $addToSet  | 在结果文档中插入值到一个数组中，但不创建副本。| db.mycol.aggregate([{$group : {_id : “$by_user”, url : {$addToSet : “$url”}}}])|<br>| $first | 根据资源文档的排序获取第一个文档数据。| db.mycol.aggregate([{$group : {_id : “$by_user”, first_url : {$first : “$url”}}}])|<br>| $last |  根据资源文档的排序获取最后一个文档数据| db.mycol.aggregate([{$group : {_id : “$by_user”, last_url : {$last : “$url”}}}])|</p>
<h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p>管道在Unix和Linux中一般用于将当前命令的输出结果作为下一个命令的参数。</p>
<p>MongoDB的聚合管道将MongoDB文档在一个管道处理完毕后将结果传递给下一个管道处理。管道操作是可以重复的。</p>
<p>表达式：处理输入文档并输出。表达式是无状态的，只能用于计算当前聚合管道的文档，不能处理其它的文档。</p>
<p>这里我们介绍一下聚合框架中常用的几个操作：</p>
<blockquote>
<p>$project：修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。<br>$match：用于过滤数据，只输出符合条件的文档。$match使用MongoDB的标准查询操作。<br>$limit：用来限制MongoDB聚合管道返回的文档数。<br>$skip：在聚合管道中跳过指定数量的文档，并返回余下的文档。<br>$unwind：将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。<br>$group：将集合中的文档分组，可用于统计结果。<br>$sort：将输入文档排序后输出。<br>$geoNear：输出接近某一地理位置的有序文档。</p>
</blockquote>
<h3 id="管道操作符实例"><a href="#管道操作符实例" class="headerlink" title="管道操作符实例"></a>管道操作符实例</h3><p>1、$project实例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">db.article.aggregate(</div><div class="line">    &#123; $project : &#123;</div><div class="line">        title : 1 ,</div><div class="line">        author : 1 ,</div><div class="line">    &#125;&#125;</div><div class="line"> );</div></pre></td></tr></table></figure></p>
<p>这样的话结果中就只还有_id,tilte和author三个字段了，默认情况下_id字段是被包含的，如果要想不包含_id话可以这样:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">db.article.aggregate(</div><div class="line">    &#123; $project : &#123;</div><div class="line">        _id : 0 ,</div><div class="line">        title : 1 ,</div><div class="line">        author : 1</div><div class="line">    &#125;&#125;);</div></pre></td></tr></table></figure></p>
<p>2.$match实例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">db.articles.aggregate( [</div><div class="line">                        &#123; $match : &#123; score : &#123; $gt : 70, $lte : 90 &#125; &#125; &#125;,</div><div class="line">                        &#123; $group: &#123; _id: null, count: &#123; $sum: 1 &#125; &#125; &#125;</div><div class="line">                       ] );</div></pre></td></tr></table></figure></p>
<p>$match用于获取分数大于70小于或等于90记录，然后将符合条件的记录送到下一阶段$group管道操作符进行处理。</p>
<p>3.$skip实例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">db.article.aggregate(</div><div class="line">    &#123; $skip : 5 &#125;);</div></pre></td></tr></table></figure></p>
<p>经过$skip管道操作符处理后，前五个文档被”过滤”掉。</p>
<h1 id="复制-副本集"><a href="#复制-副本集" class="headerlink" title="复制(副本集)"></a>复制(副本集)</h1><p>MongoDB复制是将数据同步在多个服务器的过程。<br>复制提供了数据的冗余备份，并在多个服务器上存储数据副本，提高了数据的可用性， 并可以保证数据的安全性。<br>复制还允许您从硬件故障和服务中断中恢复数据。</p>
<h2 id="什么是复制"><a href="#什么是复制" class="headerlink" title="什么是复制?"></a>什么是复制?</h2><p>保障数据的安全性<br>数据高可用性 (24*7)<br>灾难恢复<br>无需停机维护（如备份，重建索引，压缩）<br>分布式读取数据<br>MongoDB复制原理<br>mongodb的复制至少需要两个节点。其中一个是主节点，负责处理客户端请求，其余的都是从节点，负责复制主节点上的数据。</p>
<p>mongodb各个节点常见的搭配方式为：<strong>一主一从、一主多从。</strong></p>
<p>主节点记录在其上的所有操作oplog，从节点定期轮询主节点获取这些操作，然后对自己的数据副本执行这些操作，从而保证从节点的数据与主节点一致。</p>
<p>MongoDB复制结构图：</p>
<p>以上结构图总，客户端总主节点读取数据，在客户端写入数据到主节点是， 主节点与从节点进行数据交互保障数据的一致性。</p>
<h2 id="副本集特征"><a href="#副本集特征" class="headerlink" title="副本集特征"></a>副本集特征</h2><ol>
<li>N 个节点的集群</li>
<li>任何节点可作为主节点</li>
<li>所有写入操作都在主节点上</li>
<li>自动故障转移</li>
<li>自动恢复</li>
</ol>
<h2 id="MongoDB副本集设置"><a href="#MongoDB副本集设置" class="headerlink" title="MongoDB副本集设置"></a>MongoDB副本集设置</h2><p>在本教程中我们使用同一个MongoDB来做MongoDB主从的实验， 操作步骤如下：</p>
<p>1、关闭正在运行的MongoDB服务器。<br>现在我们通过指定 –replSet 选项来启动mongoDB。–replSet 基本语法格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod --port &quot;PORT&quot; --dbpath &quot;YOUR_DB_DATA_PATH&quot; --replSet &quot;REPLICA_SET_INSTANCE_NAME&quot;</div></pre></td></tr></table></figure></p>
<h3 id="实例-15"><a href="#实例-15" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod --port 27017 --dbpath &quot;D:\set up\mongodb\data&quot; --replSet rs0</div></pre></td></tr></table></figure>
<p>以上实例会启动一个名为rs0的MongoDB实例，其端口号为27017。<br>启动后打开命令提示框并连接上mongoDB服务。<br>在Mongo客户端使用命令rs.initiate()来启动一个新的副本集。<br>我们可以使用rs.conf()来查看副本集的配置<br>查看副本集姿态使用 rs.status() 命令</p>
<h2 id="副本集添加成员"><a href="#副本集添加成员" class="headerlink" title="副本集添加成员"></a>副本集添加成员</h2><p>添加副本集的成员，我们需要使用多条服务器来启动mongo服务。进入Mongo客户端，并使用rs.add()方法来添加副本集的成员。</p>
<h2 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h2><p>rs.add() 命令基本语法格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;rs.add(HOST_NAME:PORT)</div></pre></td></tr></table></figure></p>
<h2 id="实例-16"><a href="#实例-16" class="headerlink" title="实例"></a>实例</h2><p>假设你已经启动了一个名为mongod1.net，端口号为27017的Mongo服务。 在客户端命令窗口使用rs.add() 命令将其添加到副本集中，命令如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rs.add(&quot;mongod1.net:27017&quot;)</div></pre></td></tr></table></figure></p>
<p>MongoDB中你只能通过主节点将Mongo服务添加到副本集中， 判断当前运行的Mongo服务是否为主节点可以使用命令db.isMaster() 。</p>
<p>MongoDB的副本集与我们常见的主从有所不同，主从在主机宕机后所有服务将停止，而副本集在主机宕机后，副本会接管主节点成为主节点，不会出现宕机的情况。</p>
<h1 id="分片"><a href="#分片" class="headerlink" title="分片"></a>分片</h1><p><img src="images/MongoDB-sharding.png" alt="MongoDB分片集群结构分布"></p>
<p>上图中主要有如下所述的三个主要组件:</p>
<ol>
<li><strong>Shard</strong><br>用于存储实际的数据块,实际生产环境中一个 shard server 角色,可由几台机器组合一个 relica set 承担,防止主机单点故障.</li>
<li><strong>Config Server</strong><br>mongod 实例,存储了整个 ClusterMetadata,其中包括 chunk 信息.</li>
<li><strong>Query Routers</strong><br>前端路由,客户端由此接入,且让整个集群看上去像单一数据库,前端应用可以透明使用.</li>
</ol>
<h2 id="分片实例"><a href="#分片实例" class="headerlink" title="分片实例"></a>分片实例</h2><p>分片结构端口分布如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Shard Server 1：27020</div><div class="line">Shard Server 2：27021</div><div class="line">Shard Server 3：27022</div><div class="line">Shard Server 4：27023</div><div class="line">Config Server ：27100</div><div class="line">Route Process：40000</div></pre></td></tr></table></figure></p>
<p>步骤一：启动Shard Server<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@100 /]# mkdir -p /www/mongoDB/shard/s0</div><div class="line">[root@100 /]# mkdir -p /www/mongoDB/shard/s1</div><div class="line">[root@100 /]# mkdir -p /www/mongoDB/shard/s2</div><div class="line">[root@100 /]# mkdir -p /www/mongoDB/shard/s3</div><div class="line">[root@100 /]# mkdir -p /www/mongoDB/shard/log</div><div class="line">[root@100 /]# /usr/local/mongoDB/bin/mongod --port 27020 --dbpath=/www/mongoDB/shard/s0 --logpath=/www/mongoDB/shard/log/s0.log --logappend --fork</div><div class="line">....</div><div class="line">[root@100 /]# /usr/local/mongoDB/bin/mongod --port 27023 --dbpath=/www/mongoDB/shard/s3 --logpath=/www/mongoDB/shard/log/s3.log --logappend --fork</div></pre></td></tr></table></figure></p>
<p>步骤二： 启动Config Server<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@100 /]# mkdir -p /www/mongoDB/shard/config</div><div class="line">[root@100 /]# /usr/local/mongoDB/bin/mongod --port 27100 --dbpath=/www/mongoDB/shard/config --logpath=/www/mongoDB/shard/log/config.log --logappend --fork</div><div class="line">注意：这里我们完全可以像启动普通mongodb服务一样启动，不需要添加—shardsvr和configsvr参数。因为这两个参数的作用就是改变启动端口的，所以我们自行指定了端口就可以。</div></pre></td></tr></table></figure></p>
<p>步骤三： 启动Route Process<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/usr/local/mongoDB/bin/mongos --port 40000 --configdb localhost:27100 --fork --logpath=/www/mongoDB/shard/log/route.log --chunkSize 500</div><div class="line">mongos启动参数中，chunkSize这一项是用来指定chunk的大小的，单位是MB，默认大小为200MB.</div></pre></td></tr></table></figure></p>
<p>步骤四： 配置Sharding<br>接下来，我们使用MongoDB Shell登录到mongos，添加Shard节点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[root@100 shard]# /usr/local/mongoDB/bin/mongo admin --port 40000</div><div class="line">MongoDB shell version: 2.0.7</div><div class="line">connecting to: 127.0.0.1:40000/admin</div><div class="line">mongos&gt; db.runCommand(&#123; addshard:&quot;localhost:27020&quot; &#125;)</div><div class="line">&#123; &quot;shardAdded&quot; : &quot;shard0000&quot;, &quot;ok&quot; : 1 &#125;</div><div class="line">......</div><div class="line">mongos&gt; db.runCommand(&#123; addshard:&quot;localhost:27029&quot; &#125;)</div><div class="line">&#123; &quot;shardAdded&quot; : &quot;shard0009&quot;, &quot;ok&quot; : 1 &#125;</div><div class="line">mongos&gt; db.runCommand(&#123; enablesharding:&quot;test&quot; &#125;) #设置分片存储的数据库</div><div class="line">&#123; &quot;ok&quot; : 1 &#125;</div><div class="line">mongos&gt; db.runCommand(&#123; shardcollection: &quot;test.log&quot;, key: &#123; id:1,time:1&#125;&#125;)</div><div class="line">&#123; &quot;collectionsharded&quot; : &quot;test.log&quot;, &quot;ok&quot; : 1 &#125;</div><div class="line">步骤五： 程序代码内无需太大更改，直接按照连接普通的mongo数据库那样，将数据库连接接入接口40000</div></pre></td></tr></table></figure></p>
<h1 id="备份与恢复"><a href="#备份与恢复" class="headerlink" title="备份与恢复"></a>备份与恢复</h1><h2 id="MongoDB数据备份"><a href="#MongoDB数据备份" class="headerlink" title="MongoDB数据备份"></a>MongoDB数据备份</h2><p>在Mongodb中我们使用mongodump命令来备份MongoDB数据。该命令可以导出所有数据到指定目录中。</p>
<p>mongodump命令可以通过参数指定导出的数据量级转存的服务器。</p>
<h3 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h3><p>mongodump命令脚本语法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;mongodump -h dbhost -d dbname -o dbdirectory</div></pre></td></tr></table></figure></p>
<blockquote>
<p>-h：<br>MongDB所在服务器地址，例如：127.0.0.1，当然也可以指定端口号：127.0.0.1:27017</p>
<p>-d：<br>需要备份的数据库实例，例如：test</p>
<p>-o：<br>备份的数据存放位置，例如：c:\data\dump，当然该目录需要提前建立，在备份完成后，系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。</p>
</blockquote>
<h3 id="实例-17"><a href="#实例-17" class="headerlink" title="实例"></a>实例</h3><p>在本地使用 27017 启动你的mongod服务。打开命令提示符窗口，进入MongoDB安装目录的bin目录输入命令mongodump:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;mongodump</div></pre></td></tr></table></figure></p>
<p>执行以上命令后，客户端会连接到ip为 127.0.0.1 端口号为 27017 的MongoDB服务上，并备份所有数据到 bin/dump/ 目录中。</p>
<p>mongodump 命令可选参数列表如下所示：</p>
<table>
<thead>
<tr>
<th>语法</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody>
<tr>
<td>mongodump –host HOST_NAME –port PORT_NUMBER</td>
<td>该命令将备份所有MongoDB数据</td>
<td>mongodump –host w3cschool.cc –port 27017</td>
</tr>
<tr>
<td>mongodump –dbpath DB_PATH –out BACKUP_DIRECTORY</td>
<td></td>
<td>mongodump –dbpath /data/db/ –out /data/backup/</td>
</tr>
<tr>
<td>mongodump –collection COLLECTION –db DB_NAME</td>
<td>该命令将备份指定数据库的集合。</td>
<td>mongodump –dbpath /data/db/ –out /data/backup/</td>
</tr>
</tbody>
</table>
<h2 id="MongoDB数据恢复"><a href="#MongoDB数据恢复" class="headerlink" title="MongoDB数据恢复"></a>MongoDB数据恢复</h2><p>mongodb使用 mongorerstore 命令来恢复备份的数据。</p>
<h3 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h3><p>mongorestore命令脚本语法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt;mongorestore -h dbhost -d dbname --directoryperdb dbdirectory</div></pre></td></tr></table></figure></p>
<blockquote>
<p>-h：<br>MongoDB所在服务器地址</p>
<p>-d：<br>需要恢复的数据库实例，例如：test，当然这个名称也可以和备份时候的不一样，比如test2</p>
<p>–directoryperdb：<br>备份数据所在位置，例如：c:\data\dump\test，这里为什么要多加一个test，而不是备份时候的dump，读者自己查看提示吧！</p>
<p>–drop：<br>恢复的时候，先删除当前数据，然后恢复备份的数据。就是说，恢复后，备份后添加修改的数据都会被删除，慎用哦！</p>
</blockquote>
<p>接下来我们执行以下命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongorestore</div></pre></td></tr></table></figure></p>
<h1 id="Mongodb-高级教程"><a href="#Mongodb-高级教程" class="headerlink" title="Mongodb 高级教程"></a>Mongodb 高级教程</h1><h2 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h2><h2 id="数据库引用"><a href="#数据库引用" class="headerlink" title="数据库引用"></a>数据库引用</h2><h2 id="覆盖索引查询"><a href="#覆盖索引查询" class="headerlink" title="覆盖索引查询"></a>覆盖索引查询</h2><h2 id="查询分析"><a href="#查询分析" class="headerlink" title="查询分析"></a>查询分析</h2><h2 id="原子操作"><a href="#原子操作" class="headerlink" title="原子操作"></a>原子操作</h2><h2 id="高级索引"><a href="#高级索引" class="headerlink" title="高级索引"></a>高级索引</h2><h2 id="ObjectId"><a href="#ObjectId" class="headerlink" title="ObjectId"></a>ObjectId</h2><h2 id="Map-Reduce"><a href="#Map-Reduce" class="headerlink" title="Map Reduce"></a>Map Reduce</h2><h2 id="全文检索"><a href="#全文检索" class="headerlink" title="全文检索"></a>全文检索</h2><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h2 id="管理工具"><a href="#管理工具" class="headerlink" title="管理工具"></a>管理工具</h2><h2 id="GridFS"><a href="#GridFS" class="headerlink" title="GridFS"></a>GridFS</h2><h2 id="固定集合"><a href="#固定集合" class="headerlink" title="固定集合"></a>固定集合</h2><h2 id="自动增长"><a href="#自动增长" class="headerlink" title="自动增长"></a>自动增长</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript设计模式]]></title>
      <url>http://zy380196088.github.io./2017/03/04/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><a id="more"></a>
<h1 id="面向过程与面向对象"><a href="#面向过程与面向对象" class="headerlink" title="面向过程与面向对象"></a>面向过程与面向对象</h1><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><h3 id="创建一个类"><a href="#创建一个类" class="headerlink" title="创建一个类"></a>创建一个类</h3><p>首先声明一个函数保存在一个变量里(一般将首字母大写).<br>然后在这个函数(类)内部通过 this 添加属性或者方法来实现对类添加属性活着方法:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Book = <span class="function"><span class="keyword">function</span>(<span class="params">id, bookName, price</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.id = id ;</div><div class="line">    <span class="keyword">this</span>.bookName = bookName;</div><div class="line">    <span class="keyword">this</span>.price = price;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>也可以通过在类的原型上添加属性和方法.有如下两种方式:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//方法一:为原型对象属性赋值</span></div><div class="line">Book.prototype.display = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//方法二:将一个对象赋值给类的原型对象</span></div><div class="line">Book.prototype = &#123;</div><div class="line">    <span class="attr">display</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><p>constructor 是一个属性,当创建一个函数或者对象时都会为其创建一个原型对象 prototype,<br>在 prototype 对象中又会像函数中创建 this 一样创建一个 constructor 属性,<br>那么constructor 属性指向的就是拥有整个源性对象的函数或对象.</p>
<h3 id="私有属性-私有方法"><a href="#私有属性-私有方法" class="headerlink" title="私有属性 私有方法"></a>私有属性 私有方法</h3><p>由于JavaScript的函数级作用域,生命在函数内部的变量以及方法在外界是访问不到的.<br>通过此特性即可创建类的私有变量以及私有方法.然而在函数内部通过 this 创建的属性和方法,在类创建对象时,每个对象自身都拥有一份并且可以在外部访问的到.<br>因此,通过 this 创建的属性可以看做是对象共有的属性和公有方法.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Book = <span class="function"><span class="keyword">function</span>(<span class="params">id,name,price</span>)</span>&#123;</div><div class="line">    <span class="comment">//私有属性</span></div><div class="line">    <span class="keyword">var</span> num = <span class="number">1</span>;</div><div class="line">    <span class="comment">//私有方法</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkId</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">//...</span></div><div class="line">    &#125;;</div><div class="line">    <span class="comment">//特权方法</span></div><div class="line">    <span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">    <span class="keyword">this</span>.getPrice = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">    <span class="keyword">this</span>.setName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">    <span class="keyword">this</span>.setPrice = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">    <span class="comment">//对象共有属性</span></div><div class="line">    <span class="keyword">this</span>.id = id;</div><div class="line">    <span class="comment">//对象公有方法</span></div><div class="line">    <span class="keyword">this</span>.copy = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line"></div><div class="line">    <span class="comment">//构造器</span></div><div class="line">    <span class="keyword">this</span>.setName(name);</div><div class="line">    <span class="keyword">this</span>.setPrie(price);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>我们时常将累得静态变量通过闭包来实现:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Book = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//静态私有变量</span></div><div class="line">    <span class="keyword">var</span> bookNum = <span class="number">0</span>;</div><div class="line">    <span class="comment">//静态私有方法</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkBook</span> (<span class="params">name</span>)</span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="comment">//返回构造函数</span></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">newId,newName , newPrice</span>)</span>&#123;</div><div class="line">        <span class="comment">//私有变量</span></div><div class="line">        <span class="keyword">var</span> name , price;</div><div class="line">        <span class="comment">//私有方法</span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">checkID</span>(<span class="params">id</span>)</span>&#123;&#125;</div><div class="line">        <span class="comment">//特权方法</span></div><div class="line">        <span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">        <span class="keyword">this</span>.getPrice = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">        <span class="keyword">this</span>.setName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">        <span class="keyword">this</span>.setPrice = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">        <span class="comment">//对象共有属性</span></div><div class="line">        <span class="keyword">this</span>.id = newId;</div><div class="line">        <span class="comment">//公有方法</span></div><div class="line">        <span class="keyword">this</span>.copy = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">        <span class="comment">//构造器</span></div><div class="line">        <span class="keyword">this</span>.setName(name);</div><div class="line">        <span class="keyword">this</span>.setPrice(price);</div><div class="line">    &#125;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line">Book.prototype = &#123;</div><div class="line">    <span class="attr">isJSBook</span> :<span class="literal">false</span>,</div><div class="line">    <span class="attr">display</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="找位监察-创建对象的安全模式"><a href="#找位监察-创建对象的安全模式" class="headerlink" title="找位监察 - 创建对象的安全模式"></a>找位监察 - 创建对象的安全模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//图书安全类</span></div><div class="line"><span class="keyword">var</span> Book = <span class="function"><span class="keyword">function</span>(<span class="params">title,time ,type</span>)</span>&#123;</div><div class="line">    <span class="comment">//判断执行过程中 this 是否是当前这个对象(如果是说明是用 new 创建的)</span></div><div class="line">    <span class="keyword">if</span>(<span class="keyword">this</span> <span class="keyword">instanceof</span> Book)&#123;</div><div class="line">        <span class="keyword">this</span>.title = title ;</div><div class="line">        <span class="keyword">this</span>.time = time;</div><div class="line">        <span class="keyword">this</span>.type = type;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="comment">//否则重新创建这个对象</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Book(title,time,type);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> book = Book(<span class="string">'JavaScript'</span>,<span class="string">'2014'</span>,<span class="string">'js'</span>);</div></pre></td></tr></table></figure>
<h2 id="传宗接代-继承"><a href="#传宗接代-继承" class="headerlink" title="传宗接代-继承"></a>传宗接代-继承</h2><h3 id="子类的原型对象-类式继承"><a href="#子类的原型对象-类式继承" class="headerlink" title="子类的原型对象 - 类式继承"></a>子类的原型对象 - 类式继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//声明父类</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperClass</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.superValue = <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//为父类添加公有方法.</span></div><div class="line">SuperClass.prototype.getSuperValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.superValue;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//申明子类</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubClass</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.subValue = <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//继承父类</span></div><div class="line">SubClass.prototype = <span class="keyword">new</span> SuperClass();</div><div class="line"><span class="comment">//为子类添加公有方法</span></div><div class="line">SubClass.prototype.getSuperValue = <span class="function"><span class="keyword">function</span></span></div><div class="line">(<span class="params"></span>)&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.subValue;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以通过 instanceof 来检测某个对象是否是某个类的实例,或者说某个对象是否继承了某个类.<br>instanceof 通过判断对象的 prototype 链来确定这个对象是否是某个类的实例,而不关心对象与类的自身结构.</p>
<h3 id="创建即继承-构造函数继承"><a href="#创建即继承-构造函数继承" class="headerlink" title="创建即继承 - 构造函数继承"></a>创建即继承 - 构造函数继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//声明父类</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperClass</span>(<span class="params">id</span>)</span>&#123;</div><div class="line">    <span class="comment">//引用类型共有属性</span></div><div class="line">    <span class="keyword">this</span>.books = [<span class="string">'JavaScript'</span>,<span class="string">'html'</span>,<span class="string">'css'</span>];</div><div class="line">    <span class="comment">//值类型共有属性</span></div><div class="line">    <span class="keyword">this</span>.id = id;</div><div class="line">&#125;</div><div class="line"><span class="comment">//父类声明原型方法</span></div><div class="line">SuperClass.prototype.showBooks = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.book)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//申明子类</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubClass</span>(<span class="params">id</span>)</span>&#123;</div><div class="line">    <span class="comment">//继承父类</span></div><div class="line">    SuperClass.call(<span class="keyword">this</span>,id);</div><div class="line">&#125;</div><div class="line"><span class="comment">//创建子类实例</span></div><div class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubClass(<span class="number">10</span>);</div><div class="line">VAR instance2 = <span class="keyword">new</span> SubClass(<span class="number">11</span>);</div><div class="line"></div><div class="line">instancel.books.push(<span class="string">"设计模式"</span>); </div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(instance1.books);<span class="comment">//['JavaScript','html','css','设计模式']</span></div><div class="line"><span class="built_in">console</span>.log(instance1.id);<span class="comment">//10</span></div><div class="line"><span class="built_in">console</span>.log(instance2.books)<span class="comment">//['JavaScript','html','css']</span></div><div class="line"><span class="built_in">console</span>.log(instace2.id)<span class="comment">//11</span></div></pre></td></tr></table></figure>
<h3 id="将有点为我所用–组合继承"><a href="#将有点为我所用–组合继承" class="headerlink" title="将有点为我所用–组合继承"></a>将有点为我所用–组合继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//组合式继承</span></div><div class="line"><span class="comment">//申明父类</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubClass</span> (<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="comment">//值类型公有属性</span></div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="comment">//引用类型公有属性</span></div><div class="line">    <span class="keyword">this</span>.books = [<span class="string">"html"</span>,<span class="string">"css"</span>,<span class="string">"Javascript"</span>];</div><div class="line">&#125;</div><div class="line"><span class="comment">//父类原型公有方法</span></div><div class="line">SuperClass.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</div><div class="line">&#125;</div><div class="line"><span class="comment">//声明子类</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubClass</span>(<span class="params">name,time</span>)</span>&#123;</div><div class="line">    <span class="comment">//构造函数式继承父类 name 属性</span></div><div class="line">    SubClass.call(<span class="keyword">this</span>,name);</div><div class="line">    <span class="comment">//子类中新增公有属性</span></div><div class="line">    <span class="keyword">this</span>.time = time;</div><div class="line">&#125;</div><div class="line"><span class="comment">//类式继承 子类原型继承父类</span></div><div class="line">SubClass.prototype = <span class="keyword">new</span> SuperClass();</div><div class="line"><span class="comment">//子类原型方法</span></div><div class="line">SubClass.prototype.getTime = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.time)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="洁净的继承者–-原型式继承"><a href="#洁净的继承者–-原型式继承" class="headerlink" title="洁净的继承者– 原型式继承"></a>洁净的继承者– 原型式继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//原型是继承</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritObject</span>(<span class="params">o</span>)</span>&#123;</div><div class="line">    <span class="comment">//申明一个过渡函数对象</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">    <span class="comment">//过渡对象的原型继承父对象</span></div><div class="line">    F.prototype = o;</div><div class="line">    <span class="comment">//返回过渡对象的一个实例,该实例的原型继承了父对象</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="如虎添翼–寄生式继承"><a href="#如虎添翼–寄生式继承" class="headerlink" title="如虎添翼–寄生式继承"></a>如虎添翼–寄生式继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//寄生式继承</span></div><div class="line"><span class="comment">//申明对基对象</span></div><div class="line"><span class="keyword">var</span> book = &#123;</div><div class="line">    <span class="attr">name</span> : <span class="string">"js book"</span>,</div><div class="line">    <span class="attr">alikeBooks</span>:[<span class="string">"css book"</span>,<span class="string">"html book"</span>]</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createBook</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">    <span class="comment">//通过原型继承方式创建新对象</span></div><div class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> inheritObject(obj);</div><div class="line">    <span class="comment">//拓展新对象</span></div><div class="line">    o.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(name);</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">//返回拓展后的新对象</span></div><div class="line">    <span class="keyword">return</span> o;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>寄生式继承就是对原型继承的第二次封装,并且在这第二次封装过程中对继承的对象进行了拓展,这样新创建的对象不仅仅有父类中的属性和方法而且还添加新的属性和方法.</p>
<h2 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//单继承 属性复制</span></div><div class="line"><span class="keyword">var</span> extend = <span class="function"><span class="keyword">function</span>(<span class="params">target,source</span>)</span>&#123;</div><div class="line">    <span class="comment">//遍历源对象中的属性</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> property <span class="keyword">in</span> source)&#123;</div><div class="line">        <span class="comment">//将源对象中的属性复制到目标对象中</span></div><div class="line">        target[property] = source[property];</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//返回目标对象</span></div><div class="line">    <span class="keyword">return</span> target;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">function add()&#123;</div><div class="line">    //获取参数</div><div class="line">    var arg = arguments;</div><div class="line">    //获取参数长度</div><div class="line">    var len = arg.length;</div><div class="line"></div><div class="line">    switch(len)&#123;</div><div class="line">        case 0:</div><div class="line">            return &apos;null&apos;;</div><div class="line">        case 1:</div><div class="line">            return arg[0];</div><div class="line">        case 2:</div><div class="line">            return arg[0]+arg[1];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="创建型设计模式"><a href="#创建型设计模式" class="headerlink" title="创建型设计模式"></a>创建型设计模式</h1><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">//工厂模式</div><div class="line">function createBook(name , time,type)&#123;</div><div class="line">    //创建一个对象,并对对象拓展属性和方法</div><div class="line">    var o  = new Object();</div><div class="line"></div><div class="line">    o.name = name;</div><div class="line">    o.time = time;</div><div class="line">    o.type = type;</div><div class="line">    o.getName = function()&#123;</div><div class="line">        console.log(this.name);</div><div class="line">    &#125;</div><div class="line">    //将对象返回</div><div class="line">    return o;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function createPop(type,text)&#123;</div><div class="line">    var o = new Object();</div><div class="line">    o.content = text;</div><div class="line">    o.show = function()&#123;</div><div class="line">        //显示方法</div><div class="line">    &#125;</div><div class="line">    if(type  == &apos;alert&apos;)&#123;&#125;</div><div class="line">    if(type  == &apos;prompt&apos;)&#123;&#125;</div><div class="line">    if(type == &apos;confirm&apos;)&#123;&#125;</div><div class="line"></div><div class="line">    //将对象返回</div><div class="line">    return o;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//创建警示框</div><div class="line">var userNameAlert = createPop(&apos;alert&apos;,&apos;用户名只能是26个字母和数字&apos;)</div></pre></td></tr></table></figure>
<h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p>工厂方法模式本意是说将实际创建对象工作推迟到子类当中.可以将工厂发发看作是一个实例化对象的工厂类.我们可以采用安全模式类,将创建对象的基类放在工厂方法类的原型中即可.</p>
<h3 id="安全模式类"><a href="#安全模式类" class="headerlink" title="安全模式类"></a>安全模式类</h3><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Redux学习总结]]></title>
      <url>http://zy380196088.github.io./2017/02/17/Redux%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><a id="more"></a>
<h1 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h1><p>Redux 主要分为三部分: Action , Reducer , Store .</p>
<h2 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h2><p>Action 主要用于传递造作 State 的信息,例如:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">type</span>:<span class="string">'ADD_FILM'</span>,</div><div class="line">    <span class="attr">name</span>:<span class="string">'极限特工'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>type属性是必要的,一般用来表达处理 state 数据的方式.<br>但是当增加的电影越来越多时,这种直接声明的 Object就会越来越多.<br>我们可以通过函数来生产 action ,如:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addFile</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;<span class="attr">type</span>:<span class="string">'ADD_FILM'</span>,<span class="attr">name</span>:name&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a>Reducer</h2><p>Reducer 一般为简单地处理函数,通过传入旧的 state 和指示操作的 action 来更新 state,如:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">films</span> (<span class="params"> state = initialState, action</span>)</span>&#123;</div><div class="line">    <span class="keyword">switch</span> (action.type)&#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">'ADD_FILM'</span>:</div><div class="line">        <span class="comment">// 更新 state 中的 films 字段</span></div><div class="line">        <span class="keyword">return</span>[&#123;</div><div class="line">            <span class="attr">id</span>:state.films.reduce(<span class="function">(<span class="params">maxId,film</span>)=&gt;</span><span class="built_in">Math</span>.max(film.id,maxId),<span class="number">-1</span>)+<span class="number">1</span>,</div><div class="line">            <span class="attr">name</span>:action.name</div><div class="line">            &#125;,...state];</div><div class="line">        <span class="keyword">case</span> <span class="string">'DELETE_FILM'</span>:</div><div class="line">        <span class="keyword">return</span> state.films.filter(<span class="function"><span class="params">film</span>=&gt;</span> film.id !==action.id);</div><div class="line">        <span class="keyword">case</span> <span class="string">'SHOW_ALL_FILM'</span>:</div><div class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;,state,&#123;</div><div class="line">            <span class="attr">visibilityFiter</span>:action.filter</div><div class="line">            &#125;);</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">        <span class="keyword">return</span> state;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码展示了 Reducer 根据传入的 action.type 来匹配 case 进行不同的 state 更新.<br>在上面的代码中，我们可以把 ‘ADD_FILM’ 和 ‘DELETE_FILM’ 归为操作 state.films 的类，而 ‘SHOW_ALL_FILM’ 为过滤显示类，所以可以把大的 filmReducer 拆分成 filmReducer 和 filterReducer.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">filmReducer</span>(<span class="params">state =[],action</span>)</span>&#123;</div><div class="line">    <span class="keyword">switch</span>(action.type)&#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">'ADD_FILM'</span>:</div><div class="line">        <span class="comment">//更新 state 中的 films 字段</span></div><div class="line">        eturn[&#123;</div><div class="line">            <span class="attr">id</span>:state.films.reduce(<span class="function">(<span class="params">maxId,film</span>)=&gt;</span><span class="built_in">Math</span>.max(film.id,maxId),<span class="number">-1</span>)+<span class="number">1</span>,</div><div class="line">            <span class="attr">name</span>:action.name</div><div class="line">            &#125;,...state];</div><div class="line">        <span class="keyword">case</span> <span class="string">'DELETE_FILM'</span>:</div><div class="line">        <span class="keyword">return</span> state.films.filter(<span class="function"><span class="params">film</span>=&gt;</span> film.id !==action.id);</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">        <span class="keyword">return</span> state;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterReducer</span>(<span class="params">state.action</span>)</span>&#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">'SHOW_ALL_FILM'</span>:</div><div class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;,state,&#123;</div><div class="line">            <span class="attr">visibilityFiter</span>:action.filter</div><div class="line">            &#125;);</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">        <span class="keyword">return</span> state;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后,通过组合函数将上面两个 reducers 组合起来:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">rootReducer</span>(<span class="params">state=&#123;&#125;,action</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span>&#123;</div><div class="line">        <span class="attr">films</span>:filmReducer(state.films,action),</div><div class="line">        <span class="attr">filter</span>:filterReducer(state.filter,action)</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的 rootReducer 将不同部分的 state 传给对应的 reducer 处理，最终合并所有 reducer 的返回值，组成整个state。</p>
<p>Redux提供了 <strong>combineReducers()</strong>方法,用它重构上面的代码:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rootReducer = combineReducers(&#123;</div><div class="line">    <span class="attr">films</span>:filmReducer,</div><div class="line">    <span class="attr">filter</span>:filterReducer</div><div class="line">    &#125;)</div></pre></td></tr></table></figure></p>
<p>combineReducers() 将调用一系列 reducer，并根据对应的 key 来筛选出 state 中的一部分数据给相应的 reducer，这样也意味着每一个小的 reducer 将只能处理 state 的一部分数据，如：filterReducer 将只能处理及返回 state.filter 的数据，如果需要使用到其他 state 数据，那还是需要为这类 reducer 传入整个 state。</p>
<p>在 Redux 中，一个 action 可以触发多个 reducer，一个 reducer 中也可以包含多种 action.type 的处理。属于多对多的关系。</p>
<h2 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h2><p>Action 用来表达操作消息,Reducer 根据 Action 来更新 State.</p>
<p>在 Redux 项目中, Store 是单一的.维护着一个全局的 State,并且根据 Action 来进行事件分发处理 State.</p>
<p>Redux 提供了 createStore() 来生产 Store.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> store = createStore(rootReducer);</div><div class="line"><span class="comment">//rootReducer 为顶级的 Reducer</span></div></pre></td></tr></table></figure></p>
<p>store.getState()用来获取 state 数据;<br>store.subscribe(listener)用于注册监听函数.每当 state 数据更新时,将会触发监听函数.<br>store.dispatch(action)用于将一个 action 对象派发给 reducer 进行处理.</p>
<h1 id="React-Redux"><a href="#React-Redux" class="headerlink" title="React-Redux"></a>React-Redux</h1><p>Redux 并不依赖于 React, 但它更适合 由数据更新 UI 的框架(例如React).<br>React-Redux 主要提供 Connect 和 Provider 两个组件来实现上述功能;</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2016年度总结]]></title>
      <url>http://zy380196088.github.io./2016/12/31/2016%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>2016年,本命年,各种酸甜苦辣…<br>但我相信,跟着心走,一切都将朝着好的方向发展…</p>
<a id="more"></a>
<h2 id="2016年-Goodbye"><a href="#2016年-Goodbye" class="headerlink" title="2016年,Goodbye"></a>2016年,Goodbye</h2><p>2016年,也算是我人生的一个里程碑.<br>我终于结束了毕业后过的那种自由散漫的生活状态,想来想去还是不能把大学的专业扔了,决心踏入前端开发这个IT猿的分支,终于体会到了上班族朝9晚6的生活.</p>
<p>总的来说2016年是个忙碌的一年,有时候会感觉到很累.<br>虽然标题是2016年的年度总结,但我想回忆一下2014年毕业前后我的生活.</p>
<p>2013年大概是3月份,在全寝室加入考研大军的氛围下,决定跟随大流一起考研.当时也没特别大的抱负,就是12年末去上海耍了一趟,特别喜欢繁华现代的魔都,就一心想考到上海去,PASS了各种不现实的学习(我是学渣),最终选择报考华东师范大学的软件工程硕士.<br>2013年暑假我没有回家,选择了在校复习,然而就在暑假过后,我突然觉得我坚持不下去了…数学总是复习不进去,对照答案感觉懂了,一到自己做题就懵逼…<br>2014年考研成绩出来后一点也不诧异,数学差老大一截,完全没戏,然后就默默的毕业了…<br>毕业后回家两次都是为了考驾照,也没心思去找工作,平时就靠violin赚点生活费,好歹自己不至于落魄到向家里要钱.<br>9月份开始对股票萌发出浓厚的兴趣,当然不敢马上入市场,一是自己没啥钱,二是对股票一无所知.国庆节过了,活动多了收入也还不错,也不着急找工作了,平时没事就自己研究研究下股票,然后给老爸老妈交流交流(他俩老股民了,汗),记得当时还给他们推荐了不少好股票,什么中国一重,海南航空,中国铁建,万达信息等等.没想到就在这个金秋,股市爆发出一波行情,我推荐的哪些涨老多了…心里当时那个后悔呀,没在国庆节随便挑一只买点试试.<br>12月份终于驾照拿到手了,我决定真枪实弹的入股市了,给我爸打了一万的存款,让他把借个证券账户借我玩玩.我还记得当时买的西山煤电…没想到这么幸运,中午买入,下午收盘就拉升了4个点,短短几天赚了1500.过完年,大家都知道2015年3月到5月股市那”牛”的一个疯狂,都在说扫地大妈一买一个涨停板…谁知,这就是最后的疯狂.2015年6月的某天,千股跌停…然后就是无止尽的跌…很多刚入市的小散搞都被搞高高挂在了山顶和半山腰,我也不例外,之前赚的小几万一下子就所剩不多了…现在想起来都是泪.</p>
<p>2015年夏天那阵,让我感到从所未有的黑暗…我开始对未来开始感到惶恐,我突然醒悟,我已经毕业一年了,我这一年究竟都干了些什么.答案是Nothing!我开始反思,我不能再这样下去了…我必须拜托这堕落的生活!<br>告诫自己:<strong>别在最能拼的年纪整天无所事事!</strong></p>
<p>于是,我决定必须找份正儿八经的工作了.<br>虽然大学是读的计算机相关的专业,但是当时选择了嵌入式方向,主要偏向C和C++的学习开发,并没有让我产生什么兴趣,很多专业课就那么得过且过了.又过了这么久没怎么接触编程,C++什么的早还给老师了,惭愧…<br>有一天偶然看到一个很有意思的网站,<a href="http://species-in-pieces.com" target="_blank" rel="external">species-in-spieces</a><br>就是这个网站让我对WEB前端产生了兴趣,大学的时候也偶尔听过几节另外一个云计算方向的课程,大概知道网页三剑客 “HTML+CSS+JS”,然后就开始我的漫漫前端自学之路了.断断续续大概学了两个月左右,感觉基础掌握的差不多了,就是有实际完整的项目来实践.朋友正好开了婚庆需要做一个宣传网站,然后我就主动提出免费帮她做个静态的宣传页…她给我提供了很多素材(很多系列的婚礼现场图),我的想法是首页有个大轮播区.点击导航跳转到页面对应的区域.这个轮播功能做出来后,我发现很多问题,图片加载特别慢,但是我也不知道有什么好的解决方案.我意识到是时候该找个工作来提升自己了.</p>
<p>后来我才知道’懒加载’这个方法可以优化这个问题.</p>
<p>大概面试了几家,最后入职MCJ,当时公司的前端主要都在负责UBER抢卷H5活动页的开发,人手不够.虽然我没有实际工作经验,可能面试的时候感觉CSS基础还行,就把我收下了.(PS.当时JS很弱,连AJAX都不懂).<br>在MCJ的第一天,我花了将近一天的实际配置开发环境,之前就只用Sublime Text写些静态的页面.连WebStorm都没听说,在同事的帮助下我熟悉了WebStorm,SVN还有公司uber项目的大致结构.<br>第二天,头儿就分配任务给我做了,顿时觉得压力好大.UBER活动页主要是一些10页以内的移动端H5,逻辑都比较简单,使用淘宝的flexible自适应常见的手机屏幕尺寸.<br>一时半会儿感觉来不及仔细研究flexible.js其中的原理,用rem来布局,之前听说过,也没实际使用过.最开始每个尺寸都人工换算成rem,后来发现效率太低了.一搜索才发现Sublime Text 有个专门写 rem的插件<strong>cssrem</strong>,使用了这个插件后效率立马飞跃了…<br>刚入职的第一周,每天下班回家都在家默默加班到深夜,因为是做活动页,一般任务下来之后,需要几天内 能够上线,我第一个活动页还稍微有点复杂,属于分销卷的.(据说单卷是最简单的).<br>好在经过几个晚上的加班,最终赶在deadline之前上线了,为此我应该牺牲了不少脑细胞和睡眠.<br>第一个case搞定了后,之后都是类似的了,再做起来比之前效率搞了不少.</p>
<p>在MCJ的工作与生活还是挺愉快的,中午吃完饭一群就开始整三国杀,哈哈,作为一名三国杀的忠实粉丝,我也心甘情愿的贡献出我的午休时间了.下午4点,行政MM会给我们准备好下午茶一些小糕点和水果之类的,如果当天有公司员工生日就升级为生日蛋糕,所以福利还是不错的.<br>本来还打算在公司好好学习的,可是好景不长,7月底UBER被滴滴收购了…SO,公司UBER的业务就全部取消了,理所当然我们大批前端都成了公司裁员的对象.8月初公司就虽然有点伤心,但是公司这样我也很理解,毕竟公司肯定从公司利益出发,作为补偿多发了一个月的工资.</p>
<p>离职正值夏末,天气特别热,歇了大半月,8月底准备找工作了.<br>在8月底入职HYDATA,公司主要业务是做数据可视化,接触了些新知识:<strong>CANVAS,SVG,Echarts</strong>和<strong>D3</strong>等 还有<strong>React,Vue</strong>(虽然项目还没用上),但是使我对前端的另一领域有了一定了解.入职5个多月以来参与了三个项目,主要都是公安项目的数据可视化.<br>配置Echarts就是个从熟能生巧的过程,没多大难度,毕竟别人写好了你只用配置…有些复杂个性化的图还是得用D3来画,以后多研究下D3.争取年前结合React,Webpack和D3,写几个效果的组件模块.(向小乔-我司D3大神看齐^ ^)</p>
<p>关于我的2016本命年就总结到这好了,这篇总结拖拖拉拉,挤牙膏般挤出来的…(年底最近确实各种忙)<br>2016年我依然还在重庆坚守着…<br>体重也依然坚守着…减肥年年都在我的来年计划在,似乎也永远只能是计划(鄙视下自己)相信如果你也是个标准的吃货,就会懂我的幸福和痛苦,哈哈<br>想买房可是拖了大半年也没落实行动…一个人在重庆确实感觉有点力不从心,买房的流程啥也不懂.<br>2016年末,重庆这个房价低洼感觉也有上扬的趋势了…有点焦虑…也许明年买又要多花几万了= =</p>
<h2 id="2017年-Better"><a href="#2017年-Better" class="headerlink" title="2017年, Better ~"></a>2017年, Better ~</h2><p>也许我会离开重庆.慢慢将工作中心从Violin撤离…在前端继续前行…<br>明年至少要出去旅游一次,2016年没有做到,太忙了 <del>T T</del><br>如果我决定留在重庆,就买个自己的小房子.<br>万年不变计划-减肥 …<br>如果有好的机会我会去上海/杭州(不考虑北京,我还想多活几年Orz)…加油,相信2017会更好 ^ ^</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ES6学习笔记]]></title>
      <url>http://zy380196088.github.io./2016/12/06/ES6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><a id="more"></a>
<h1 id="let-和-const"><a href="#let-和-const" class="headerlink" title="let 和 const"></a>let 和 const</h1><p>let 是 ES6新增的用来声明局部变量的,只在let命令所在的代码块内有效。</p>
<p>for循环的计数器，就很合适使用let命令。代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">for (let i = 0; i &lt; 10; i++) &#123;</div><div class="line">  // ...</div><div class="line">&#125;</div><div class="line">console.log(i)</div><div class="line">// ReferenceError: i is not defined</div></pre></td></tr></table></figure></p>
<p>let命令改变了语法行为,不会发生变量提升,它所声明的变量一定要在声明后使用,否则报错。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[React学习]]></title>
      <url>http://zy380196088.github.io./2016/09/14/React%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="Component-的创建和复合"><a href="#Component-的创建和复合" class="headerlink" title="Component 的创建和复合"></a>Component 的创建和复合</h1><h2 id="React简介"><a href="#React简介" class="headerlink" title="React简介"></a>React简介</h2><h3 id="对-React-JS-的认识-及其优点"><a href="#对-React-JS-的认识-及其优点" class="headerlink" title="对 React.JS 的认识 及其优点"></a>对 React.JS 的认识 及其优点</h3><p>React 并不是一个完整的 MVC 框架,最多可以认为是 MVC 中的 V(View);<br>React 不是一个新的模板语言, JSX 只是一个表现,没有 JSX 的 React也能工作.</p>
<p>React本质上是一个”状态机”,可以帮助开发者管理复杂的随着时间变化的状态.<br>React只关心两件事情:</p>
<ol>
<li>更新 DOM</li>
<li>响应时事件</li>
</ol>
<a id="more"></a>
<p>React运用一个虚拟的 DOM 实现了一个非常强大的渲染系统,在 React 忠对 DOM 只更新不读取.<br>它以渲染函数为基础. 当函数读入当前的状态,将其转换为目标页面上的一个虚拟表现.只要 React 被告知状态有变化,它就会重新运行这些函数,计算出页面的一个新的虚拟表现,接着自动的把结果转换成必要的 DOM 更新来反映新的表现.</p>
<h2 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h2><h3 id="在-React-中使用-JSX-的好处"><a href="#在-React-中使用-JSX-的好处" class="headerlink" title="在 React 中使用 JSX 的好处:"></a>在 React 中使用 JSX 的好处:</h3><ol>
<li>允许使用熟悉的语法来定义 HTML 元素树;</li>
<li>提供更加语义化且易懂的标签;</li>
<li>程序结构更容易被直观化;</li>
<li>抽象了 React Element 的创建过程;</li>
<li>可以随时掌控 HTML 标签以及生成这些标签的代码;</li>
<li>是原生的 JavaScript;</li>
</ol>
<p>JSX 允许你在应用程序中使用所有预定义的 HTML5标签及自定义组件.</p>
<h3 id="复合组件"><a href="#复合组件" class="headerlink" title="复合组件"></a>复合组件</h3><ol>
<li>定义一个自定义组件<br>假设我们想写一个分页组件,希望输出如下 HTML:</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div className = <span class="string">"divider"</span>&gt;</div><div class="line">	<span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Questions<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span> &lt;hr /&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>想要将 HTML 片段表示为 React Component , 只需要像下面这样包装起来,然后再 render 方法中返回这些标签.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Divider = React.createClass(&#123;</div><div class="line">	<span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> (</div><div class="line">		<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span> =<span class="string">"divider"</span>&gt;</span></span></div><div class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>Questions<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		);</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>目前这还是个一次性的组件,想要让这个组件变得实用,还需要一种将 h2标签中的文本表示出来的动态方法.</p>
<ol>
<li>使用动态值<br>JSX 将两个花括号之间的内容{…}渲染为动态值.花括号指明了一个 JavaScript 上下文环境–你在花括号中放入的任何东西都会被进行求值,得到的结果被渲染为标签中的若干节点.</li>
</ol>
<p>React 通过将数组中的每个元素渲染为一个节点的方式对数组进行自动求值;</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var text = ['hello','world'];</div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;text&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">//<span class="tag">&lt;<span class="name">h2</span>&gt;</span>helloworld<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>子节点<br>在 HTML 中,使用<h2>Questions</h2>来渲染一个 header元素,这里” Question” 就是 h2元素的子文本节点.而在 JSX 中,我们的目标是用下面的方式来表示它:</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Divider</span>&gt;</span>Question<span class="tag">&lt;/<span class="name">Divider</span>&gt;</span></div></pre></td></tr></table></figure>
<p>React 将开始标签与结束标签之间的所有子节点保存在一个名为 this.props.children的特殊组件属性中.<br>在上面的例子中,<code>this.props.children == [&quot;Questions&quot;].</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var Divider = React.createClass(&#123;</div><div class="line">	render: function()&#123;</div><div class="line">		return (</div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span> =<span class="string">"divider"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;this.props.children&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		);</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>将上面的 JSX 代码转换为 JavaScript 时,会得到下面的结果:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var Divder = React.createClass(&#123;displayName:'Divider',</div><div class="line">	render: function()&#123;</div><div class="line">		return (</div><div class="line">			React.createElement("div",&#123;className:"divider"&#125;,</div><div class="line">			React.createElement("h2",null,this.props.children),</div><div class="line">			React.createElement("hr",null)</div><div class="line">			)</div><div class="line">		);</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="JSX与-HTML-有何不同"><a href="#JSX与-HTML-有何不同" class="headerlink" title="JSX与 HTML 有何不同"></a>JSX与 HTML 有何不同</h3><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><p>JSX 提供了将属性设置为动态 JavaScript 变量的便利,要设置动态的属性,需要将原本用引号括起来的文本替换成花括号包裹的 JavaScript 变量.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var surveyQuestionId = this.props.id;</div><div class="line">var classes ='some-class-name';</div><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#123;surveyQuestionId&#125;</span> <span class="attr">className</span> =<span class="string">&#123;classes&#125;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>对于更复杂的情景,还可以将属性设置为一个函数调用返回的结果:</p>
<p><code>&lt;div id={this.getSurveyId()}&gt;...&lt;/div&gt;</code></p>
<h4 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h4><p>想要在组件中添加条件判断似乎是件很困难的事情,若直接往 JSX 中加入 if 语句会渲染出无效的 JavaScript,解决的办法可以使用以下某种方法:</p>
<ol>
<li>使用三目运算符</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">render: function()&#123;</div><div class="line">	return <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span> = <span class="string">&#123;</span></span></div><div class="line">		<span class="attr">this.state.isComplete</span> ? '<span class="attr">is-complete</span>' <span class="attr">:</span>''</div><div class="line">	&#125;&gt;...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>设置一个变量并在属性中引用它</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">getIsComplete: function()&#123;</div><div class="line">	return this.state.isComplete ? 'is-complete' : '';</div><div class="line">&#125;,</div><div class="line">render: function()&#123;</div><div class="line">	var isComplete = this.getIsComplete();</div><div class="line">	return <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span> = <span class="string">&#123;isComplete&#125;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>将逻辑转化到函数中</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">getIsComplete: function()&#123;</div><div class="line">	return this.state.isComplete ? 'is-complete' : '';</div><div class="line">&#125;,</div><div class="line">render: function()&#123;</div><div class="line">	return <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span> = <span class="string">&#123;this.getIsComlete()&#125;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span>;	&#125;</div></pre></td></tr></table></figure>
<ol>
<li>使用&amp;&amp;运算符<br>由于对于null  或 false 值 React 不会输出任何内容,因此你可以使用一个后面跟随了期望字符串的布尔值来实现条件判断,如果这个布尔值为 true, 那么后续的字符串就会被使用.</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">render: function()&#123;</div><div class="line">	return <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span> = <span class="string">&#123;this.state.isComplete</span> &amp;&amp; '<span class="attr">is-complete</span>'&#125;&gt;</span></div><div class="line">	...</div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="非-DOM-属性"><a href="#非-DOM-属性" class="headerlink" title="非 DOM 属性"></a>非 DOM 属性</h4><p>下面特殊属性只在 JSX 中存在:</p>
<ol>
<li><p>key</p>
<p> key 是一个可选的唯一标识符.在程序运行的过程中,一个组件可能会在组件树中调整位置,比如当用户在进行搜索操作时,或者当一个列表中的物品被增加,删除时,当这些情况发生时,组件可能并不需要被销毁并重新创建.<br> 通过给组件设置一个独一无二的键,并确保它在一个渲染周期中保持一致,似的 react 能够更智能地决定应该重用一个组件,还是销毁并重新创建一个组件,进而提升渲染性能.当两个已经存在于 DOM 中的组件交换位置是, react 能够匹配对应的键并进行相应的移动,且不需要完全重新渲染 DOM.</p>
</li>
<li><p>ref</p>
<p> ref 允许父组件在 render 方法之外保持对子组件的一个引用.<br> JSX 中,你可以通过在属性中设置期望的引用名来定义一个引用.</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">"myInput"</span> <span class="attr">...</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 之后,你就可以在组件中的任何地方使用 this.refs.myInput获取这个引用.通过引用获取到的这个对象被称为<strong>支持实例</strong>.它并不是真正的 DOM, 而是 react 在需要时用来创建 DOM 的一个描述对象.可以使用 this.refs.myInput.getDOMNode()访问真实的 DOM 节点.</p>
<ol>
<li>dangerouslySetInnerHTML</li>
</ol>
</li>
</ol>
<h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><p>在 JSX 中,捕获一个事件就像给组件的方法设置一个属性一样简单.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">handleClick : function(event)&#123;...&#125;,</div><div class="line">render : function()&#123;</div><div class="line">	return <span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span> = <span class="string">&#123;this.handleClick&#125;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意, react 自动绑定了组件所有方法的作用域,因此你永远都不需要手动绑定.</p>
<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>注释可以用以下两种形式添加:</p>
<ol>
<li>当作一个元素的在子节点</li>
<li>内年在元素属性中</li>
</ol>
<h4 id="特殊属性"><a href="#特殊属性" class="headerlink" title="特殊属性"></a>特殊属性</h4><p>由于 JSX 会转换为原生的 JavaScript 函数,因此有些关键词使我们不能用的—例如 for 和 class.<br>要给表单里的标签添加for属性需要使用htmlFor.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span> =<span class="string">"for-text"</span><span class="attr">...</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h4><p>React把所有内敛样式都规划为了驼峰形式,与JavaScript中 DOM 的 style 属性一致.<br>要添加一个自定义的样式属性,只需简单地把驼峰形式的属性名及期望的 CSS 值拼装为对象即可.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var styles = &#123;</div><div class="line">	borderColor:"#999",</div><div class="line">	borderThickness:"1px"</div><div class="line">&#125;;</div><div class="line">React.renderComponent(<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span> =<span class="string">&#123;styles&#125;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span>,node);</div></pre></td></tr></table></figure>
<h3 id="没有JSX的React"><a href="#没有JSX的React" class="headerlink" title="没有JSX的React"></a>没有JSX的React</h3><p>如果不打算在 react 中使用 JSX, 在 React中创建元素时需要知道以下三点:</p>
<ol>
<li>定义组件类.</li>
<li>创建一个为组件类产生实例的工厂.</li>
<li>使用工厂来创建 ReactElement实例.<h4 id="创建-React-元素"><a href="#创建-React-元素" class="headerlink" title="创建 React 元素"></a>创建 React 元素</h4>对于普通的 HTML 元素, react 在 React.DOM.* 命名空间下提供了一系列的工厂.这些预定义的工厂都是 React.createElement 的简写,只是帮你预置了第一个参数而已.下面两行语句会得到同样的结果.</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">React.createElement(<span class="string">'div'</span>);</div><div class="line">React.DOM.div();</div></pre></td></tr></table></figure>
<p>然而,对于自定义组件来说,你必须为组件类创建一个工厂.<br>回想之前我们定义的一个 Divider组件类.<br>下面将它重命名为 DividerClass, 以此来明确它的目的.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> DividerClass = React.createClass(&#123;</div><div class="line">	<span class="attr">displayName</span>:<span class="string">'Divider'</span>,</div><div class="line">	<span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> (</div><div class="line">			React.createE;e,emt(<span class="string">"div"</span>,&#123;<span class="attr">className</span>:<span class="string">'divider'</span>&#125;,</div><div class="line">			React.)</div><div class="line">		)</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h4 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h4><p>尽管 React.DOM.*命名空间非常方便,但重复地输入相同的内容总是让人觉得繁琐.我们可以用较短的变量名保存一个对 React.DOM的引用.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> R = React.DOM;</div><div class="line"><span class="keyword">var</span> DividerClass = React.createClass(&#123;<span class="attr">displayName</span>:<span class="string">'Dividider'</span>,</div><div class="line">	<span class="attr">render</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> R.div(&#123;<span class="attr">className</span>:<span class="string">"divider"</span>&#125;,</div><div class="line">		R.h2(<span class="literal">null</span>,<span class="string">"Label Text"</span>),</div><div class="line">		R.hr()</div><div class="line">		);</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h2><h3 id="生命周期方法"><a href="#生命周期方法" class="headerlink" title="生命周期方法"></a>生命周期方法</h3><h4 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h4><p>一个实例初次被创建时所调用的生命周期方法与其他各个后续实例被创建时所调用的略有不同.当首次使用一个组件类时,可以看到下面这些方法依次被调用:</p>
<ol>
<li><p>getDefaultProps<br> 对于组件类来说这个方法只会被调用一次.对于那些没有被父辈组件制定props 属性的新建实例来说,这个方法返回的对象可用于为十里设置默认的props值.</p>
</li>
<li><p>getInitialState<br> 对于组件的每个实例来说,这个方法的调用次数有且只有一次,在这里你将有机会初始化每个实例的 state.与 getDefaultProps方法不同的是,每次实例创建时该方法都会被调用一次.在这个方法里,我们可以访问到 this.props</p>
</li>
<li><p>componentWillMount<br> 在完成首次渲染之前被调用,<strong>是在 render 方法调用前可以修改组件 state 的最后一次机会.</strong></p>
</li>
<li><p>render<br> 在这创建一个虚拟 DOM,用来表示组件的输出.对于一个组件来说, render 是唯一一个<strong>必需</strong>的方法,并且有特定的规则.<br> render 方法需要满足下面几点:<br> – 只能通过 this.props 和 this.state访问数据;<br> – 可以返回 null ,false 活着任何 React组件;<br> – 只能出现一个顶级组件(不能返回一组元素);<br> – 必需<strong>纯净</strong>,意味着不能改变组件的状态活着修改 DOM 的输出.<br> render 方法返回的结果不是真正的 DOM, 而是一个虚拟的表现, React随后会把它和真实的 DOM 做对比,来判断是否有必要做出修改.</p>
</li>
<li><p>componentDidMount<br> 在 render 方法成功调用,并且正式的 DOM 已经被渲染之后,可以在 componentDidMount 内部通过this.getDOMNode()方法访问到它.<br> 这就是可以用来访问原始 DOM 的<strong>生命周期钩子函数</strong>.比如,但你需要测量渲染出 DOM 元素的高度,或者使用计时器来操作它,亦或运行一个自定义的 jQuery 插件时,可以将这些操作挂载到这个方法上.</p>
<p> 举例来说,假设需要在一个通过 React 渲染出的表单元素上使用 jQuery UI 的 Autocomplete 插件,则可以像下面这样使用它:</p>
 <figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//需要自动补全的字符串列表</span></div><div class="line"><span class="keyword">var</span> datasource =[...];</div><div class="line"></div><div class="line"><span class="keyword">var</span> MyComponent = React.creatClass(&#123;</div><div class="line">	<span class="attr">render</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">...</span>/&gt;</span>;</span></div><div class="line">	&#125;,</div><div class="line">	componentDidMount : function()&#123;</div><div class="line">		$(this.getDOMNode()).autocomplete(&#123;</div><div class="line">			source:datasource</div><div class="line">			&#125;);</div><div class="line">		&#125;</div><div class="line">	&#125;);</div></pre></td></tr></table></figure>
</li>
</ol>
<p>注意,当 React运行在服务器端时, componentDidMount方法不会被调用.</p>
<p>对于该组件类的所有后续应用,你将会看到下面的方法被一次调用.</p>
<ol>
<li>getInitialState</li>
<li>componentWillMount</li>
<li>render</li>
<li>componentDidMount</li>
</ol>
<h4 id="存在期"><a href="#存在期" class="headerlink" title="存在期"></a>存在期</h4><p>随着应用状态的改变,以及组件逐渐受到影响.下面的方法依次被调用:</p>
<ol>
<li>componentWillReceiveProps</li>
<li>shouldComponentUpdate</li>
<li>componentWillUpdate</li>
<li>render</li>
<li>componentDidUpdate</li>
</ol>
<h4 id="销毁-amp-清理期"><a href="#销毁-amp-清理期" class="headerlink" title="销毁&amp;清理期"></a>销毁&amp;清理期</h4><p> 最后,当该组件被使用完成后,componentWillUnmount犯法将会被调用,目的是给这个实例提供清理自身的机会.</p>
<h4 id="反模式-把计算后的赋值给-state"><a href="#反模式-把计算后的赋值给-state" class="headerlink" title="反模式:把计算后的赋值给 state"></a>反模式:把计算后的赋值给 state</h4><p>在getInitialState方法中,尝试通过this.props来创建state的做法是一种范模式.<br><strong>React专注于维护数据的单一来源.</strong></p>
<p>当组件的state值和它所基于的prop不同吧,因而无法了解到render函数的内部结构时,可以认定为一种范模式.</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//反模式经过计算后值不应该赋给state</span></div><div class="line">getDefaultProps:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		<span class="attr">date</span>:<span class="keyword">new</span> <span class="built_in">Date</span>()</div><div class="line">	&#125;;</div><div class="line">&#125;,</div><div class="line"><span class="attr">getInitialState</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		<span class="attr">day</span> :<span class="keyword">this</span>.propsdate.getDay()</div><div class="line">	&#125;</div><div class="line">&#125;,</div><div class="line"><span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Day:&#123;this.state.day&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>正确的模式因该是在渲染时计算这些值.这保证了计算和的值永远不会与派生出它的props值不同步.</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在渲染时计算值是正确的</span></div><div class="line">getDefaultProps:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span>&#123;</div><div class="line">		<span class="attr">date</span>:<span class="keyword">new</span> <span class="built_in">Date</span>()</div><div class="line">	&#125;;</div><div class="line">&#125;,</div><div class="line"><span class="attr">render</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> day = <span class="keyword">this</span>.props.date.getDay();</div><div class="line">	<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Day:&#123;day&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h2 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h2><h3 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h3><p>props是 properties 的缩写,可以使用它把任意类型的数据传递给组件.<br>可以在挂在组件的时候设置它的 props:</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> surveys = [&#123;<span class="attr">sex</span>:<span class="string">'man'</span>&#125;];</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">ListSurveys</span> <span class="attr">surveys</span> =<span class="string">&#123;surveys&#125;/</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>可以通过 this.props 访问 props,但绝对不能通过这种方式修改它.<strong>一个组件绝对不可以修改自己的 props</strong><br>在 JSX 中,可以把 props 设置为字符串:<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href=<span class="string">'/surveys/add'</span>&gt;Add survey&lt;<span class="regexp">/a&gt;</span></div></pre></td></tr></table></figure></p>
<p>也可以使用{}语法来设置,注入 JavaScript 传递任意类型的变量:<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href=&#123;<span class="string">'/surveys/'</span>+survey.id&#125;&gt;&#123;survey.title&#125;&lt;<span class="regexp">/a&gt;</span></div></pre></td></tr></table></figure></p>
<p>还可以使用 JSX的展开语法把 props 设置成一个对象:<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ListSurveys = React.createClass(&#123;</div><div class="line">	<span class="attr">render</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> props = &#123;</div><div class="line">			<span class="attr">one</span>:<span class="string">'foo'</span>,</div><div class="line">			<span class="attr">two</span>:<span class="string">'bar'</span></div><div class="line">		&#125;;</div><div class="line">		<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">SurveyTable&#123;...props&#125;</span>/&gt;</span>;</span></div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>props 还可以用来添加事件处理器:<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//通过链接标签传递了一个 onClick属性,值为 handleClick函数,当用户点击链接时,handleClick方法将被调用.</span></div><div class="line"><span class="keyword">var</span> SaveButtom = React.createClass(&#123;</div><div class="line">	<span class="attr">render</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span>(</div><div class="line">			<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">className</span> = <span class="string">'button save'</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>Save<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></div><div class="line">		);</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">handleClick</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="PropTypes"><a href="#PropTypes" class="headerlink" title="PropTypes"></a>PropTypes</h3><p>通过在组件中定义一个配置对象, React 提供了一种验证 props 的方式:<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> SurveyTableRow = React.createClass(&#123;</div><div class="line">	<span class="attr">PropTypes</span>:&#123;</div><div class="line">		<span class="attr">survey</span> :React.PropTypes.shape(&#123;</div><div class="line">			<span class="attr">id</span>:React.PropTypes.number.isRequired</div><div class="line">		&#125;).isRequired,</div><div class="line">		<span class="attr">onClick</span>:React.PropTypes.func</div><div class="line">	&#125;,</div><div class="line">	<span class="comment">//...</span></div><div class="line">	&#125;)</div></pre></td></tr></table></figure></p>
<p>组件初始化时,如果传递的属性和 propTypes不匹配,则会答应一个 console.warn日志.<br>如果是可选的配置,则可以去掉.isRequired.</p>
<h3 id="getDefaultProps"><a href="#getDefaultProps" class="headerlink" title="getDefaultProps"></a>getDefaultProps</h3><p>可以为组建添加 getDefaultProps 函数来设置属性的默认值.(针对那些非必需属性)<br>getDefaultProps并不是在组件实例化时被调用.而是在 React.createClass 调用时就被调用了,返回值会被缓存起来.</p>
<h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><p>每一个 React 组件都可以拥有自己的 state, state 与 props 的却别在于state 只存在于组件的内部.<br>state 可以用来确定一个元素的试图状态.下面代码为一个自定义的<dropdown>组件:<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> CountryDropdown = React.createClass(&#123;</div><div class="line">	<span class="attr">getInitialState</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> &#123;</div><div class="line">			<span class="attr">showOptions</span>: <span class="literal">false</span></div><div class="line">		&#125;;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">render</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> options;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.state.showOptions)&#123;</div><div class="line">			options = (</div><div class="line">				<span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span> = <span class="string">'options'</span>&gt;</span></span></div><div class="line">					<span class="tag">&lt;<span class="name">li</span>&gt;</span>option1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">li</span>&gt;</span>option2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">li</span>&gt;</span>option3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">			);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> (</div><div class="line">			<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span> = <span class="string">"dropdown"</span> <span class="attr">onClick</span> = <span class="string">&#123;this.handleClick&#125;</span>&gt;</span></span></div><div class="line">				<span class="tag">&lt;<span class="name">label</span>&gt;</span>choose a country<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		);</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">handleClick</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">this</span>.setSate(&#123;</div><div class="line">			<span class="attr">showOptions</span>:<span class="literal">true</span></div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></dropdown></p>
<p>上述例子中,state被用来记录是否在下拉框中显示可选项.<br><strong>千万不能直接修改 this.state,永远要记得通过 this.setSate 方法修改</strong></p>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><blockquote>
<p>使用 props 在整个组件树中传递数据和配置.<br>避免在组建内部修改 this.props或调用 this.setProps,请把 props 当做是只读的<br>使用props来做事件处理器,与子组件通信<br>使用 state 存储简单地视图状态,比如说下拉框是否可见这样的状态<br>使用 this.setState 来设置状态,而不要使用 this.state 直接修改状态.</p>
</blockquote>
<h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><h3 id="绑定事件处理器"><a href="#绑定事件处理器" class="headerlink" title="绑定事件处理器"></a>绑定事件处理器</h3><h3 id="事件和状态"><a href="#事件和状态" class="headerlink" title="事件和状态"></a>事件和状态</h3><h3 id="根据状态进行渲染"><a href="#根据状态进行渲染" class="headerlink" title="根据状态进行渲染"></a>根据状态进行渲染</h3><p>组件状态默认是 null, 可以通过 getInitialState方法将其初始化为合理的值,例如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">getInitialState:function()&#123;</div><div class="line">	return &#123;</div><div class="line">		dropZoneEntered:false,</div><div class="line">		title:&apos;&apos;,</div><div class="line">		introduction:&apos;&apos;,</div><div class="line">		questions:[]</div><div class="line">	&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="更新状态"><a href="#更新状态" class="headerlink" title="更新状态"></a>更新状态</h3><p>更新组件的内部状态会触发组件重绘,更新组件状态有两种方案:</p>
<ol>
<li>setState<br>把传入的对象合并到已有的state 对象</li>
<li>replaceState<br>用一个全新的 state 对象完整的替换掉原有的 state.(使用不可变数据结构来表示状态时)</li>
</ol>
<h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><h2 id="组件的复合"><a href="#组件的复合" class="headerlink" title="组件的复合"></a>组件的复合</h2><h3 id="扩展-HTML"><a href="#扩展-HTML" class="headerlink" title="扩展 HTML"></a>扩展 HTML</h3><h3 id="组件复合的例子"><a href="#组件复合的例子" class="headerlink" title="组件复合的例子"></a>组件复合的例子</h3><ol>
<li>接收一组选项作为输入</li>
<li>把选项渲染给用户</li>
<li>只允许用户选择一个选项</li>
</ol>
<h3 id="组装-HTML"><a href="#组装-HTML" class="headerlink" title="组装 HTML"></a>组装 HTML</h3><h3 id="追踪状态"><a href="#追踪状态" class="headerlink" title="追踪状态"></a>追踪状态</h3><h3 id="整合到父组件当中"><a href="#整合到父组件当中" class="headerlink" title="整合到父组件当中"></a>整合到父组件当中</h3><h3 id="父组件-子组件关系"><a href="#父组件-子组件关系" class="headerlink" title="父组件,子组件关系"></a>父组件,子组件关系</h3><p>子组件和其父组件通信的最简单方式就是使用属性( props).父组件需要通过属性传入一个回调函数,子组件在需要时进行调用.</p>
<h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><h2 id="mixing"><a href="#mixing" class="headerlink" title="mixing"></a>mixing</h2><h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><h2 id="DOM-操作"><a href="#DOM-操作" class="headerlink" title="DOM 操作"></a>DOM 操作</h2><p>想要访问受 React控制的 DOM 节点,首先必须能够访问到负责控制这些 DOM 的组件.可以通过为子组件添加一个 ref 属性来实现.<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> DoodleArea = React.createClass(&#123;</div><div class="line">	<span class="attr">render</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">ref</span> = <span class="string">"mainCanvas"</span>/&gt;</span>;</span></div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><strong>必须保证赋值给没个子组件的 ref 值在所有子组件中是唯一的</strong><br>可以通过<strong>getDOMNode()方法访问到底层的 DOM 节点,但请不要再 render 方法中这样做,因为在 render 方法完成并且 React 执行更新之前,底层的 DOM 节点可能不是最新的(甚至尚未创建)</strong></p>
<h3 id="DOM-操作-1"><a href="#DOM-操作-1" class="headerlink" title="DOM 操作"></a>DOM 操作</h3><h3 id="整合非-React类库"><a href="#整合非-React类库" class="headerlink" title="整合非 React类库"></a>整合非 React类库</h3><h3 id="侵入式插件"><a href="#侵入式插件" class="headerlink" title="侵入式插件"></a>侵入式插件</h3><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h2 id="服务端渲染"><a href="#服务端渲染" class="headerlink" title="服务端渲染"></a>服务端渲染</h2><h2 id="周边类库"><a href="#周边类库" class="headerlink" title="周边类库"></a>周边类库</h2><h1 id="React-工具"><a href="#React-工具" class="headerlink" title="React 工具"></a>React 工具</h1><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h1 id="React-实践"><a href="#React-实践" class="headerlink" title="React 实践"></a>React 实践</h1><h2 id="架构模式"><a href="#架构模式" class="headerlink" title="架构模式"></a>架构模式</h2><h2 id="其他使用场景"><a href="#其他使用场景" class="headerlink" title="其他使用场景"></a>其他使用场景</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[D3.js学习<精通 D3.js:交互式数据可视化高级编程>笔记]]></title>
      <url>http://zy380196088.github.io./2016/09/12/D3.js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="绘制网格线"><a href="#绘制网格线" class="headerlink" title="绘制网格线"></a>绘制网格线</h1><h2 id="思路步骤"><a href="#思路步骤" class="headerlink" title="思路步骤"></a>思路步骤</h2><ol>
<li>绘制SVG容器</li>
<li>给 SVG 分组,并设置分组的样式类</li>
<li>为分组分别添加横线和竖线</li>
</ol>
<a id="more"></a>
<h2 id="关键技术"><a href="#关键技术" class="headerlink" title="关键技术"></a>关键技术</h2><p>完整代码:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charsetmeta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>linegrid<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">            //分组中线的样式，这里设置了颜色值，实际使用可以更淡，例如stroke: #ccc  </div><div class="line">            .gridline&#123;</div><div class="line">                stroke: #000;</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span> <span class="attr">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"d3.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="comment">&lt;!--下载到本地--&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="keyword">var</span> data = d3.range(<span class="number">10</span>);<span class="comment">// (1) 生成一个10元素的数组</span></div><div class="line">            <span class="keyword">var</span> w = <span class="number">960</span>,</div><div class="line">            h= <span class="number">500</span>,</div><div class="line">            p= <span class="number">40</span>,<span class="comment">//内边距</span></div><div class="line">            x= d3.scale.linear().domain([<span class="number">0</span>, <span class="number">1</span>]).range([p, w - p]), <span class="comment">//(2) 定义x和y比例尺</span></div><div class="line">            y= d3.scale.linear().domain([<span class="number">0</span>, <span class="number">1</span>]).range([h - p, p]);</div><div class="line">            <span class="comment">//(3) 绘制SVG</span></div><div class="line">            <span class="keyword">var</span> svg = d3.select(<span class="string">"body"</span>)</div><div class="line">                .append(<span class="string">"svg"</span>)</div><div class="line">                .attr(<span class="string">"width"</span>, w)</div><div class="line">                .attr(<span class="string">"height"</span>, h);</div><div class="line">            <span class="comment">//(4) 给SVG添加分组，并设置样式类，样式见&lt;style&gt;标签中的设置  </span></div><div class="line">            <span class="keyword">var</span> grid = svg.selectAll(<span class="string">".grid"</span>)</div><div class="line">                .data(x.ticks(<span class="number">10</span>))</div><div class="line">                .enter().append(<span class="string">"g"</span>)</div><div class="line">                .attr(<span class="string">"class"</span>, <span class="string">"grid"</span>);</div><div class="line">            <span class="comment">//(5) 添加线条，设置起始坐标(x1,y1)和结束坐标(x2,y2)的值即可</span></div><div class="line">            <span class="comment">//竖线</span></div><div class="line">            grid.append(<span class="string">"line"</span>)</div><div class="line">            .attr(<span class="string">"x1"</span>, x)</div><div class="line">            .attr(<span class="string">"x2"</span>, x)</div><div class="line">            .attr(<span class="string">"y1"</span>, p)</div><div class="line">            .attr(<span class="string">"y2"</span>, h - p - <span class="number">1</span>);</div><div class="line">            <span class="comment">//横线</span></div><div class="line">            grid.append(<span class="string">"line"</span>)</div><div class="line">            .attr(<span class="string">"y1"</span>, y)</div><div class="line">            .attr(<span class="string">"y2"</span>, y)</div><div class="line">            .attr(<span class="string">"x1"</span>, p)</div><div class="line">            .attr(<span class="string">"x2"</span>, w - p + <span class="number">1</span>);</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h1><h2 id="添加元素语法"><a href="#添加元素语法" class="headerlink" title="添加元素语法:"></a>添加元素语法:</h2><p><code>[selection].append(&quot;p&quot;);</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//引用D3所在路径</span></div><div class="line"><span class="comment">//选择body标签，为之添加一个p标签，并设置它的内容为New paragraph！</span></div><div class="line">d3.select(<span class="string">"body"</span>).append(<span class="string">"p"</span>).text(<span class="string">"New paragraph!"</span>);</div><div class="line"><span class="comment">//你可以将链接选择换行，这样代码结构更清晰</span></div><div class="line">d3.select(<span class="string">"body"</span>)</div><div class="line">    .append(<span class="string">"p"</span>)</div><div class="line">    .text(<span class="string">"New paragraph!"</span>);</div><div class="line"><span class="comment">//当然，也可以避免使用链接语法：</span></div><div class="line"><span class="keyword">var</span> body = d3.select(<span class="string">"body"</span>);</div><div class="line"><span class="keyword">var</span> p = body.append(<span class="string">"p"</span>);</div><div class="line">p.text(<span class="string">"New paragraph!"</span>);</div></pre></td></tr></table></figure>
<h1 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h1><ol>
<li><p>D3可以处理哪些类型的数据?<br>JS 的数据类型:如数字,时间,字符串,布尔值,数组,对象等都可以.<br>D3自定义的数据类型:<br>如集合(Set),映射(Map),嵌套(Nest),以及各种颜色空间( RGB,HSL,HSV)对象等</p>
</li>
<li><p>如何绑定?<br>选择元素,绑定数据,追加元素.</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">d3.select(<span class="string">"body"</span>) <span class="comment">//查找 DOM 的 body</span></div><div class="line">	.selectAll(<span class="string">"p"</span>) <span class="comment">//选择 DOM 中的所有段落</span></div><div class="line">	.data(dataset) <span class="comment">//计数和分析我们的数据值;注意这里data函数会绑定数据，并能够使用D3经典的E-N-E编程套路（这个以后会讲到，暂时不用关心），而另外一个数据绑定函数datum则只是替换一组新的数据。</span></div><div class="line">	.enter() <span class="comment">//绑定数据和 DOM 元素;这个方法将数据传递到DOM中。如果数据值比相应的DOM元素多，就用enter()创建一个新元素的占位符。</span></div><div class="line">	.append(<span class="string">"p"</span>) <span class="comment">//追加元素;通过enter()创建的占位符 在DOM中插入一个p元素。</span></div><div class="line">	.text(<span class="string">"New paragraph!"</span>); <span class="comment">//设置元素的文本;为新创建的p标签插入一个文本值。</span></div></pre></td></tr></table></figure>
<h1 id="使用数据"><a href="#使用数据" class="headerlink" title="使用数据"></a>使用数据</h1><p>接上面一个例子可以显示数据值，还可以根据数据值来修改颜色值。</p>
<p>d表示当前数据值。可以使用一个匿名函数处理这个数据。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>testD3-3.html<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://localhost:8080/spring/js/d3.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> dataset = [ <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span> ];</div><div class="line"></div><div class="line">    d3.select(<span class="string">"body"</span>).selectAll(<span class="string">"p"</span>)</div><div class="line">        .data(dataset)</div><div class="line">        .enter()</div><div class="line">        .append(<span class="string">"p"</span>)</div><div class="line">        .text(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"I can count up to "</span> + d;</div><div class="line">        &#125;)</div><div class="line">        .style(<span class="string">"color"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (d &gt; <span class="number">15</span>) &#123; <span class="comment">//大于15的数字显示为红色</span></div><div class="line">                <span class="keyword">return</span> <span class="string">"red"</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="string">"black"</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="用层图画条形图"><a href="#用层图画条形图" class="headerlink" title="用层图画条形图"></a>用层图画条形图</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>testD3-3-drawingDivBar<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://localhost:8080/spring/js/d3.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">//为同类层添加样式</div><div class="line">div.bar &#123;</div><div class="line">    display: inline-block;</div><div class="line">    width: 20px;</div><div class="line">    margin-right: 2px; //设置层之间的间隔</div><div class="line">    background-color: teal;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> dataset = [ <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span> ];</div><div class="line"></div><div class="line">    d3.select(<span class="string">"body"</span>).selectAll(<span class="string">"div"</span>)</div><div class="line">        .data(dataset)</div><div class="line">        .enter()</div><div class="line">        .append(<span class="string">"div"</span>)</div><div class="line">        .attr(<span class="string">"class"</span>, <span class="string">"bar"</span>) <span class="comment">//声明要为某类层设置属性</span></div><div class="line">        <span class="comment">//为没个特定的层设置属性</span></div><div class="line">        .style(<span class="string">"height"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> (d * <span class="number">5</span>) + <span class="string">"px"</span>;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="选择集与数据"><a href="#选择集与数据" class="headerlink" title="选择集与数据"></a>选择集与数据</h1><h2 id="选择元素"><a href="#选择元素" class="headerlink" title="选择元素"></a>选择元素</h2><ol>
<li><p>select 返回匹配选择器的第一个元素</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">d3.select(<span class="string">"body"</span>);          <span class="comment">//选择body元素</span></div><div class="line">d3.select(<span class="string">"#select"</span>);       <span class="comment">//选择id为select的元素</span></div><div class="line">d3.select(<span class="string">".content"</span>);      <span class="comment">//选择类为content的元素</span></div></pre></td></tr></table></figure>
</li>
<li><p>selectAll 返回匹配选择器的所有元素</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">d3.selectAll(<span class="string">"p"</span>);          <span class="comment">//选择所有的p元素</span></div><div class="line">d3.selectAll(<span class="string">".content"</span>);   <span class="comment">//选择类为content的所有元素</span></div><div class="line">d3.selectAll(<span class="string">"ul li"</span>);      <span class="comment">//选择ul中所有的li元素</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="选择集"><a href="#选择集" class="headerlink" title="选择集"></a>选择集</h2><h3 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h3><ol>
<li>selection.<strong>empty()</strong> 如果选择集为空,则返回true;否则,返回 false</li>
<li>selection.<strong>node()</strong> 返回第一个非空元素,如果选择集为空,返回 false</li>
<li>selection.<strong>size()</strong> 返回选择集中地元素个数</li>
</ol>
<h3 id="设定和获取属性"><a href="#设定和获取属性" class="headerlink" title="设定和获取属性"></a>设定和获取属性</h3><ol>
<li>selection.<strong>attr</strong>(name[,value])<br>name是属性名,value 是属性值,如果省略 value,则返回当前的属性值;如果不省略,则将属性 name 设置为 value.</li>
<li>selection.<strong>classed</strong>(name[,value])<br>设定或获取选择集的 CSS 类, name是类命, value 是一个布尔值.布尔值表示该类是否开启.<br>如果省略第二个参数 value, 则返回一个布尔值,表示类是否开启;</li>
<li>selection.<strong>style</strong>(name[,value,[,priority]])<br>设定或获取选择集的的样式, name 是样式名,value 式样是值,如果只有第一个参数,则返回该样式的值.</li>
<li>selection.<strong>property</strong>(name[,value])<br>有部分属性,不能用attr()设定和获取,最典型的是文本输入框的 value 属性,此属性不会再标签中显示.<br>name是属性名,value 是属性值,如果省略 value,则返回当前的属性值.</li>
<li>selection.<strong>text</strong>([value])<br>设定或获取选择集的文本内容,如果省略 value,则返回当前的文本内容(相当于 DOM的 innerText,不包括元素内部的标签)</li>
<li>selection.<strong>html</strong>([value])<br>设定或获取选择集的内部 HTML 内容(相当于 DOM 的 innerHTML,包括元素内部的标签)</li>
</ol>
<h2 id="添加-插入和删除"><a href="#添加-插入和删除" class="headerlink" title="添加,插入和删除"></a>添加,插入和删除</h2><ol>
<li>selection.<strong>append</strong>(name)<br>在选择集的末尾添加一个元素,name 为元素名称.</li>
<li>selection.<strong>insert</strong>(name[,before])<br>在选择集中的制定元素之前插入一个元素, name 是被插入的元素, before 是 CSS 选择器的名称.</li>
<li>selection.<strong>remove</strong>()<br>删除选择集中的元素.</li>
</ol>
<h2 id="数据绑定-1"><a href="#数据绑定-1" class="headerlink" title="数据绑定"></a>数据绑定</h2><ol>
<li>selection.<strong>datum</strong>([value])<br>选择集中的每一个元素都绑定相同的数据 value.</li>
<li>selection.<strong>data</strong>([values[,key]])<br>选择集中的每一个元素分别绑定数组 values 的每一项,key 是一个键函数没用于指定绑定数组时的对应规则.</li>
</ol>
<h3 id="datum"><a href="#datum" class="headerlink" title="datum()"></a>datum()</h3><p>D3中被绑定的数据大多数用上述刑事:<strong>定义一个无名函数function(d,i),在函数体中使用d和i.</strong><br><strong>后被绑定数据的选择几种添加元素后,新元素会继承该数据</strong>.</p>
<h3 id="data"><a href="#data" class="headerlink" title="data()"></a>data()</h3><p>data() 能将数组各项分别绑定到选择集的各元素上,并且能够制定绑定的规则.<br>当数组长度与元素数量不一致时,data()也能够处理.当数组长度大于元素数量时,为多余数据预留元素为止,以便将来插入新元素;当数组长度小于元素数量时,能获取多余元素的位置,以便将来删除.<br>data()返回一个对象,对象里面包含 update 部分,还有两个方法:一个是 enter()<br>,返回 enter 部分;另一个是 exit(),返回 exit 部分.</p>
<h3 id="绑定的顺序"><a href="#绑定的顺序" class="headerlink" title="绑定的顺序"></a>绑定的顺序</h3><p>默认情况下,data()是按照索引号顺序绑定,如果用 data()的第二个参数[键函数],可以不按默认顺序进行.<br><strong>只有在选择集原来已经绑定有数据的情况下,使用键函数才有效果</strong>.</p>
<h2 id="选择集的处理"><a href="#选择集的处理" class="headerlink" title="选择集的处理"></a>选择集的处理</h2><h3 id="enter的处理方法"><a href="#enter的处理方法" class="headerlink" title="enter的处理方法"></a>enter的处理方法</h3><p>通常,从服务器读取数据后,网页中是没有与之对应的元素的.因此,有一个很常见的用法:<strong>选择一个空集,然后使用enter().append()的形式来添加足够数量的元素</strong>.</p>
<h3 id="exit的处理方法"><a href="#exit的处理方法" class="headerlink" title="exit的处理方法"></a>exit的处理方法</h3><p>如果存在多余的元素,没有数据与之对应,那么就需要删除元素.使用<strong>remove()</strong>即可删除元素.</p>
<h3 id="处理模板"><a href="#处理模板" class="headerlink" title="处理模板"></a>处理模板</h3><p>无论数据和元素如何,其处理方法都是类似的.可以归纳成一个处理模板,用户不必理会数组长度和元素数量之间的关系,模板代码如下:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dataset = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>];</div><div class="line"><span class="keyword">var</span> p = d3.select(<span class="string">"body"</span>).selectAll(<span class="string">"p"</span>);</div><div class="line"></div><div class="line"><span class="comment">//绑定数据后,分别返回update,enter,exit部分</span></div><div class="line"><span class="keyword">var</span> update = p.updata(dataset);</div><div class="line"><span class="keyword">var</span> enter = update.enter();</div><div class="line"><span class="keyword">var</span> exit = update.exit();</div><div class="line"></div><div class="line">update.text(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123; <span class="keyword">return</span> d;&#125;);</div><div class="line"></div><div class="line">enter.append(<span class="string">"p"</span>)</div><div class="line">    .text(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123; <span class="keyword">return</span> d;&#125;);</div><div class="line"></div><div class="line">exit.remove();</div></pre></td></tr></table></figure></p>
<h3 id="过滤器-selection-filter"><a href="#过滤器-selection-filter" class="headerlink" title="过滤器 selection.filter()"></a>过滤器 selection.filter()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">selection.filter(<span class="function"><span class="keyword">function</span>(<span class="params">d,i</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(d&gt;<span class="number">20</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="选择集的顺序-sort"><a href="#选择集的顺序-sort" class="headerlink" title="选择集的顺序 sort()"></a>选择集的顺序 sort()</h3><p>sort()可以根据被绑定数据重新排列选择集中的元素.sort()的参数是一个<strong>无名函数</strong>,该函数也称作<strong>比较器</strong>.</p>
<h3 id="each-的应用"><a href="#each-的应用" class="headerlink" title="each()的应用"></a>each()的应用</h3><p>each()允许对选择集的各元素分别处理.</p>
<h3 id="call-的应用"><a href="#call-的应用" class="headerlink" title="call()的应用"></a>call()的应用</h3><p>call()允许将选择集自身作为参数,传递给某一函数.<br><code>d3.selectAll(&quot;div&quot;).call(myfun);</code><br>上免得代码将选择集作为汆熟传递给myfun函数使用.等同于以下代码:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myfun</span>(<span class="params">selection</span>)</span>&#123;</div><div class="line">    selection.attr(<span class="string">"name"</span>,<span class="string">"value"</span>);</div><div class="line">&#125;</div><div class="line">myfun(d3.selectAll(<span class="string">"div"</span>));</div></pre></td></tr></table></figure></p>
<h2 id="数组的处理"><a href="#数组的处理" class="headerlink" title="数组的处理"></a>数组的处理</h2><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><ol>
<li><p><strong>d3.ascending(a,b)</strong><br>递增函数.如果a小于b,返回-1;如果a大于b,返回1;如果a等于b,返回0.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> numbers = [<span class="number">54</span>,<span class="number">23</span>,<span class="number">77</span>,<span class="number">11</span>,<span class="number">34</span>];</div><div class="line">numbers.sort(d3.ascending);</div><div class="line"><span class="built_in">console</span>.log(numbers); <span class="comment">//[11,23,34,54,77]</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>d3.descending(a,b)</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> numbers = [<span class="number">54</span>,<span class="number">23</span>,<span class="number">77</span>,<span class="number">11</span>,<span class="number">34</span>];</div><div class="line">numbers.sort(d3.descending);</div><div class="line"><span class="built_in">console</span>.log(numbers); <span class="comment">//[77,54,34,23,11]</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="求值"><a href="#求值" class="headerlink" title="求值"></a>求值</h3><ol>
<li><strong>d3.min(array[,accessor])</strong> 返回数组最小值</li>
<li><strong>d3.max(array[,accessor])</strong> 返回数组最大值</li>
<li><strong>d3.extend(array[,accessor])</strong> 返回数组最小值和最大值</li>
</ol>
<p>第一个参数array是数组,第二个参数accessor是可选参数,accessor是一个函数,制定之后,数组各项首先会调用accessor,然后再使用原函数function进行处理.</p>
<ol>
<li><strong>d3.sum(array[,accessor])</strong><br>返回数组的综合,如果数组为空,则返回0.</li>
<li><strong>d3.mean(array[,accessor])</strong><br>返回数组的平均值,如果数组为空,则返回undefined.</li>
<li><strong>d3.median(array[,accessor])</strong><br>求数组的中间值,如果数组为空,则返回undefined.<br>当数组中存在undefined和NaN,d3.sum(),d3.mean()和d3.median()一样,会忽略掉他们.如果数组的有效长度为奇数,则中间值为数组经过递增排序之后位于正中间的值;如果有效长度为偶数,则中间值为经过递增排序后位于正中间的两个数的平均值.</li>
<li><strong>d3.quantile(numbers,p)</strong><br>求取p分位点的值,p的范围为[0,1].数组需先递增排序.</li>
<li><strong>d3.variance(array[,accessor])</strong> 求方差.</li>
<li><strong>d3.deviation(array[,accessor])</strong> 求标准差.</li>
<li><strong>d3.bisectLeft()</strong> 获取某数组项左边的位置.</li>
<li><strong>d3.bisectRight()/d3.bisect()</strong> 获取某数组项右边的位置.</li>
</ol>
<h3 id="操作数组"><a href="#操作数组" class="headerlink" title="操作数组"></a>操作数组</h3><ol>
<li><strong><em>d3.shuffle(array[,accessor])</em></strong> 随机排列数组.</li>
<li><strong><em>d3.merge(arrays)</em></strong> 合并两个数组</li>
<li><strong><em>d3.pairs(array)</em></strong> 返回相邻接的数组对</li>
<li><strong><em>d3.range([start,]stop[,step])</em></strong> 返回等差数列</li>
<li><strong><em>d3.permute(array,indexes)</em></strong> 根据指定的索引号数组返回排列后的数组.<br>此函数可以用摸个索引号组成的数组,返回更具索引号排列后的新数组,原数组不变.</li>
<li><strong><em>d3.zip(arrays…)</em></strong> 用多个数组来制作数组的数组.</li>
<li><strong><em>d3.transpose(matrix)</em></strong> 求转置矩阵<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]];</div><div class="line"><span class="comment">//转置后,原数组a不变,结果保存咋返回值中</span></div><div class="line"><span class="keyword">var</span> t =d3.transpose(a);</div><div class="line"><span class="built_in">console</span>.log(t);</div><div class="line"><span class="comment">//输出[[1,2],[3,4],[3,6]]</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="映射-Map"><a href="#映射-Map" class="headerlink" title="映射(Map)"></a>映射(Map)</h3><p>映射(Map)是十分常见的一种数据结构,由一系列键(Key)和值(value)组成.<br>d3.map()能够结构映射.包括以下方法:</p>
<ol>
<li><p><strong><em>d3.map([object][,key])</em></strong><br> 构造映射.第一个参数是源数组,第二个参数用于制定映射的key.</p>
</li>
<li><p><strong><em>map.has(key)</em></strong><br> 如果指定的key存在,则返回true;反之,则返回false.</p>
</li>
<li><p><strong><em>map.get(key)</em></strong><br> 如果指定的key存在,则返回key的value:否则,返回undefined.</p>
</li>
<li><p><strong><em>map.set(key,value)</em></strong><br> 对指定的key设定value,如果该key已经存在,则新value会覆盖旧value;如果该key不存在,则会添加一个新的value.</p>
</li>
<li><p><strong><em>map.remove(key)</em></strong><br> 如果指定的key存在,则将此key和value删除,并返回true;如果不存在返回false.</p>
</li>
<li><p><strong><em>map.keys()</em></strong><br> 以数组形式返回该map所有的key.</p>
</li>
<li><p><strong><em>map.valuse()</em></strong><br> 以数组形式返回返回该map所有的value.</p>
</li>
<li><p><strong><em>map.entries()</em></strong><br>以数组形式返回返回该map所有的key和value.</p>
</li>
<li><p><strong><em>map.forEach(function(key,value))</em></strong><br> 分别对该映射中的每一项调用function函数,function函数传入两个参数:key和value.分别代表每一项的key和value.</p>
</li>
<li><p><strong><em>map.empty()</em></strong><br>如果该映射为空,返回true;否则返回false.</p>
</li>
<li><p><strong><em>map.size()</em></strong><br>返回该映射的大小.</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//用于构建映射的数组</span></div><div class="line"><span class="keyword">var</span> dataset = [ &#123;<span class="attr">id</span>:<span class="number">1000</span>,<span class="attr">color</span>:<span class="string">"red"</span>&#125;,</div><div class="line">                &#123;<span class="attr">id</span>:<span class="number">1001</span>,<span class="attr">color</span>:<span class="string">"green"</span>&#125;,</div><div class="line">                &#123;<span class="attr">id</span>:<span class="number">1002</span>,<span class="attr">color</span>:<span class="string">"blue"</span>&#125;</div><div class="line">];</div><div class="line"><span class="comment">//以数组dataset构建映射,并以其中各项的id作为键</span></div><div class="line"><span class="keyword">var</span> map = d3.map(dataset,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;<span class="keyword">return</span> d.id&#125;);</div><div class="line"></div><div class="line">map.has(<span class="number">1001</span>);      <span class="comment">//返回true</span></div><div class="line">map.has(<span class="number">2003</span>);      <span class="comment">//返回false</span></div><div class="line"></div><div class="line">map.get(<span class="number">1001</span>);      <span class="comment">//返回&#123;id:1001,color:"green"&#125;</span></div><div class="line">map.get(<span class="number">2003</span>);      <span class="comment">//返回undefined</span></div><div class="line"></div><div class="line"><span class="comment">//将1001键的值设置为&#123;id:1001,color:"yellow"&#125;</span></div><div class="line">map.set(<span class="number">1001</span>,&#123;<span class="attr">id</span>:<span class="number">1001</span>,<span class="attr">color</span>:<span class="string">"yellow"</span>&#125;);</div><div class="line"></div><div class="line"><span class="comment">//将1001键的值设置为&#123;id:1001,color:"white"&#125;</span></div><div class="line">map.set(<span class="number">1003</span>,&#123;<span class="attr">id</span>:<span class="number">1003</span>,<span class="attr">color</span>:<span class="string">"white"</span>&#125;);</div><div class="line"></div><div class="line">map.remove(<span class="number">1001</span>);   <span class="comment">//删除键为1001的键和值</span></div><div class="line"></div><div class="line">map.keys();         <span class="comment">//返回["1000","1002","1003"]</span></div><div class="line">map.values();       <span class="comment">//返回所有的值</span></div><div class="line">map.entries();      <span class="comment">//返回所有的键和值</span></div><div class="line"></div><div class="line">map.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key,value</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(key,value);</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">map.empty();        <span class="comment">//返回false</span></div><div class="line">map.size();         <span class="comment">//返回3</span></div></pre></td></tr></table></figure>
<h3 id="集合-Set"><a href="#集合-Set" class="headerlink" title="集合(Set)"></a>集合(Set)</h3><h4 id="1-d3-set-array"><a href="#1-d3-set-array" class="headerlink" title="1. d3.set([array])"></a>1. d3.set([array])</h4><pre><code>使用数组来构建集合,如果数组里有重复的元素,则只添加其中一项.
</code></pre><h4 id="2-set-has-value"><a href="#2-set-has-value" class="headerlink" title="2. set.has(value)"></a>2. set.has(value)</h4><pre><code>如果集合中有制定元素,则返回true;如果没有,返回false;
</code></pre><h4 id="3-set-add-value"><a href="#3-set-add-value" class="headerlink" title="3. set.add(value)"></a>3. set.add(value)</h4><pre><code>如果该集合中没有指定元素,则将其添加到集合中,并返回钙元素;如果有,则不添加.
</code></pre><h4 id="4-set-remove-value"><a href="#4-set-remove-value" class="headerlink" title="4. set.remove(value)"></a>4. set.remove(value)</h4><pre><code>如果该集合中有指定元素,则将其删除并返回true;否则返回false;
</code></pre><h4 id="5-set-valuse"><a href="#5-set-valuse" class="headerlink" title="5. set.valuse()"></a>5. set.valuse()</h4><pre><code>以数组形式返回该集合中所有的元素.
</code></pre><h4 id="6-set-forEach-function-value"><a href="#6-set-forEach-function-value" class="headerlink" title="6. set.forEach(function(value))"></a>6. set.forEach(function(value))</h4><pre><code>对每一个元素都调用function函数,函数里传入一个参数,即该元素的值.
</code></pre><h4 id="7-set-empty"><a href="#7-set-empty" class="headerlink" title="7. set.empty()"></a>7. set.empty()</h4><pre><code>如果该集合为空,则返回true,否则返回false;
</code></pre><h4 id="8-set-size"><a href="#8-set-size" class="headerlink" title="8. set.size()"></a>8. set.size()</h4><pre><code>返回该集合的大小.
</code></pre><h3 id="嵌套结构-Nest"><a href="#嵌套结构-Nest" class="headerlink" title="嵌套结构(Nest)"></a>嵌套结构(Nest)</h3><p>首先看个简单地例子:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> persons = [</div><div class="line">    &#123;<span class="attr">id</span>:<span class="number">100</span>,<span class="attr">name</span>:<span class="string">"张某某"</span>,<span class="attr">year</span>:<span class="number">1989</span>,<span class="attr">hometown</span>:<span class="string">"北京"</span>&#125;,</div><div class="line">    &#123;<span class="attr">id</span>:<span class="number">101</span>,<span class="attr">name</span>:<span class="string">"李某某"</span>,<span class="attr">year</span>:<span class="number">1987</span>,<span class="attr">hometown</span>:<span class="string">"上海"</span>&#125;,</div><div class="line">    &#123;<span class="attr">id</span>:<span class="number">102</span>,<span class="attr">name</span>:<span class="string">"王某某"</span>,<span class="attr">year</span>:<span class="number">1989</span>,<span class="attr">hometown</span>:<span class="string">"广州"</span>&#125;,</div><div class="line">    &#123;<span class="attr">id</span>:<span class="number">103</span>,<span class="attr">name</span>:<span class="string">"赵某某"</span>,<span class="attr">year</span>:<span class="number">1987</span>,<span class="attr">hometown</span>:<span class="string">"广州"</span>&#125;,</div><div class="line">    &#123;<span class="attr">id</span>:<span class="number">104</span>,<span class="attr">name</span>:<span class="string">"周某某"</span>,<span class="attr">year</span>:<span class="number">1992</span>,<span class="attr">hometown</span>:<span class="string">"重庆"</span>&#125;,</div><div class="line">];</div><div class="line"><span class="keyword">var</span> nest = d3.nest()</div><div class="line">            <span class="comment">//将year作为第1个键</span></div><div class="line">            .key(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;<span class="keyword">return</span> d.year;&#125;)</div><div class="line">            <span class="comment">//将hometown作为第2个键</span></div><div class="line">            .key(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;<span class="keyword">return</span> d.hometown;&#125;)</div><div class="line">            <span class="comment">//指定将应用嵌套结构的数组为persons</span></div><div class="line">            .entries(persons);</div><div class="line"></div><div class="line">consoel.log(nest);</div><div class="line"><span class="comment">//输出数组表示的结构</span></div><div class="line">[&#123;<span class="attr">key</span>:<span class="number">1987</span>,<span class="attr">valuse</span>:[</div><div class="line">    &#123;<span class="attr">key</span>:<span class="string">"上海"</span>,<span class="attr">values</span>:[</div><div class="line">        &#123;<span class="attr">id</span>:<span class="number">101</span>,<span class="attr">name</span>:<span class="string">"李某某"</span>,<span class="attr">year</span>:<span class="number">1987</span>,<span class="attr">hometown</span>:<span class="string">"上海"</span>&#125;</div><div class="line">    ]&#125;,</div><div class="line">    &#123;<span class="attr">key</span>:<span class="string">"广州"</span>,<span class="attr">values</span>:[</div><div class="line">        &#123;第:<span class="number">103</span>,<span class="attr">name</span>:<span class="string">"赵某某,"</span>,<span class="attr">year</span>:<span class="number">1987</span>,<span class="attr">hometown</span>:<span class="string">"广州"</span>&#125;</div><div class="line">    ]&#125;</div><div class="line">]&#125;,</div><div class="line">&#123;<span class="attr">key</span>:<span class="number">1989</span>,<span class="attr">valuse</span>:[</div><div class="line">    &#123;<span class="attr">key</span>:<span class="string">"北京"</span>,values[</div><div class="line">        &#123;<span class="attr">id</span>:<span class="number">100</span>,<span class="attr">name</span>:<span class="string">"张某某"</span>,<span class="attr">year</span>:<span class="number">1989</span>,<span class="attr">hometown</span>:<span class="string">"北京"</span>&#125;</div><div class="line">    ]&#125;,</div><div class="line">    &#123;<span class="attr">key</span>:<span class="string">"广州"</span>,<span class="attr">valuse</span>:[</div><div class="line">        &#123;<span class="attr">id</span>:<span class="number">102</span>,<span class="attr">name</span>:<span class="string">"王某某"</span>,<span class="attr">year</span>:<span class="number">1989</span>,<span class="attr">hometown</span>:<span class="string">"广州"</span>&#125;</div><div class="line">    ]&#125;</div><div class="line">]&#125;,</div><div class="line">&#123;<span class="attr">key</span>:<span class="number">1992</span>,<span class="attr">valuse</span>:[</div><div class="line">    &#123;<span class="attr">key</span>:<span class="string">"重庆"</span>,<span class="attr">values</span>:[</div><div class="line">        &#123;<span class="attr">id</span>:<span class="number">104</span>,<span class="attr">name</span>:<span class="string">"周某某"</span>,<span class="attr">year</span>:<span class="number">1992</span>,<span class="attr">hometown</span>:<span class="string">"重庆"</span>&#125;</div><div class="line">    ]&#125;</div><div class="line">]&#125;]</div></pre></td></tr></table></figure></p>
<h4 id="1-nest-sortKeys-comparator"><a href="#1-nest-sortKeys-comparator" class="headerlink" title="1. nest.sortKeys(comparator)"></a>1. nest.sortKeys(comparator)</h4><pre><code>按照键对嵌套结构进行排序,接在nest.key()后使用.
</code></pre><h4 id="2-nest-sortValues-comparator"><a href="#2-nest-sortValues-comparator" class="headerlink" title="2. nest.sortValues(comparator)"></a>2. nest.sortValues(comparator)</h4><pre><code>按照值对嵌套结构进行排序.
</code></pre><h4 id="3-nest-map-array-mapType"><a href="#3-nest-map-array-mapType" class="headerlink" title="3. nest.map(array[,mapType])"></a>3. nest.map(array[,mapType])</h4><pre><code>以映射的形式输出数组.
</code></pre><h2 id="柱状图-Bar-Chart"><a href="#柱状图-Bar-Chart" class="headerlink" title="柱状图 (Bar Chart)"></a>柱状图 (Bar Chart)</h2><p> 一般情况下,柱形图包括:矩形,坐标轴和文字.</p>
<h3 id="矩形和文字"><a href="#矩形和文字" class="headerlink" title="矩形和文字"></a>矩形和文字</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> width = <span class="number">400</span>;</div><div class="line"><span class="keyword">var</span> height= <span class="number">400</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> svg = d3.select(<span class="string">"body"</span>)</div><div class="line">            .append(<span class="string">"svg"</span>)</div><div class="line">            .attr(<span class="string">"width"</span>,width)</div><div class="line">            .attr(<span class="string">"height"</span>,height);</div><div class="line"></div><div class="line"><span class="comment">//定义上下左右的边距</span></div><div class="line"><span class="keyword">var</span>  padding=&#123; <span class="attr">top</span> :<span class="number">20</span>,<span class="attr">right</span>:<span class="number">20</span>,<span class="attr">bottom</span>:<span class="number">20</span>,<span class="attr">left</span>:<span class="number">20</span>&#125;;</div><div class="line"></div><div class="line"><span class="comment">//矩形所占的宽度(包括空白),单位为像素</span></div><div class="line"><span class="keyword">var</span> rectStep = <span class="number">35</span>;</div><div class="line"></div><div class="line"><span class="comment">//举行所占的宽度(不包括空白),单位为像素</span></div><div class="line"><span class="keyword">var</span> rectWidth = <span class="number">30</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> rect = svg.selectAll(<span class="string">"rect"</span>)</div><div class="line">            .data(dataset)      <span class="comment">//绑定数据</span></div><div class="line">            .enter()            <span class="comment">//获取enter部分</span></div><div class="line">            .append(<span class="string">"rect"</span>)     <span class="comment">//添加rect元素,使其与绑定数组的长度一致</span></div><div class="line">            .attr(<span class="string">"fill"</span>,<span class="string">"steelble"</span>)</div><div class="line">            .attr(<span class="string">"x"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d,i</span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> padding.left + i*retStep;</div><div class="line">            &#125;)</div><div class="line">            .attr(<span class="string">"y"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">                <span class="comment">//设置举行的y坐标</span></div><div class="line">                <span class="keyword">return</span> height - padding.bottom - d;</div><div class="line">            &#125;)</div><div class="line">            .attr(<span class="string">"width"</span>,rectWidth)    <span class="comment">//设置矩形的宽度</span></div><div class="line">            .attr(<span class="string">"height"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">                <span class="comment">//设置矩形的高度</span></div><div class="line">                <span class="keyword">return</span> d;</div><div class="line">                &#125;)</div></pre></td></tr></table></figure>
<h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><p>本届将制作一个能够随着数据的更新实时变化的柱形图.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//获取矩形update部分</span></div><div class="line">    <span class="keyword">var</span> updateRect = svg.selectAll(<span class="string">"rect"</span>)</div><div class="line">                    .data(dateset);</div><div class="line"></div><div class="line">    <span class="comment">//获取举行的enter部分</span></div><div class="line">    <span class="keyword">var</span> enterRect = updateRect.enter();</div><div class="line"></div><div class="line">    <span class="comment">//获取举行的exit部分</span></div><div class="line">    <span class="keyword">var</span> exitRect = updateRext.exit();</div><div class="line"></div><div class="line">    <span class="comment">//获取文字的update部分</span></div><div class="line">    <span class="keyword">var</span> updateText = svg.selectAll(<span class="string">"text"</span>)</div><div class="line">                    .data(dataset);</div><div class="line"></div><div class="line">    <span class="comment">//获取文字的enter部分</span></div><div class="line">    <span class="keyword">var</span> enterText = updateText.enter();</div><div class="line">    <span class="comment">//获取文字的exit部分</span></div><div class="line">    <span class="keyword">var</span> exitText = updateText.exit();</div><div class="line"></div><div class="line">    <span class="comment">//矩形的update部分的处理方法</span></div><div class="line">    updateRect.attr(<span class="string">"fill"</span>,<span class="string">"steelblue"</span>)</div><div class="line">            .attr(<span class="string">"x"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d,i</span>)</span>&#123;</div><div class="line">                <span class="comment">//设置矩形的x坐标</span></div><div class="line">                <span class="keyword">return</span> padding.left+i*rectStep;</div><div class="line">            &#125;)</div><div class="line">            .attr(<span class="string">"y"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">                <span class="comment">//设置矩形的y坐标</span></div><div class="line">                <span class="keyword">return</span> height- padding.bottom - d ;</div><div class="line">            &#125;)</div><div class="line">            .attr(<span class="string">"width"</span>,rectWidth)<span class="comment">//设置矩形的高度</span></div><div class="line">            .attr(<span class="string">"height"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">                <span class="comment">//设置矩形的高度</span></div><div class="line">                <span class="keyword">return</span> d;</div><div class="line">            &#125;);</div><div class="line">    <span class="comment">//矩形的exit部分的处理方法</span></div><div class="line">    exitRext.remove();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>update部分的处理方法是更新属性,enter部分的处理方法是添加元素后再赋予其相应的属性,exit部分的处理方法则是删除掉多余的元素.<br>下面在HTML中添加两个按钮,一个用于排序,一个用于增加数据.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"mysort()"</span>&gt;</span>排序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"myadd()"</span>&gt;</span>增加数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>给两个按钮定义了两个时间函数,一旦单机事件发生,分别调用mysort()和myadd().<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">mysort</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     dataset.sort(d3.ascending);<span class="comment">//排序</span></div><div class="line">     draw();</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">myadd</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     dataset.push(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">100</span>));<span class="comment">//添加一个项</span></div><div class="line">     draw();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="比例尺和坐标轴"><a href="#比例尺和坐标轴" class="headerlink" title="比例尺和坐标轴"></a>比例尺和坐标轴</h1><h2 id="定量比例尺-指当定义域是连续的情况"><a href="#定量比例尺-指当定义域是连续的情况" class="headerlink" title="定量比例尺(指当定义域是连续的情况)"></a>定量比例尺(指当定义域是连续的情况)</h2><p>每个比例尺都需要指定一个domain(定义域)和range(值域).</p>
<h3 id="线性比例尺"><a href="#线性比例尺" class="headerlink" title="线性比例尺"></a>线性比例尺</h3><h4 id="d3-scale-linear"><a href="#d3-scale-linear" class="headerlink" title="d3.scale.linear()"></a>d3.scale.linear()</h4><p>创建一个线性比例尺.</p>
<h4 id="linear-x"><a href="#linear-x" class="headerlink" title="linear(x)"></a>linear(x)</h4><p>熟吃一个在定义域内的x值,返回定义域内对应的值.</p>
<h4 id="linear-domain-numbers"><a href="#linear-domain-numbers" class="headerlink" title="linear.domain([numbers])"></a>linear.domain([numbers])</h4><p>设定或获取定义域.</p>
<h4 id="linear-range-values"><a href="#linear-range-values" class="headerlink" title="linear.range([values])"></a>linear.range([values])</h4><p>设定或获取值域.</p>
<h4 id="linear-rangeRound-values"><a href="#linear-rangeRound-values" class="headerlink" title="linear.rangeRound([values])"></a>linear.rangeRound([values])</h4><p>代替range()使用,比例尺输出值会进行四舍五入的运输.结果为整数.</p>
<h4 id="linear-clamp-boolean"><a href="#linear-clamp-boolean" class="headerlink" title="linear.clamp([boolean])"></a>linear.clamp([boolean])</h4><p>默认被设置为false,当该比例尺接收一个超出定义域范围内的值时,依然能够按照同样的计算方法计算得到一个值,这个值可能是超出值域范围的.如果设置为true,则任何超出值域范围的值,都会被收缩到值域范围内</p>
<h4 id="linear-nice-count"><a href="#linear-nice-count" class="headerlink" title="linear.nice([count])"></a>linear.nice([count])</h4><p>将定义域的返回扩展成比较理想的形式.例如,定义域为[0.5000000543,0.899995435234],则使用nice()<br>之后,其定义域变为[0.5,0.9].</p>
<h4 id="linear-ticks-count"><a href="#linear-ticks-count" class="headerlink" title="linear.ticks([count])"></a>linear.ticks([count])</h4><p>设定或获取定义域内具有代表性的值得数目.count默认为10,如果定义域为[0,70],则该函数返回[0,10,20,30,40,50,60,70].如果count设置为3,则返回[0,20,40,60].该方法主要用于选取坐标轴刻度.</p>
<h4 id="linear-tickFormat-count-format"><a href="#linear-tickFormat-count-format" class="headerlink" title="linear.tickFormat(count,[format])"></a>linear.tickFormat(count,[format])</h4><p>用于设置定义域内具有代表性的值得表示形式,如显示到小数点后两位,使用百分比的形式显示,主要用于坐标轴上.</p>
<h3 id="指数和对数比例尺"><a href="#指数和对数比例尺" class="headerlink" title="指数和对数比例尺"></a>指数和对数比例尺</h3><p>指数比例尺比线性比例尺多一个<strong><em>exponent()</em></strong>,用于指定指数.<br>对数比例尺多一个<strong><em>base()</em></strong>,用于指定底数.</p>
<h3 id="量子和分位比例尺"><a href="#量子和分位比例尺" class="headerlink" title="量子和分位比例尺"></a>量子和分位比例尺</h3><h4 id="量子比例尺-Quantize-Scale"><a href="#量子比例尺-Quantize-Scale" class="headerlink" title="量子比例尺(Quantize Scale)"></a>量子比例尺(Quantize Scale)</h4><p>量子比例尺的定义域是连续的,值域是离散的,根据输入值的不同,结果使其对应的离散值.<br>例如:<br>定义域:[0,10]<br>值域:[“red”,”green”,”blue”,”yellow”,”black”]<br>使用量子比例尺后,定义域将被分割成5段,每一段对应值域的一个值.[0,2)对应red,[2,4)对应green,以此类推.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义量子化比例尺</span></div><div class="line"><span class="keyword">var</span> quantize = d3.scale.quantize()</div><div class="line">            .domain(<span class="number">150</span>,<span class="number">0</span>)]</div><div class="line">            .range([<span class="string">"#888"</span>,<span class="string">"#666"</span>,<span class="string">"#444"</span>,<span class="string">"#222"</span>,<span class="string">"#000"</span>])</div><div class="line"><span class="comment">//定义圆的半径</span></div><div class="line"><span class="keyword">var</span> r = [<span class="number">45</span>,<span class="number">35</span>,<span class="number">35</span>,<span class="number">15</span>,<span class="number">5</span>];</div><div class="line"><span class="comment">//给body中添加一个svg元素</span></div><div class="line"><span class="keyword">var</span> svg = d3.select(<span class="string">"body"</span>).append(<span class="string">"svg"</span>)</div><div class="line">        .attr(<span class="string">"width"</span>,<span class="number">400</span>)</div><div class="line">        .attr(<span class="string">"height"</span>,<span class="number">400</span>);</div><div class="line"><span class="comment">//给svg里添加圆</span></div><div class="line">svg.selectAll(<span class="string">"circle"</span>)</div><div class="line">    .data(r)</div><div class="line">    .enter()</div><div class="line">    .append(<span class="string">"circle"</span>)</div><div class="line">    .attr(<span class="string">"cx"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d,i</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">50</span> +i *<span class="number">30</span>;</div><div class="line">    &#125;)</div><div class="line">    .attr(<span class="string">"cy"</span>,<span class="number">50</span>)</div><div class="line">    .attr(<span class="string">"r"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> d;</div><div class="line">    &#125;)</div><div class="line">    .attr(<span class="string">"fill"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> quantize(d);</div><div class="line">    &#125;)</div></pre></td></tr></table></figure></p>
<h4 id="分位比例尺-Quantile-Scale"><a href="#分位比例尺-Quantile-Scale" class="headerlink" title="分位比例尺(Quantile Scale)"></a>分位比例尺(Quantile Scale)</h4><p>也适用于将连续的定义域区域分成段,每一段对应到一个离散的值上.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//量子比例尺</span></div><div class="line"><span class="keyword">var</span> quantize = d3.scale.quantize()</div><div class="line">                .domain([<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">10</span>])</div><div class="line">                .range([<span class="number">1</span>,<span class="number">100</span>]);</div><div class="line"><span class="comment">//分位比例尺</span></div><div class="line"><span class="keyword">var</span> quantile = d3.scale.quantile()</div><div class="line">                .domain([<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">10</span>])</div><div class="line">                .range([<span class="number">1</span>,<span class="number">100</span>]);</div><div class="line"><span class="built_in">console</span>.log(quantize(<span class="number">3</span>)); <span class="comment">//输出1</span></div><div class="line"><span class="built_in">console</span>.log(quantile(<span class="number">3</span>)); <span class="comment">//输出100</span></div></pre></td></tr></table></figure></p>
<p>量子比例尺的分段值<strong><em>只与定义域的其实值和结束值</em></strong>有关.<br>而分位比例尺的分段值与<strong><em>定义域中存在的数值都有关</em></strong>.</p>
<h3 id="阈值比例尺-Threshold-Scale"><a href="#阈值比例尺-Threshold-Scale" class="headerlink" title="阈值比例尺(Threshold Scale)"></a>阈值比例尺(Threshold Scale)</h3><p>阈值(Threshold)又叫临界值,是指一个效应能够产生的最低值或最高值.阈值比例尺<br>是通过设定阈值,将连续的定义域映射到离散的值域里.</p>
<h2 id="序数比例尺-Ordinal-Scale"><a href="#序数比例尺-Ordinal-Scale" class="headerlink" title="序数比例尺(Ordinal Scale)"></a>序数比例尺(Ordinal Scale)</h2><p>序数比例尺的定义域和值域都是离散的.</p>
<h3 id="d3-scale-ordinal"><a href="#d3-scale-ordinal" class="headerlink" title="d3.scale.ordinal()"></a>d3.scale.ordinal()</h3><p>构建一个序数比例尺.</p>
<h3 id="ordinal-x"><a href="#ordinal-x" class="headerlink" title="ordinal(x)"></a>ordinal(x)</h3><p>输入定义域内一个离散值返,返回值域内一个离散值.</p>
<h3 id="ordinal-domain-values"><a href="#ordinal-domain-values" class="headerlink" title="ordinal.domain([values])"></a>ordinal.domain([values])</h3><p>设定或获取定义域.</p>
<h3 id="ordinal-range-values"><a href="#ordinal-range-values" class="headerlink" title="ordinal.range([values])"></a>ordinal.range([values])</h3><p>设定或获取值域.</p>
<h3 id="ordinalrangePoint-interval-padding"><a href="#ordinalrangePoint-interval-padding" class="headerlink" title="ordinalrangePoint(interval[,padding])"></a>ordinalrangePoint(interval[,padding])</h3><p>代替range设定值域.接受一个连续的区间,然后更具定义域中离散值的数量将其分段,分段值即作为值域的离散值.</p>
<h3 id="ordinal-rangeRoundPoints-interval-padding"><a href="#ordinal-rangeRoundPoints-interval-padding" class="headerlink" title="ordinal.rangeRoundPoints(interval[,padding])"></a>ordinal.rangeRoundPoints(interval[,padding])</h3><h3 id="ordinal-rangeBands-interval-padding-outerPadding"><a href="#ordinal-rangeBands-interval-padding-outerPadding" class="headerlink" title="ordinal.rangeBands(interval[,padding[,outerPadding]])"></a>ordinal.rangeBands(interval[,padding[,outerPadding]])</h3><p>代替range()设定值域.</p>
<h3 id="ordinal-rangeRoundBands-interval-padding-outerPadding"><a href="#ordinal-rangeRoundBands-interval-padding-outerPadding" class="headerlink" title="ordinal.rangeRoundBands(interval[,padding[,outerPadding]])"></a>ordinal.rangeRoundBands(interval[,padding[,outerPadding]])</h3><p>和rangeBands()一样,但是会将结果取整.</p>
<h3 id="ordinal-rangeBand"><a href="#ordinal-rangeBand" class="headerlink" title="ordinal.rangeBand()"></a>ordinal.rangeBand()</h3><p>返回使用rangeBands()设定后每一段的宽度.</p>
<h3 id="ordinal-rangeExtend"><a href="#ordinal-rangeExtend" class="headerlink" title="ordinal.rangeExtend()"></a>ordinal.rangeExtend()</h3><p>返回一个数组,数组里存有值域的最大值和最小值.</p>
<h2 id="坐标轴"><a href="#坐标轴" class="headerlink" title="坐标轴"></a>坐标轴</h2><h4 id="d3-svg-axis"><a href="#d3-svg-axis" class="headerlink" title="d3.svg.axis()"></a><strong>d3.svg.axis()</strong></h4><p>创建一个默认的新坐标轴</p>
<h4 id="axis-selection"><a href="#axis-selection" class="headerlink" title="axis(selection)"></a><strong>axis(selection)</strong></h4><p>将此坐标轴应用到指定的选择集上,该选择集需要包含有<svg>或<g>元素.</g></svg></p>
<h4 id="axis-scale-scale"><a href="#axis-scale-scale" class="headerlink" title="axis.scale([scale])"></a><strong>axis.scale([scale])</strong></h4><p>设定或获取坐标轴的比例尺.</p>
<h4 id="axis-orient-orientation"><a href="#axis-orient-orientation" class="headerlink" title="axis.orient([orientation])"></a><strong>axis.orient([orientation])</strong></h4><p>设定或获取坐标轴的方向,有四个值<strong>top/bottom/left/right</strong>.</p>
<h4 id="axis-ticks-argument…"><a href="#axis-ticks-argument…" class="headerlink" title="axis.ticks([argument…])"></a><strong>axis.ticks([argument…])</strong></h4><p>设定或获取坐标轴的分割数,默认为10.</p>
<h4 id="axis-tickValues-values"><a href="#axis-tickValues-values" class="headerlink" title="axis.tickValues([values])"></a><strong>axis.tickValues([values])</strong></h4><p>设定或获取坐标轴的指定刻度.</p>
<h4 id="axis-tickSize-inner-outer"><a href="#axis-tickSize-inner-outer" class="headerlink" title="axis.tickSize([inner,outer])"></a><strong>axis.tickSize([inner,outer])</strong></h4><p>设定或获取坐标轴的内外刻度的长度.</p>
<h4 id="axis-innerTickSize-size"><a href="#axis-innerTickSize-size" class="headerlink" title="axis.innerTickSize([size])"></a><strong>axis.innerTickSize([size])</strong></h4><p>设定或获取坐标轴的内刻度的长度.</p>
<h4 id="axis-tickFormat-format"><a href="#axis-tickFormat-format" class="headerlink" title="axis.tickFormat([format])"></a><strong>axis.tickFormat([format])</strong></h4><p>设定或获取刻度的格式.</p>
<h3 id="绘制方法"><a href="#绘制方法" class="headerlink" title="绘制方法"></a>绘制方法</h3><p>D3所绘制的坐标轴由<path></path>(坐标轴主直线),<line></line>(刻度),<text>(刻度文字)三种元素组成.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> width = <span class="number">600</span>;</div><div class="line"><span class="keyword">var</span> height = <span class="number">600</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> svg = d3.select(<span class="string">"body"</span>),append(<span class="string">"svg"</span>)</div><div class="line">            .attr(<span class="string">"width"</span>,width)</div><div class="line">            .attr(<span class="string">"height"</span>,height);</div><div class="line"></div><div class="line"><span class="comment">//坐标轴的线性比例尺</span></div><div class="line"><span class="keyword">var</span> xScale = d3.scale.linear()</div><div class="line">                .domain([<span class="number">0</span>,<span class="number">10</span>])</div><div class="line">                .range([<span class="number">0</span>,<span class="number">300</span>]);</div><div class="line"></div><div class="line"><span class="keyword">var</span> axis = d3.svg.axis()</div><div class="line">            .scale(xScale)<span class="comment">//使用上面定义的比例尺</span></div><div class="line">            orient(<span class="string">"bottom"</span>)<span class="comment">//刻度方向向下</span></div><div class="line"></div><div class="line"><span class="comment">//在SVG中添加一个包含坐标轴各元素的g元素</span></div><div class="line"><span class="keyword">var</span> gAxis = svg.append(<span class="string">"g"</span>)</div><div class="line">                .attr(<span class="string">"transform"</span>,<span class="string">"translate(80,80"</span>);<span class="comment">//平移(80,80)</span></div><div class="line"></div><div class="line"><span class="comment">//在gAxis中绘制坐标轴</span></div><div class="line">axis(gAxis);</div></pre></td></tr></table></figure></text></p>
<h3 id="5-3-2-刻度"><a href="#5-3-2-刻度" class="headerlink" title="5.3.2 刻度"></a>5.3.2 刻度</h3><h4 id="ticks-和tickValues"><a href="#ticks-和tickValues" class="headerlink" title="ticks()和tickValues()"></a><strong>ticks()和tickValues()</strong></h4><p>刻度值分别用ticks()和tickValues()来指定,</p>
<h4 id="tickSize-innderTickSize-和outerTickSize"><a href="#tickSize-innderTickSize-和outerTickSize" class="headerlink" title="tickSize(),innderTickSize()和outerTickSize()"></a><strong>tickSize(),innderTickSize()和outerTickSize()</strong></h4><p>若是首尾两个刻度的长度比内部要长.此时需要用到<strong>tickSize()</strong>,他的第一个参数是内部刻度的直线长度,第二个参数是首尾两个刻度的直线长度.</p>
<h4 id="tickFormat"><a href="#tickFormat" class="headerlink" title="tickFormat()"></a><strong>tickFormat()</strong></h4><p>刻度文字的格式通过tickFormat()设置,还需要用到d3.format().<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.tickFormat(d3.format(<span class="string">"$0.1f"</span>));</div></pre></td></tr></table></figure></p>
<h3 id="各比例尺的坐标轴"><a href="#各比例尺的坐标轴" class="headerlink" title="各比例尺的坐标轴"></a>各比例尺的坐标轴</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//线性比例尺</span></div><div class="line"><span class="keyword">var</span> linear = d3.scale.linear()</div><div class="line">            .domain([<span class="number">0</span>,<span class="number">1</span>])</div><div class="line">            .range([<span class="number">0</span>,<span class="number">500</span>]);</div><div class="line"></div><div class="line"><span class="comment">//指数比例尺</span></div><div class="line"><span class="keyword">var</span> pow = d3.scale.pow()</div><div class="line">            .exponent(<span class="number">2</span>)</div><div class="line">            .domain([<span class="number">0</span>,<span class="number">1</span>])</div><div class="line">            .range([<span class="number">0</span>,<span class="number">500</span>]);</div><div class="line"></div><div class="line"><span class="comment">//对数比例尺</span></div><div class="line"><span class="keyword">var</span> log =d3.scale.log()</div><div class="line">        .domain([<span class="number">0.01</span>,<span class="number">1</span>])</div><div class="line">        .range([<span class="number">0</span>,<span class="number">500</span>]);</div></pre></td></tr></table></figure>
<h2 id="柱形图的坐标轴"><a href="#柱形图的坐标轴" class="headerlink" title="柱形图的坐标轴"></a>柱形图的坐标轴</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义两个变量用来保存x和y轴的宽度.</span></div><div class="line"><span class="keyword">var</span> xAxisWidth =<span class="number">300</span>;</div><div class="line"><span class="keyword">var</span> yAxisWidth =<span class="number">300</span>;</div><div class="line"></div><div class="line"><span class="comment">//x轴徐比例尺(序数比例尺)</span></div><div class="line"><span class="keyword">var</span> xScale = d3.scale.ordinal()</div><div class="line">            .domain(d3.range(dataset.length))</div><div class="line">            .rangeRoundeBands([<span class="number">0</span>,xAxisWidth],<span class="number">0.2</span>);</div></pre></td></tr></table></figure>
<h2 id="散点图的制作"><a href="#散点图的制作" class="headerlink" title="散点图的制作"></a>散点图的制作</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//圆心数据</span></div><div class="line"><span class="keyword">var</span> center = [[<span class="number">0.5</span>,<span class="number">0.5</span>],[<span class="number">0.7</span>,<span class="number">0.8</span>],[<span class="number">0.4</span>,<span class="number">0.9</span>],</div><div class="line">            [<span class="number">0.11</span>,<span class="number">0.32</span>],[<span class="number">0.88</span>,<span class="number">0.25</span>],[<span class="number">0.75</span>,<span class="number">0.12</span>],</div><div class="line">            [<span class="number">0.5</span>,<span class="number">0.1</span>],[<span class="number">0.2</span>,<span class="number">0.3</span>],[<span class="number">0.4</span>,<span class="number">0.1</span>],[<span class="number">0.6</span>,<span class="number">0.7</span>]];</div><div class="line"></div><div class="line"><span class="comment">//x轴比例尺,在最大值前面乘以个1.2,是为了使得散点图不会有某一点存在于坐标轴的边缘上.</span></div><div class="line"><span class="keyword">var</span> xScale = d3.scale.linear()</div><div class="line">            .domain([<span class="number">0</span>,<span class="number">1.2</span>*d3.max(center,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> d[<span class="number">0</span>];</div><div class="line">            &#125;)])</div><div class="line">            .range([<span class="number">0</span>,xAxisWidth]);</div><div class="line"></div><div class="line"><span class="comment">//y轴比例尺</span></div><div class="line"><span class="keyword">var</span> yScale = d3.scale.linear()</div><div class="line">            .domain([<span class="number">0</span>,<span class="number">1.2</span>*d3.max(center,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> d[<span class="number">1</span>];</div><div class="line">            &#125;)])</div><div class="line">            .range([<span class="number">0</span>,yAxisWidth]);</div><div class="line"></div><div class="line"><span class="comment">//外边框</span></div><div class="line"><span class="keyword">var</span> padding = &#123;</div><div class="line">    <span class="attr">top</span>:<span class="number">30</span>,</div><div class="line">    <span class="attr">right</span>:<span class="number">30</span>,</div><div class="line">    <span class="attr">bottom</span>:<span class="number">30</span>,</div><div class="line">    <span class="attr">left</span>:<span class="number">30</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//绘制圆</span></div><div class="line"><span class="keyword">var</span> circle = svg.selectAll(<span class="string">"circle"</span>)</div><div class="line">            .data(center)</div><div class="line">            .eter()</div><div class="line">            .append(<span class="string">"circle"</span>)</div><div class="line">            .attr(<span class="string">"fill"</span>,<span class="string">"black"</span>)</div><div class="line">            .attr(<span class="string">"cx"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">                <span class="comment">//设置圆心的x坐标</span></div><div class="line">                <span class="keyword">return</span> padding.left + xScale(d[<span class="number">0</span>]);</div><div class="line">            &#125;)</div><div class="line">            .attr(<span class="string">"cy"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">                <span class="comment">//设置圆心的y坐标</span></div><div class="line">                <span class="keyword">return</span> height - padding.bottom - yScale(d[<span class="number">1</span>]);</div><div class="line">            &#125;)</div><div class="line">            .attr(<span class="string">"r"</span>,<span class="number">5</span>);</div></pre></td></tr></table></figure>
<h1 id="绘制"><a href="#绘制" class="headerlink" title="绘制"></a>绘制</h1><h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><h3 id="RGB"><a href="#RGB" class="headerlink" title="RGB"></a>RGB</h3><h4 id="d3-rgb-r-g-b"><a href="#d3-rgb-r-g-b" class="headerlink" title="d3.rgb(r,g,b)"></a><strong>d3.rgb(r,g,b)</strong></h4><h4 id="d3-rgb-color"><a href="#d3-rgb-color" class="headerlink" title="d3.rgb(color)"></a><strong>d3.rgb(color)</strong></h4><h4 id="d3-brighter-k"><a href="#d3-brighter-k" class="headerlink" title="d3.brighter([k])"></a><strong>d3.brighter([k])</strong></h4><p>颜色变得更明亮,RGB各通道的值乘以0.7^-k. 如果k省略,k值为1.返回一个新的颜色对象,不会改变当前颜色对象.</p>
<h4 id="d3-darker-k"><a href="#d3-darker-k" class="headerlink" title="d3.darker([k])"></a><strong>d3.darker([k])</strong></h4><p>颜色变得更暗.RGB个通道的值乘以0.7^k.返回一个新的颜色对象,不会改变当前颜色对象.</p>
<h4 id="rgb-hsl"><a href="#rgb-hsl" class="headerlink" title="rgb.hsl()"></a><strong>rgb.hsl()</strong></h4><p>返回该颜色对应的HSL值.</p>
<h4 id="rgb-toString"><a href="#rgb-toString" class="headerlink" title="rgb.toString()"></a><strong>rgb.toString()</strong></h4><p>以字符串形式返回颜色值,如”#ffeeaa”</p>
<h3 id="HSL"><a href="#HSL" class="headerlink" title="HSL"></a>HSL</h3><h4 id="d3-hsl-h-s-l"><a href="#d3-hsl-h-s-l" class="headerlink" title="d3.hsl(h,s,l)"></a><strong>d3.hsl(h,s,l)</strong></h4><p>根据 h,s,l 的值来创建 HSL 颜色.</p>
<h4 id="d3-hsl-color"><a href="#d3-hsl-color" class="headerlink" title="d3.hsl(color)"></a><strong>d3.hsl(color)</strong></h4><p>根据字符串来创建 HSL 颜色.</p>
<h4 id="hsl-brighter-k"><a href="#hsl-brighter-k" class="headerlink" title="hsl.brighter([k])"></a><strong>hsl.brighter([k])</strong></h4><p>变得更亮.</p>
<h4 id="hsl-darker-k"><a href="#hsl-darker-k" class="headerlink" title="hsl.darker([k])"></a><strong>hsl.darker([k])</strong></h4><p>变得更暗.</p>
<h4 id="hsl-rgb"><a href="#hsl-rgb" class="headerlink" title="hsl.rgb()"></a><strong>hsl.rgb()</strong></h4><p>返回对应的 RGB 颜色.</p>
<h4 id="hsl-toString"><a href="#hsl-toString" class="headerlink" title="hsl.toString()"></a><strong>hsl.toString()</strong></h4><p>以 RGB 字符串形式输出该颜色.</p>
<h3 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h3><h4 id="d3-interpolate-a-b"><a href="#d3-interpolate-a-b" class="headerlink" title="d3.interpolate(a,b)"></a><strong>d3.interpolate(a,b)</strong></h4><h2 id="线段生成器"><a href="#线段生成器" class="headerlink" title="线段生成器"></a>线段生成器</h2><p>D3中引入了路径生成器.用于生成线段的程序,叫做线段生成器.</p>
<h3 id="d3-svg-line"><a href="#d3-svg-line" class="headerlink" title="d3.svg.line()"></a>d3.svg.line()</h3><p>创建一个线段生成器.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//线段的点数据,每一项是一个点 x和 y 坐标</span></div><div class="line"><span class="keyword">var</span> lines = [[<span class="number">80</span>,<span class="number">80</span>],[<span class="number">200</span>,<span class="number">100</span>],[<span class="number">200</span>,<span class="number">200</span>],[<span class="number">100</span>,<span class="number">00</span>]];</div><div class="line"></div><div class="line"><span class="comment">//创建一个线段生成器</span></div><div class="line"><span class="keyword">var</span> linePath = d3.svg.line();</div><div class="line"></div><div class="line"><span class="comment">//添加路径</span></div><div class="line">svg.append(<span class="string">"path"</span>)</div><div class="line">    .attr(<span class="string">"d"</span>,linePath(lines))</div><div class="line">    .attr(<span class="string">"stroke"</span>,<span class="string">"black"</span>)</div><div class="line">    .attr(<span class="string">"stroke-width"</span>,<span class="string">"3px"</span>)</div><div class="line">    .attr(<span class="string">"fill"</span>,<span class="string">"none"</span>)</div></pre></td></tr></table></figure></p>
<h3 id="line-data"><a href="#line-data" class="headerlink" title="line(data)"></a>line(data)</h3><p>使用线段生成器绘制 data 数据.</p>
<h3 id="line-x-x"><a href="#line-x-x" class="headerlink" title="line.x([x])"></a>line.x([x])</h3><p>设置或获取线段 x 坐标的访问器.</p>
<h3 id="line-y-y"><a href="#line-y-y" class="headerlink" title="line.y([y])"></a>line.y([y])</h3><h3 id="line-interpolate-interpolate"><a href="#line-interpolate-interpolate" class="headerlink" title="line.interpolate([interpolate])"></a>line.interpolate([interpolate])</h3><p>设置或获取线段的插值模式,共有13种,如: linear , linear-closed, step , basis, bundle, cardinal , monotone.</p>
<h3 id="line-tension-tension"><a href="#line-tension-tension" class="headerlink" title="line.tension([tension])"></a>line.tension([tension])</h3><p>设置或获取张力系数,当插值模式为 cardinal , cardinal-open , cardinal-closed 的时候有效.</p>
<h3 id="line-defined-defined"><a href="#line-defined-defined" class="headerlink" title="line.defined([defined])"></a>line.defined([defined])</h3><p>设置或获取一个访问器,用于确认线段是否存在,只有判定为存在的数据才被绘制.</p>
<h2 id="区域生成器"><a href="#区域生成器" class="headerlink" title="区域生成器"></a>区域生成器</h2><h2 id="弧生成器-Arc-Generator"><a href="#弧生成器-Arc-Generator" class="headerlink" title="弧生成器(Arc Generator)"></a>弧生成器(Arc Generator)</h2><h3 id="内半径访问器-innerRadius"><a href="#内半径访问器-innerRadius" class="headerlink" title="内半径访问器 innerRadius()"></a><strong>内半径访问器 innerRadius()</strong></h3><h3 id="外半径访问器-outerRadius"><a href="#外半径访问器-outerRadius" class="headerlink" title="外半径访问器 outerRadius()"></a><strong>外半径访问器 outerRadius()</strong></h3><h3 id="起始角度访问器-startAngle"><a href="#起始角度访问器-startAngle" class="headerlink" title="起始角度访问器 startAngle()"></a><strong>起始角度访问器 startAngle()</strong></h3><h3 id="终止角度访问器-endAngle"><a href="#终止角度访问器-endAngle" class="headerlink" title="终止角度访问器 endAngle()"></a><strong>终止角度访问器 endAngle()</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dataset = &#123; <span class="attr">startAngle</span>:<span class="number">0</span>,<span class="attr">endAngle</span>:<span class="built_in">Math</span>.PO*<span class="number">0.75</span>&#125;;</div><div class="line"><span class="comment">//创建一个弧生成器</span></div><div class="line"><span class="keyword">var</span> arcPath  = d3.svg.arc()</div><div class="line">                    .innerRadius(<span class="number">50</span>)</div><div class="line">                    .outerRadius(<span class="number">100</span>)</div><div class="line"><span class="comment">//添加路径</span></div><div class="line">svg.append(<span class="string">"path"</span>)</div><div class="line">    .attr(<span class="string">"d"</span>,arcPath(dataset))</div><div class="line">    .attr(<span class="string">"transform"</span>,<span class="string">"translate(250,250)"</span>)</div><div class="line">    .attr(<span class="string">"stroke"</span>,<span class="string">"black"</span>)</div><div class="line">    .attr(<span class="string">"stroke-width"</span>,<span class="string">"2px"</span>)</div><div class="line">    .attr(<span class="string">"fill"</span>,<span class="string">"yellow"</span>)</div></pre></td></tr></table></figure>
<p>绘制饼图<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义四段收尾相连的弧度</span></div><div class="line"><span class="keyword">var</span> dataset = [&#123; <span class="attr">startAngle</span>: <span class="number">0</span> , <span class="attr">endAngle</span> : <span class="built_in">Math</span>.PI * <span class="number">0.6</span>&#125;,</div><div class="line">             &#123; <span class="attr">startAngle</span>: <span class="built_in">Math</span>.PI * <span class="number">0.6</span> , <span class="attr">endAngle</span> : <span class="built_in">Math</span>.PI&#125;,</div><div class="line">             &#123; <span class="attr">startAngle</span>: <span class="built_in">Math</span>.PI , <span class="attr">endAngle</span> : <span class="built_in">Math</span>.PI * <span class="number">1.7</span>&#125;,</div><div class="line">             &#123; <span class="attr">startAngle</span>: <span class="built_in">Math</span>.PI * <span class="number">1.7</span> , <span class="attr">endAngle</span> : <span class="built_in">Math</span>.PI * <span class="number">2</span>&#125;]</div><div class="line"><span class="comment">//创建一个弧度生成器</span></div><div class="line"><span class="keyword">var</span> arcPath = d3.svg.arc()</div><div class="line">                .innerRadius(<span class="number">0</span>)</div><div class="line">                .outerRadius(<span class="number">100</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> color = d3.scale.category10();</div><div class="line"></div><div class="line"><span class="comment">//添加路径</span></div><div class="line">svg.selectAll(<span class="string">"path"</span>)</div><div class="line">    .data(dataset)</div><div class="line">    .enter()</div><div class="line">    .append(<span class="string">"path"</span>)</div><div class="line">    .attr(<span class="string">"d"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;<span class="keyword">return</span> arcPath(d);&#125;)</div><div class="line">    .attr(<span class="string">"transform"</span>,<span class="string">"translate(250,250)"</span>)</div><div class="line">    .attr(<span class="string">"stroke"</span>,<span class="string">"black"</span>)</div><div class="line">    .attr(<span class="string">"stroke-width"</span>,<span class="string">"2px"</span>)</div><div class="line">    .attr(<span class="string">"fill"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d,i</span>)</span>&#123;<span class="keyword">return</span> color(i);&#125;);</div></pre></td></tr></table></figure></p>
<p>给每一段添加一个标签文字,先确定文字的位置 : <strong>arc.centroid()</strong>可计算弧的中心位置.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">svg.selectAll(<span class="string">"text"</span>)</div><div class="line">    .data(dataset)</div><div class="line">    .append(<span class="string">"text"</span>)</div><div class="line">    .attr(<span class="string">"transform"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"translate(250,250)"</span>+</div><div class="line">                <span class="string">"translate("</span>+arcPath.centroid(d)+<span class="string">")"</span>; <span class="comment">//弧的中心位置</span></div><div class="line">    &#125;)</div><div class="line">    .attr(<span class="string">"text-anchor"</span>,<span class="string">"middle"</span>)</div><div class="line">    .attr(<span class="string">"fill"</span>,<span class="string">"white"</span>)</div><div class="line">    .attr(<span class="string">"font-size"</span>,<span class="string">"18px"</span>)</div><div class="line">    .text(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.floor((d.endAngle - d.startAngle) * <span class="number">180</span>/<span class="built_in">Math</span>.PI ) + <span class="string">"^"</span>;</div><div class="line">    &#125;)</div></pre></td></tr></table></figure></p>
<h2 id="符号生成器"><a href="#符号生成器" class="headerlink" title="符号生成器"></a>符号生成器</h2><h3 id="d3-svg-symbol"><a href="#d3-svg-symbol" class="headerlink" title="d3.svg.symbol()"></a><strong>d3.svg.symbol()</strong></h3><p>创建一个符号生成器</p>
<h3 id="symbol-datum-index"><a href="#symbol-datum-index" class="headerlink" title="symbol(datum[,index])"></a><strong>symbol(datum[,index])</strong></h3><p>返回指定数据 datum 的路径字符串</p>
<h3 id="symbol-type-type"><a href="#symbol-type-type" class="headerlink" title="symbol.type([type])"></a><strong>symbol.type([type])</strong></h3><p>设定或获取符号的类型.</p>
<h3 id="symbol-size-size"><a href="#symbol-size-size" class="headerlink" title="symbol.size([size])"></a><strong>symbol.size([size])</strong></h3><p>设定或获取符号的大小,单位是像素的平方.默认64.</p>
<h3 id="d3-svg-symbolTypes"><a href="#d3-svg-symbolTypes" class="headerlink" title="d3.svg.symbolTypes"></a><strong>d3.svg.symbolTypes</strong></h3><p>支持符号的类型.circle , cross ,diamond , square,triangle-down , triangle-up</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//数组长度</span></div><div class="line"><span class="keyword">var</span> n =<span class="number">30</span>;</div><div class="line"><span class="comment">//数组</span></div><div class="line"><span class="keyword">var</span> dataset = [];</div><div class="line"><span class="comment">//给数组添加元素</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">    dataset.push(&#123;</div><div class="line">        <span class="comment">//符号的大小</span></div><div class="line">        size: <span class="built_in">Math</span>.random() *<span class="number">30</span> +<span class="number">200</span>,</div><div class="line">        <span class="comment">//符号的类型</span></div><div class="line">        type: d3.svg.symbolTypes[ <span class="built_in">Math</span>.floor(</div><div class="line">            <span class="built_in">Math</span>.random() * d3.svg.symbolTypes.length)]</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//创建一个符号生成器</span></div><div class="line"><span class="keyword">var</span> symbol = d3.svg.symbol()</div><div class="line">                .size(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;<span class="keyword">return</span> d.size;&#125;)</div><div class="line">                .type(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;<span class="keyword">return</span> d.type;&#125;)</div><div class="line"></div><div class="line"><span class="comment">//添加足够数量的路径元素</span></div><div class="line"><span class="keyword">var</span> color = d3.scale.category20b();</div><div class="line"><span class="comment">//添加路径</span></div><div class="line">svg.selectAll</div><div class="line">    .data(dataset)</div><div class="line">    .enter()</div><div class="line">    .append(<span class="string">"path"</span>)</div><div class="line">    .attr(<span class="string">"d"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;<span class="keyword">return</span> symbol(d;)&#125;)</div><div class="line">    .attr(<span class="string">"transform"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d,i</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> x = <span class="number">100</span> + i%<span class="number">5</span> *<span class="number">20</span>;</div><div class="line">        <span class="keyword">var</span> y = <span class="number">100</span> + <span class="built_in">Math</span>.floor(i/<span class="number">5</span>)*<span class="number">20</span>;</div><div class="line">        <span class="keyword">return</span> <span class="string">"translate("</span>+ x + <span class="string">","</span> + y +<span class="string">")"</span>;</div><div class="line">    &#125;)</div><div class="line">    .attr(<span class="string">"fill"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d,i</span>)</span>&#123;<span class="keyword">return</span> color(i);&#125;);</div></pre></td></tr></table></figure>
<h2 id="弦生成器-Chord-Generator"><a href="#弦生成器-Chord-Generator" class="headerlink" title="弦生成器 (Chord Generator)"></a>弦生成器 (Chord Generator)</h2><p>弦生成器更具两段弧来绘制弦,有以下五个访问器,</p>
<h3 id="source"><a href="#source" class="headerlink" title="source()"></a>source()</h3><h3 id="target"><a href="#target" class="headerlink" title="target()"></a>target()</h3><h3 id="radius"><a href="#radius" class="headerlink" title="radius()"></a>radius()</h3><h3 id="startAngle"><a href="#startAngle" class="headerlink" title="startAngle()"></a>startAngle()</h3><h3 id="endAngle"><a href="#endAngle" class="headerlink" title="endAngle()"></a>endAngle()</h3><p>要绘制一段弧,其数据组成应该形如:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    source:&#123;</div><div class="line">        startAngle : 0.2 ,</div><div class="line">        endAngle : Math.PI * 0.3,</div><div class="line">        radius :100</div><div class="line">    &#125;,</div><div class="line">    target:&#123;</div><div class="line">        startAngle : Math.PI * 1.0 ,</div><div class="line">        endAngle : Math.PI * 1.6 ,</div><div class="line">        radius :100</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>source为起始弧度,target 为终止弧,startAngle , endAngle ,radius分别为弧的起始角度, 终止角度和半径;</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> chord = d3.svg.chord()</div><div class="line">                .source(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123; <span class="keyword">return</span> d.starteArc; &#125;)</div><div class="line">                .target(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123; <span class="keyword">return</span> d.endArc; &#125;)</div><div class="line">                .radius(<span class="number">200</span>)</div><div class="line">                .startAngle(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123; <span class="keyword">return</span> d.start; &#125;)</div><div class="line">                .endAngle(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123; <span class="keyword">return</span> d.end; &#125;);</div></pre></td></tr></table></figure>
<p>上段代码中,弦生成器的起始弧被设定为 startArc , 终止弧为 endArc , 半径为常量 200, 起始角度为 start , 终止角度为 end. 因此, 数据格式需要修改为:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    startArc:&#123;</div><div class="line">        startAngle : 0.2 ,</div><div class="line">        endAngle : Math.PI * 0.3,</div><div class="line">        radius :100</div><div class="line">    &#125;,</div><div class="line">    endArc:&#123;</div><div class="line">        startAngle : Math.PI * 1.0 ,</div><div class="line">        endAngle : Math.PI * 1.6 ,</div><div class="line">        radius :100</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="对角线生成器-Diagonal-Generator"><a href="#对角线生成器-Diagonal-Generator" class="headerlink" title="对角线生成器 Diagonal Generator"></a>对角线生成器 Diagonal Generator</h2><p>对角线生成器用于将两个点连接起来,连接线是三次贝塞尔曲线,该生成器使用<strong>d3.svg.diagonal()</strong>创建,有两个访问器, <strong>sourece()</strong>和 <strong>target()</strong>,还有一个投影函数 <strong>projection()</strong> ,用于将坐标进行投影.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//source是起点, target 是终点,其中包含的是 x 坐标和 y 坐标</span></div><div class="line"><span class="keyword">var</span> dataset = &#123;</div><div class="line">    <span class="attr">source</span> :&#123;<span class="attr">x</span>:<span class="number">100</span>,<span class="attr">y</span>:<span class="number">100</span>&#125;,</div><div class="line">    <span class="attr">target</span>:&#123;<span class="attr">x</span>:<span class="number">300</span>,<span class="attr">y</span>:<span class="number">200</span>&#125;&#125;;</div><div class="line"></div><div class="line"><span class="comment">//创建一个对角线生成器</span></div><div class="line"><span class="keyword">var</span> diagonal = d3.svg.diagonal();</div><div class="line"></div><div class="line"><span class="comment">//添加路径</span></div><div class="line">svg.append(<span class="string">"path"</span>)</div><div class="line">    .attr(<span class="string">"d"</span>,diagonal(dataset))</div><div class="line">    .attr(<span class="string">"fill"</span>,<span class="string">"none"</span>)</div><div class="line">    .attr(<span class="string">"stroke"</span>,<span class="string">"black"</span>)</div><div class="line">    .attr(<span class="string">"stroke-width"</span>,<span class="number">3</span>);</div><div class="line"></div><div class="line"><span class="comment">//使用 projection()可以定制具有投影的生成器.投影用于将坐标进行变换,定义了后,点和重点坐标都会首先调用该投影进行坐标转换,然后再生产路径.</span></div><div class="line"><span class="keyword">var</span> diagonal = d3.svg.diagonal()</div><div class="line">                .projection(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">                    <span class="keyword">var</span> x = d.x * <span class="number">1.5</span>;</div><div class="line">                    <span class="keyword">var</span> y = d.y * <span class="number">1.5</span>;</div><div class="line">                    <span class="keyword">return</span> [ x, y]</div><div class="line">                    &#125;);</div></pre></td></tr></table></figure>
<h2 id="折线图的制作"><a href="#折线图的制作" class="headerlink" title="折线图的制作"></a>折线图的制作</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dataset = [</div><div class="line">    &#123;</div><div class="line">        <span class="attr">country</span> :<span class="string">"china"</span>,</div><div class="line">        <span class="attr">gdp</span>:[[<span class="number">2000</span>,<span class="number">11920</span>],[<span class="number">2001</span>,<span class="number">13170</span>],[<span class="number">2002</span>,<span class="number">14550</span>],</div><div class="line">            [<span class="number">2003</span>,<span class="number">16500</span>],[<span class="number">2004</span>,<span class="number">19440</span>],[<span class="number">2005</span>,<span class="number">22870</span>],</div><div class="line">            [<span class="number">2006</span>,<span class="number">27930</span>],[<span class="number">2007</span>,<span class="number">35040</span>],[<span class="number">2008</span>,<span class="number">45470</span>],</div><div class="line">            [<span class="number">2009</span>,<span class="number">51050</span>],[<span class="number">2010</span>,<span class="number">59490</span>],[<span class="number">2011</span>,<span class="number">73140</span>],</div><div class="line">            [<span class="number">2012</span>,<span class="number">83860</span>],[<span class="number">2013</span>,<span class="number">103550</span>]]</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="attr">country</span>:<span class="string">"japan"</span>,</div><div class="line">        <span class="attr">gdp</span>:[[<span class="number">2000</span>,<span class="number">47310</span>],[<span class="number">2001</span>,<span class="number">41590</span>],[<span class="number">2002</span>,<span class="number">39800</span>],</div><div class="line">            [<span class="number">2003</span>,<span class="number">43020</span>],[<span class="number">2004</span>,<span class="number">46550</span>],[<span class="number">2005</span>,<span class="number">45710</span>],</div><div class="line">            [<span class="number">2006</span>,<span class="number">43560</span>],[<span class="number">2007</span>,<span class="number">43560</span>],[<span class="number">2008</span>,<span class="number">48490</span>],</div><div class="line">            [<span class="number">2009</span>,<span class="number">50350</span>],[<span class="number">2010</span>,<span class="number">54950</span>],[<span class="number">2011</span>,<span class="number">59050</span>],</div><div class="line">            [<span class="number">2012</span>,<span class="number">59370</span>],[<span class="number">2013</span>,<span class="number">48980</span>]]</div><div class="line">    &#125;</div><div class="line">]</div><div class="line"></div><div class="line"><span class="comment">//外边框</span></div><div class="line"><span class="keyword">var</span> padding = &#123;<span class="attr">top</span>:<span class="number">50</span>,<span class="attr">right</span>:<span class="number">50</span>,<span class="attr">bottom</span>:<span class="number">50</span>,<span class="attr">left</span>:<span class="number">50</span>&#125;;</div><div class="line"><span class="comment">//计算GDP 的最大值</span></div><div class="line"><span class="keyword">var</span> gdpmax = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;dataset.length;i++)&#123;</div><div class="line">    <span class="comment">//使用 d3.max()求数组中的最大值</span></div><div class="line">    <span class="keyword">var</span> currGdp = d3.max(dataset[i].gdp , <span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> d[<span class="number">1</span>];</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">if</span>(currGdp &gt; gdpmax)&#123;</div><div class="line">        gdpmax = currGdp;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//根据 padding 和 gdpmax 定义比例尺的定义域和值域:</span></div><div class="line"><span class="keyword">var</span> xScale = d3.scale.linear()</div><div class="line">                .domain([<span class="number">2000</span>,<span class="number">2013</span>])</div><div class="line">                .range([<span class="number">0</span>,width - padding.left - padding.right]);</div><div class="line"></div><div class="line"><span class="comment">//y轴的定义域是 0 ~ gdpmax *1.1,乘以 1.1.是为了是的图形不在坐标的边界绘制</span></div><div class="line"><span class="keyword">var</span> yScale = d3.scale.linear()</div><div class="line">                .domain([<span class="number">0</span>,gdpmax *<span class="number">1.1</span>])</div><div class="line">                .range([heigt - padding.top - padding.bottom , <span class="number">0</span>]);</div><div class="line"></div><div class="line"><span class="comment">//创建一个直线生成器,d对应[2000,11920]这样的值,d[0]对应年份, d[1]对应的国民生产总值</span></div><div class="line"><span class="keyword">var</span> linePath = d3.svg.line()</div><div class="line">                .x(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123; <span class="keyword">return</span> xScale(d[<span class="number">0</span>]);&#125;)</div><div class="line">                .y(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;<span class="keyword">return</span> yScale(d[<span class="number">1</span>])&#125;);</div><div class="line"><span class="comment">//定义两个颜色</span></div><div class="line"><span class="keyword">var</span> colors = [d3.rgb(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>),d3.rgb(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>)];</div><div class="line"><span class="comment">//添加路径</span></div><div class="line">svg.selectAll(<span class="string">"path"</span>)   <span class="comment">//选择&lt;svg&gt;中所有的 &lt;path&gt;</span></div><div class="line">    .data(dataset)      <span class="comment">//绑定数据</span></div><div class="line">    .enter()            <span class="comment">//选择 enter 部分</span></div><div class="line">    .append(<span class="string">"path"</span>)     <span class="comment">//添加足够数量的&lt;path&gt;元素</span></div><div class="line">    .attr(<span class="string">"transform"</span>,<span class="string">"translate("</span>+ padding.left + <span class="string">","</span> + padding.top +<span class="string">")"</span>)</div><div class="line">    .attr(<span class="string">"d"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> linePath(d.gdp) <span class="comment">//返回线段生成器得到的路径</span></div><div class="line">    &#125;)</div><div class="line">    .attr(<span class="string">"fill"</span>,<span class="string">"none"</span>)</div><div class="line">    .attr(<span class="string">"stroke-width"</span>,<span class="number">3</span>)</div><div class="line">    .attr(<span class="string">"stroke"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d,i</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> colors[i];</div><div class="line">    &#125;)</div><div class="line"></div><div class="line"><span class="comment">//x 轴</span></div><div class="line"><span class="keyword">var</span> xAxis = d3.svg.axis()</div><div class="line">                .scale(xScale)</div><div class="line">                .ticks(<span class="number">5</span>)</div><div class="line">                .tickFormat(d3.formate(<span class="string">"d"</span>))</div><div class="line">                .orient(<span class="string">"bottom"</span>)</div><div class="line"></div><div class="line"><span class="comment">// y 轴</span></div><div class="line"><span class="keyword">var</span> yAxis = d3.svg.axis()</div><div class="line">                .scale(yScale)</div><div class="line">                .orient(<span class="string">"left"</span>)</div><div class="line"></div><div class="line"><span class="comment">//添加一个&lt;g&gt;元素用于放 x 轴</span></div><div class="line">svg.append(<span class="string">"g"</span>)</div><div class="line">    .attr(<span class="string">"class"</span>,<span class="string">"axis"</span>)</div><div class="line">    .attr(<span class="string">"transform"</span>,<span class="string">"traslate("</span>+padding.left+<span class="string">","</span>+(height - padding.bottom)+<span class="string">")"</span>)</div><div class="line">    .call(xAxis)</div><div class="line"></div><div class="line"><span class="comment">//添加一个&lt;g&gt;用于放 y 轴</span></div><div class="line">svg.append(<span class="string">"g"</span>)</div><div class="line">    .attr(<span class="string">"class"</span>,<span class="string">"axis"</span>)</div><div class="line">    .attr(<span class="string">"transform"</span>,<span class="string">"translate("</span>+padding.left+<span class="string">","</span>+padding.top+<span class="string">")"</span>)</div><div class="line">    .call(yAxis)</div></pre></td></tr></table></figure>
<h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><h2 id="过渡效果"><a href="#过渡效果" class="headerlink" title="过渡效果"></a>过渡效果</h2><h3 id="过渡的启动"><a href="#过渡的启动" class="headerlink" title="过渡的启动"></a>过渡的启动</h3><h4 id="d3-transition-selection-name"><a href="#d3-transition-selection-name" class="headerlink" title="d3.transition([selection],[name])"></a><strong>d3.transition([selection],[name])</strong></h4><p>创建一个过渡对象,参数是选择集.</p>
<h4 id="transition-delay-delay"><a href="#transition-delay-delay" class="headerlink" title="transition.delay([delay])"></a><strong>transition.delay([delay])</strong></h4><p>设定延迟的时间.单位毫秒.</p>
<h4 id="transition-duration-duration"><a href="#transition-duration-duration" class="headerlink" title="transition.duration([duration])"></a><strong>transition.duration([duration])</strong></h4><p>设定过渡的持续时间(不包括延迟的时间).单位毫秒</p>
<h4 id="transition-ease-value-arguments"><a href="#transition-ease-value-arguments" class="headerlink" title="transition.ease(value[,arguments])"></a><strong>transition.ease(value[,arguments])</strong></h4><p>设定过渡样式.</p>
<h3 id="过渡的属性"><a href="#过渡的属性" class="headerlink" title="过渡的属性"></a>过渡的属性</h3><h4 id="transition-attr-name-value"><a href="#transition-attr-name-value" class="headerlink" title="transition.attr(name,value)"></a><strong>transition.attr(name,value)</strong></h4><p>将属性 name 过渡到目标值 value.value 可以是一个函数.</p>
<h4 id="transition-attrTween-name-tween"><a href="#transition-attrTween-name-tween" class="headerlink" title="transition.attrTween(name,tween)"></a><strong>transition.attrTween(name,tween)</strong></h4><p>将属性 name使用插值函数 tween()进行过渡.</p>
<h4 id="transition-style-name-value-priority"><a href="#transition-style-name-value-priority" class="headerlink" title="transition.style(name,value[,priority])"></a><strong>transition.style(name,value[,priority])</strong></h4><p>将 CSS 样式的 name 属性过渡到目标值 value.priority 是可选参数,表示 CSS 样式的优先级,只有 null 和 important 两个值.</p>
<h4 id="transition-styleTween-name-tween-priority"><a href="#transition-styleTween-name-tween-priority" class="headerlink" title="transition.styleTween(name,tween[,priority])"></a><strong>transition.styleTween(name,tween[,priority])</strong></h4><h4 id="transition-text-value"><a href="#transition-text-value" class="headerlink" title="transition.text(value)"></a><strong>transition.text(value)</strong></h4><p>过度开始时,将文本设置为 value 值</p>
<h4 id="transition-tween-name-factory"><a href="#transition-tween-name-factory" class="headerlink" title="transition.tween(name,factory)"></a><strong>transition.tween(name,factory)</strong></h4><p>将属性 name 按照函数 factory 进行过渡.</p>
<h4 id="transition-remove"><a href="#transition-remove" class="headerlink" title="transition.remove()"></a><strong>transition.remove()</strong></h4><p>过渡结束后,删除被选择元素.(元素淡出可以使用)</p>
<h3 id="子元素"><a href="#子元素" class="headerlink" title="子元素"></a>子元素</h3><h4 id="transition-select-selector"><a href="#transition-select-selector" class="headerlink" title="transition.select(selector)"></a>transition.select(selector)</h4><p>选择符合选择器的第一个子元素进行过渡</p>
<h4 id="transition-selectAll-selector"><a href="#transition-selectAll-selector" class="headerlink" title="transition.selectAll(selector)"></a>transition.selectAll(selector)</h4><p>选择符合选择器的所有元素进行过渡</p>
<h4 id="transition-filter-selector"><a href="#transition-filter-selector" class="headerlink" title="transition.filter(selector)"></a>transition.filter(selector)</h4><p>过滤器,与 selection.filter()类似</p>
<h3 id="each-和-call"><a href="#each-和-call" class="headerlink" title="each() 和 call()"></a>each() 和 call()</h3><h4 id="transition-each-type-listener"><a href="#transition-each-type-listener" class="headerlink" title="transition.each([type,]listener)"></a>transition.each([type,]listener)</h4><p>type 表示事件的类型(start,end,interrupt)<br>当某过渡在进行中,该元素又在别处被调用一个新的过渡,这时候就会发生打断事件.</p>
<h4 id="transition-call-function-arguments…"><a href="#transition-call-function-arguments…" class="headerlink" title="transition.call(function[,arguments…])"></a>transition.call(function[,arguments…])</h4><p>以过渡对象本身为参数调用 function.对坐标轴进行过渡操作时需要用到,例如:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xScale = d3.scale.linear()</div><div class="line">                .domain([<span class="number">0</span>,<span class="number">10</span>])</div><div class="line">                .range([<span class="number">0</span>,<span class="number">300</span>]);</div><div class="line"></div><div class="line"><span class="keyword">var</span> xAxis = d3.svg.axis()</div><div class="line">                .scale(xScale)</div><div class="line">                .orient(<span class="string">"bottom"</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> g = svg.append(<span class="string">"g"</span>)</div><div class="line">            .attr(<span class="string">"class"</span>,<span class="string">"axis"</span>)</div><div class="line">            .attr(<span class="string">"transform"</span>,<span class="string">"translate(50,200)"</span>)</div><div class="line">            .call(xAxis);</div><div class="line"></div><div class="line"><span class="comment">//坐标轴的定义域发生了变化</span></div><div class="line">xScale.domain([<span class="number">0</span>,<span class="number">50</span>]);</div><div class="line"></div><div class="line"><span class="comment">//定义一个过渡,时间为2000ms,令坐标轴的变化缓慢发生</span></div><div class="line">g.transition()</div><div class="line">    .duration(<span class="number">2000</span>)</div><div class="line">    .call(xAxis)</div></pre></td></tr></table></figure></p>
<h3 id="过渡样式"><a href="#过渡样式" class="headerlink" title="过渡样式"></a>过渡样式</h3><h4 id="linear"><a href="#linear" class="headerlink" title="linear"></a>linear</h4><p>线性变化,速度稳定增加.</p>
<h4 id="cubic"><a href="#cubic" class="headerlink" title="cubic"></a>cubic</h4><p>默认方式,逐渐加快速度.</p>
<h4 id="elastic"><a href="#elastic" class="headerlink" title="elastic"></a>elastic</h4><p>像弹簧似地接近终点.</p>
<h4 id="back"><a href="#back" class="headerlink" title="back"></a>back</h4><p>先往回缩一点,再冲到终点.</p>
<h4 id="bounce"><a href="#bounce" class="headerlink" title="bounce"></a>bounce</h4><p>在终点处弹跳几次.</p>
<h4 id="in"><a href="#in" class="headerlink" title="in"></a>in</h4><p>按正方向运动.</p>
<h4 id="out"><a href="#out" class="headerlink" title="out"></a>out</h4><p>按相反方向运动.</p>
<h4 id="in-out"><a href="#in-out" class="headerlink" title="in-out"></a>in-out</h4><p>前半段按 in 方式运动,后半段按 out 方式.</p>
<h4 id="out-in"><a href="#out-in" class="headerlink" title="out-in"></a>out-in</h4><p>前半段按 out 方式运动,后半段按 in 方式.</p>
<h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><h3 id="setInterval-code-millisec"><a href="#setInterval-code-millisec" class="headerlink" title="setInterval(code,millisec)"></a>setInterval(code,millisec)</h3><p>以指定的周期来执行代码,知道 clearInterval()被调用或窗口被关闭.</p>
<h3 id="setTimeout-code-millisec"><a href="#setTimeout-code-millisec" class="headerlink" title="setTimeout(code,millisec)"></a>setTimeout(code,millisec)</h3><p>经过指定的时间后执行代码.</p>
<h3 id="d3-timer-function-delay-time"><a href="#d3-timer-function-delay-time" class="headerlink" title="d3.timer(function[,delay[,time]])"></a>d3.timer(function[,delay[,time]])</h3><p>相对指定的绝对时间 time 延迟 delay 时长后,调用 function().<br>内部实现时使用的是 requestAnimationFrame</p>
<h2 id="应用过渡的场合"><a href="#应用过渡的场合" class="headerlink" title="应用过渡的场合"></a>应用过渡的场合</h2><p>在以下三种场合常用到过渡:<br>1.元素刚开始出现<br>2.元素更新的时候<br>3.元素被删除的时候</p>
<h3 id="应用过渡绘制散点图"><a href="#应用过渡绘制散点图" class="headerlink" title="应用过渡绘制散点图"></a>应用过渡绘制散点图</h3><p>将绘制散点的代码都封装在 drawCircle()函数里,其中包含 update(更新), enter(添加), exit(删除) 三部分的处理办法.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawCircle</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//绑定数据,获取 update 部分</span></div><div class="line">    <span class="keyword">var</span> circleUpdate = svg.selectAll(<span class="string">"circle"</span>)</div><div class="line">                        .data(center);<span class="comment">//绑定数据</span></div><div class="line">    <span class="comment">//获取 enter 部分</span></div><div class="line">    <span class="keyword">var</span> circleEnter = circleUpdate.enter();</div><div class="line">    <span class="comment">//获取 exit 部分</span></div><div class="line">    <span class="keyword">var</span> circleExit = circleUpdate.exit();</div><div class="line">    </div><div class="line">    <span class="comment">//update 部分的处理 - 使用过渡,缓慢移动到新坐标位置</span></div><div class="line">    circleUpdate.transition()</div><div class="line">                .duration(<span class="number">500</span>)</div><div class="line">                .attr(<span class="string">"cx"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">                    <span class="comment">//新 x 坐标</span></div><div class="line">                    <span class="keyword">return</span> padding.left + xScale(d[<span class="number">0</span>]);</div><div class="line">                &#125;)</div><div class="line">                .attr(<span class="string">"cy"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">                    <span class="comment">//新 y 坐标</span></div><div class="line">                    <span class="keyword">return</span> height - padding.bottom + yScale(d[<span class="number">1</span>]);</div><div class="line">                &#125;);</div><div class="line">    <span class="comment">//enter部分处理 - 插入圆到坐标原点,然后再过渡到目标点</span></div><div class="line">    circleEnter.append(<span class="string">"circle"</span>)<span class="comment">//添加元素</span></div><div class="line">                .attr(<span class="string">"fill"</span>,<span class="string">"black"</span>)</div><div class="line">                .attr(<span class="string">"cx"</span>,padding.left) <span class="comment">//过渡前的 x 坐标</span></div><div class="line">                .attr(<span class="string">"cy"</span>,height - padding.bottom) <span class="comment">//过渡前的 y 坐标</span></div><div class="line">                .attr(<span class="string">"r"</span>,<span class="number">7</span>)</div><div class="line">                .transition()<span class="comment">//启动添加元素时的过渡</span></div><div class="line">                .duration(<span class="number">500</span>)<span class="comment">//设置过渡时间</span></div><div class="line">                .attr(<span class="string">"cx"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">                    <span class="keyword">return</span> padding.left + xScale(d[<span class="number">0</span>])</div><div class="line">                &#125;)</div><div class="line">                .attr(<span class="string">"cy"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">                    <span class="comment">//过渡后的 y 坐标</span></div><div class="line">                    <span class="keyword">return</span> height - padding.bottom - yScale(d[i]);</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">    <span class="comment">//exit部分的处理 - 慢慢变成白色,最后删除</span></div><div class="line">    circleExit.transition()</div><div class="line">                .duration(<span class="number">500</span>)</div><div class="line">                .attr(<span class="string">"fill"</span>,<span class="string">"white"</span>)</div><div class="line">                .remove();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>绘制坐标轴,注意y轴时更改过得比例尺要在绘制完成之后再变回去.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawAxis</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//x轴的生成器</span></div><div class="line">    <span class="keyword">var</span> xAxis = d3.svg.axis()</div><div class="line">                    .scale(xScale)</div><div class="line">                    .orient(<span class="string">"bottom"</span>)</div><div class="line">                    .ticks(<span class="number">5</span>)</div><div class="line">    <span class="comment">//重新定义 y 轴比例尺的值域</span></div><div class="line">    yScale.range([yAxisWidth,<span class="number">0</span>]);</div><div class="line">    <span class="comment">//y 轴的生成器</span></div><div class="line">    <span class="keyword">var</span> yAxis = d3.svg.axis()</div><div class="line">                    .scale(yScale)</div><div class="line">                    .orient(<span class="string">"left"</span>)</div><div class="line">                    .ticks(<span class="number">5</span>)</div><div class="line">    <span class="comment">//绘制x轴</span></div><div class="line">    svg.append(<span class="string">"g"</span>)</div><div class="line">        .attr(<span class="string">"class"</span>,<span class="string">"axis"</span>)</div><div class="line">        .attr(<span class="string">"transform"</span>,<span class="string">"translate("</span>+padding.left + <span class="string">","</span>+(height - padding.bottom)+<span class="string">")"</span>)</div><div class="line">        .call(xAxis);</div><div class="line"></div><div class="line">    <span class="comment">//绘制y轴</span></div><div class="line">    svg.append(<span class="string">"g"</span>)</div><div class="line">        .attr(<span class="string">"class"</span>,<span class="string">"axis"</span>)</div><div class="line">        .attr(<span class="string">"transform"</span>,<span class="string">"translate("</span>+padding.left+<span class="string">","</span>+(height - padding.bottom -yAxisWidth)+<span class="string">")"</span>)</div><div class="line">        .call(yAxis)</div><div class="line"></div><div class="line">    <span class="comment">//绘制完坐标轴后将值域变回去</span></div><div class="line">    yScale.RANGE([<span class="number">0</span>,yAxisWidth]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>更新数据,添加三个函数:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//更新</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span> ; i&lt;center.length;i++)&#123;</div><div class="line">        center[i][<span class="number">0</span>] = <span class="built_in">Math</span>.random();<span class="comment">//更新 x 坐标</span></div><div class="line">        center[i][<span class="number">1</span>] = <span class="built_in">Math</span>.random();<span class="comment">//更新 y 坐标</span></div><div class="line">    &#125;</div><div class="line">    drawCircle();<span class="comment">//重绘</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//添加</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    center.push([<span class="built_in">Math</span>.random(),<span class="built_in">Math</span>.random()]);<span class="comment">//添加新点</span></div><div class="line">    drawCircle()</div><div class="line">&#125;</div><div class="line"><span class="comment">//删除</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sub</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    center.pop(); <span class="comment">//删除 center 数组中最后一个点</span></div><div class="line">    drawCircle(); <span class="comment">//重绘</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h1><p>所以选择集对象都有 on() 方法:<br><code>selection.on(&quot;click&quot;,function(){})</code><br>如果需要给同一事件添加多个监听器,可以在事件名后加一个点,然后再输入一个名称.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.on(<span class="string">"click.first"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"FirstClick"</span>);</div><div class="line">&#125;);</div><div class="line">.on(<span class="string">"click.second"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Second Click"</span>);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><h4 id="click"><a href="#click" class="headerlink" title="click"></a>click</h4><p>单击,相当于 mousedown和 mouseup 结合在一起</p>
<h4 id="mouseover"><a href="#mouseover" class="headerlink" title="mouseover"></a>mouseover</h4><p>光标放在某元素上</p>
<h4 id="mouseout"><a href="#mouseout" class="headerlink" title="mouseout"></a>mouseout</h4><p>光标从某元素上移出事</p>
<h4 id="mousemove"><a href="#mousemove" class="headerlink" title="mousemove"></a>mousemove</h4><p>鼠标被移动时候</p>
<h4 id="mousedown"><a href="#mousedown" class="headerlink" title="mousedown"></a>mousedown</h4><p>鼠标被按下</p>
<h4 id="mouseup"><a href="#mouseup" class="headerlink" title="mouseup"></a>mouseup</h4><p>鼠标被松开</p>
<h4 id="dbclikc"><a href="#dbclikc" class="headerlink" title="dbclikc"></a>dbclikc</h4><p>鼠标双击<br>下面的例子实现了当光标移入时,柱子变为黄色;当光标移出时,换换变回原来的蓝绿色.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rect = svg.selectAll(<span class="string">"rect"</span>)</div><div class="line">                .data(dataset)  <span class="comment">//绑定数据</span></div><div class="line">                .enter()        <span class="comment">//获取 enter 部分</span></div><div class="line">                .append(<span class="string">"rext"</span>) <span class="comment">//添加 rect 元素,使其与绑定数组的长度一致</span></div><div class="line">                .attr(<span class="string">"fill"</span>,<span class="string">"steelblue"</span>) <span class="comment">//设置颜色</span></div><div class="line">                .attr(<span class="string">"x"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d,i</span>)</span>&#123;<span class="comment">//设置矩形的 x 坐标</span></div><div class="line">                    <span class="keyword">return</span> padding.left + xScale(i);</div><div class="line">                &#125;)</div><div class="line">                .attr(<span class="string">"y"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;<span class="comment">//设置矩形的 y 坐标</span></div><div class="line">                    <span class="keyword">return</span> height - padding.bottom - yScale(d);</div><div class="line">                &#125;)</div><div class="line">                .attr(<span class="string">"width"</span>,xScale.rangeBande())<span class="comment">//设置矩形的宽度</span></div><div class="line">                .attr(<span class="string">"height"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;<span class="comment">//设置矩形的高度</span></div><div class="line">                    <span class="keyword">return</span> yScale(d);</div><div class="line">                &#125;)</div><div class="line">                .on(<span class="string">"mouseover"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d,i</span>)</span>&#123;</div><div class="line">                    <span class="comment">//当光标移到元素上,变黄色</span></div><div class="line">                    d3.select(<span class="keyword">this</span>)</div><div class="line">                    .attr(<span class="string">"fill"</span>,<span class="string">"yellow"</span>)</div><div class="line">                &#125;)</div><div class="line">                .on(<span class="string">"mouseout"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d,i</span>)</span>&#123;</div><div class="line">                    <span class="comment">//光标移出元素,将此元素变回原来的蓝绿色</span></div><div class="line">                    d3.select(<span class="keyword">this</span>)</div><div class="line">                        .transition()          <span class="comment">//开启过渡</span></div><div class="line">                        .duration(<span class="number">500</span>)         <span class="comment">//过渡的时间为500ms</span></div><div class="line">                        .attr(<span class="string">"fill"</span>,<span class="string">"steelblue"</span>)</div><div class="line">                &#125;);</div></pre></td></tr></table></figure></p>
<h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><h4 id="keydown"><a href="#keydown" class="headerlink" title="keydown"></a>keydown</h4><p>当用户按下任意键时触发,按住不放会重复出发此事件.(该事件不区分字母的大小写)</p>
<h4 id="keypress"><a href="#keypress" class="headerlink" title="keypress"></a>keypress</h4><p>当用户按下字符键(大小写字母,数字,加号,等号,回车等)时触发,按住不放会重复出发此事件.(该事件区分字母的大小写)</p>
<h4 id="keyup"><a href="#keyup" class="headerlink" title="keyup"></a>keyup</h4><p>当用户释放键时触发(不区分字母大小写)</p>
<p>下面来个例子,响应键盘上的 A,S,D,F 四个键:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> characters =[<span class="string">"A"</span>,<span class="string">"S"</span>,<span class="string">"D"</span>,<span class="string">"F"</span>];</div><div class="line"></div><div class="line"><span class="comment">//绘制四个矩形</span></div><div class="line"><span class="keyword">var</span> rects = svg.selectAll(<span class="string">"rect"</span>)</div><div class="line">                .data(characters)</div><div class="line">                .enter()</div><div class="line">                .append(<span class="string">"rect"</span>)</div><div class="line">                .attr(<span class="string">"x"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d,i</span>)</span>&#123;</div><div class="line">                    <span class="keyword">return</span> <span class="number">10</span> + i * <span class="number">60</span>;</div><div class="line">                &#125;)</div><div class="line">                .attr(<span class="string">"y"</span>,<span class="number">150</span>)</div><div class="line">                .attr(<span class="string">"width"</span>,<span class="number">55</span>)</div><div class="line">                .attr(<span class="string">"height"</span>,<span class="number">55</span>)</div><div class="line">                .attr(<span class="string">"rx"</span>,<span class="number">5</span>)</div><div class="line">                .attr(<span class="string">"ry"</span>,<span class="number">5</span>)</div><div class="line">                .attr(<span class="string">"fill"</span>,<span class="string">"black"</span>);</div><div class="line"></div><div class="line"><span class="comment">//绘制四个文字</span></div><div class="line"><span class="keyword">var</span> texts = svg.selectAll(<span class="string">"text"</span>)</div><div class="line">                .data(characters)</div><div class="line">                .enter()</div><div class="line">                .append(<span class="string">"text"</span>)</div><div class="line">                .attr(<span class="string">"x"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d,i</span>)</span>&#123;</div><div class="line">                    <span class="keyword">return</span> <span class="number">10</span> + i*<span class="number">60</span>;</div><div class="line">                &#125;)</div><div class="line">                .attr(<span class="string">"y"</span>,<span class="number">150</span>)</div><div class="line">                .attr(<span class="string">"dx"</span>,<span class="number">10</span>)</div><div class="line">                .attr(<span class="string">"dy"</span>,<span class="number">25</span>)</div><div class="line">                .attr(<span class="string">"fill"</span>,<span class="string">"white"</span>)</div><div class="line">                .attr(<span class="string">"font-size"</span>,<span class="number">24</span>)</div><div class="line">                .text(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;<span class="keyword">return</span> d;&#125;);</div><div class="line"></div><div class="line"><span class="comment">//接下来添加监听事件:</span></div><div class="line">d3.select(<span class="string">"body"</span>)</div><div class="line">    .on(<span class="string">"keydown"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">//keydown 事件的监听器</span></div><div class="line">        rects.attr(<span class="string">"fill"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;,</div><div class="line">            <span class="comment">//按下的键会保存在 d3.event,keyCode里,以 ASCII 码保存</span></div><div class="line">            <span class="comment">//使用 String.fromCharCode()可以将 ASCII 码转换成字符</span></div><div class="line">            <span class="keyword">if</span>(d == <span class="built_in">String</span>.fromCharCode(d3.event.keyCode))&#123;</div><div class="line">                <span class="comment">//如果按下的键与此 rect 元素上绑定的数据 d 相同,则返回黄色</span></div><div class="line">                <span class="keyword">return</span> <span class="string">"yellow"</span>;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="string">"black"</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .on(<span class="string">"keyup"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="comment">//keyup事件的监听器</span></div><div class="line">            rects.attr(<span class="string">"fill"</span>,<span class="string">"black"</span>);</div><div class="line">        &#125;)</div><div class="line">    &#125;)</div></pre></td></tr></table></figure></p>
<h3 id="触屏"><a href="#触屏" class="headerlink" title="触屏"></a>触屏</h3><h4 id="touchstart"><a href="#touchstart" class="headerlink" title="touchstart"></a>touchstart</h4><p>当触摸点被放在触摸屏上时.</p>
<h4 id="touchmove"><a href="#touchmove" class="headerlink" title="touchmove"></a>touchmove</h4><p>当触摸点在触摸屏上移动时.</p>
<h4 id="touchend"><a href="#touchend" class="headerlink" title="touchend"></a>touchend</h4><p>当触摸点从触摸屏上拿开时.</p>
<p>使用 <strong>d3.touches()</strong>可以从被触摸的对象里获取触摸点的坐标,返回值为一个数组:[[x0,y0],[x1,y1],…]. d3.touches(this)[0]是获取当前被触摸元素的第一个触摸点.</p>
<h2 id="行为"><a href="#行为" class="headerlink" title="行为"></a>行为</h2><h3 id="拖拽-drag"><a href="#拖拽-drag" class="headerlink" title="拖拽(drag)"></a>拖拽(drag)</h3><h4 id="d3-behavior-drag"><a href="#d3-behavior-drag" class="headerlink" title="d3.behavior.drag()"></a>d3.behavior.drag()</h4><p>创建一个拖拽行为.</p>
<h4 id="drag-on-type-listener"><a href="#drag-on-type-listener" class="headerlink" title="drag.on(type[,listener])"></a>drag.on(type[,listener])</h4><p>设置事件的监听器. <strong>type</strong>是事件类型,支持三种类型: <strong>dragstart,drag,dragend</strong>,分别表示拖拽开始时,拖拽中,拖拽结束. <strong>listener</strong>是监听器的函数,如果省略该参数,则返回当前指定事件的监听器.</p>
<h4 id="drag-orgin-orgin"><a href="#drag-orgin-orgin" class="headerlink" title="drag.orgin([orgin])"></a>drag.orgin([orgin])</h4><p>设定拖拽的起点.<strong>该函数可以使鼠标与被平移元素以相对不变的偏移量移动.</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jQuery插件学习]]></title>
      <url>http://zy380196088.github.io./2016/09/05/jQuery%E6%8F%92%E4%BB%B6%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>写 jQuery 插件最核心的有如下两种放方法:</p>
<h3 id="extend-object"><a href="#extend-object" class="headerlink" title="$.extend(object)"></a>$.extend(object)</h3><p>可以理解为 jQuery 添加一个静态方法</p>
<h3 id="fn-extend-object"><a href="#fn-extend-object" class="headerlink" title="$.fn.extend(object)"></a>$.fn.extend(object)</h3><p>可以理解为 jQuery 实例添加一个方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//$.extend 定义与调用</span></div><div class="line">$.extend(&#123; <span class="attr">fun1</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert(<span class="string">"执行方法一"</span>); &#125; &#125;);</div><div class="line">$.fun1();</div><div class="line"><span class="comment">//$.fn.extend 定义与调用</span></div><div class="line">$.fn.extend(&#123; <span class="attr">fun2</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert(<span class="string">"执行方法2"</span>); &#125; &#125;);</div><div class="line">$(<span class="keyword">this</span>).fun2();</div><div class="line"><span class="comment">//等同于</span></div><div class="line">$.fn.fun3 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert(<span class="string">"执行方法三"</span>); &#125;</div><div class="line">$(<span class="keyword">this</span>).fun3();</div></pre></td></tr></table></figure>
<h3 id="jQuery-function-与-function-jQuery-的区别"><a href="#jQuery-function-与-function-jQuery-的区别" class="headerlink" title="jQuery(function(){}); 与(function(){})(jQuery);的区别"></a>jQuery(function(){}); 与(function(){})(jQuery);的区别</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">jQuery(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</div><div class="line"><span class="comment">//相当于</span></div><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);<span class="comment">//是某个DOM元素加载完毕后执行方法里的代码。</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)();</div><div class="line"><span class="comment">//相当于</span></div><div class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;&#125;;</div><div class="line">fn(jQuery);</div><div class="line"><span class="comment">//定义了一个匿名函数，其中jQuery代表这个匿名函数的实参。通常用在JQuery插件开发中，起到了定义插件的私有域的作用</span></div></pre></td></tr></table></figure>
<h3 id="开发-jQuery-插件标准结构"><a href="#开发-jQuery-插件标准结构" class="headerlink" title="开发 jQuery 插件标准结构"></a>开发 jQuery 插件标准结构</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//step01 定义JQuery的作用域,防止$符号污染的 jQuery 插件</span></div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</div><div class="line">    <span class="comment">//step03-a 插件的默认值属性</span></div><div class="line">    <span class="keyword">var</span> defaults = &#123;</div><div class="line">        <span class="attr">prevId</span>: <span class="string">'prevBtn'</span>,</div><div class="line">        <span class="attr">prevText</span>: <span class="string">'Previous'</span>,</div><div class="line">        <span class="attr">nextId</span>: <span class="string">'nextBtn'</span>,</div><div class="line">        <span class="attr">nextText</span>: <span class="string">'Next'</span></div><div class="line">        <span class="comment">//……</span></div><div class="line">    &#125;;</div><div class="line">    <span class="comment">//step02 插件的扩展方法名称</span></div><div class="line">    $.fn.easySlider = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</div><div class="line">        <span class="comment">//step03-b 合并用户自定义属性，默认属性</span></div><div class="line">        <span class="keyword">var</span> options = $.extend(defaults, options);</div><div class="line">        <span class="comment">//step4 支持JQuery选择器</span></div><div class="line">        <span class="comment">//step5 支持链式调用</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;)(jQuery);</div></pre></td></tr></table></figure>
<ol>
<li>定义作用域;</li>
<li>为 jQuery 扩展一个插件;</li>
<li>设置默认值;</li>
<li>支持jQuery 选择器</li>
<li>支持JQuery的链接调用</li>
<li>插件里的方法</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS Tips]]></title>
      <url>http://zy380196088.github.io./2016/08/24/JS-Tips/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="URL-http开头-地址正则"><a href="#URL-http开头-地址正则" class="headerlink" title="URL (http开头)地址正则"></a>URL (http开头)地址正则</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var re=/(http:\/\/)?[A-Za-z0-9]+\.[A-Za-z0-9]+[\/=\?%\-&amp;_~`@[\]\&apos;:+!]*([^&lt;&gt;\&quot;\&quot;])*/gi;</div></pre></td></tr></table></figure>
<h2 id="检查某对象是否具有某属性"><a href="#检查某对象是否具有某属性" class="headerlink" title="检查某对象是否具有某属性"></a>检查某对象是否具有某属性</h2><p>当你需要检查某属性是否存在于一个对象,你可能会这样做:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myObject = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'tips'</span></div><div class="line">&#125;;</div><div class="line"><span class="keyword">if</span>(myObject.name)&#123;...&#125;</div></pre></td></tr></table></figure></p>
<p>这是可行的,但是需要知道还有两种原生方法可以解决该问题: in操作符 和 hasOwnProperty,任何继承自Object的对象都可以使用这两种方法.</p>
<p>但是这两种方法也有区别:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myFunc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = <span class="string">'tips'</span>;</div><div class="line">&#125;;</div><div class="line">myFunc.prototype.age = <span class="string">'10 days'</span>;</div><div class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> myFunc();</div><div class="line">user.hasOwnProperty(<span class="string">'name'</span>); <span class="comment">// true</span></div><div class="line">user.hasOwnProperty(<span class="string">'age'</span>); <span class="comment">// false, 因为age来自于原型链</span></div></pre></td></tr></table></figure>
<p>两者检查属性的深度不同，换言之hasOwnProperty只在本身有此属性时返回true,而in操作符不区分属性来自于本身或继承自原型链。</p>
<h2 id="将Node-List转换为数组-Array"><a href="#将Node-List转换为数组-Array" class="headerlink" title="将Node List转换为数组(Array)"></a>将Node List转换为数组(Array)</h2><p>querySelectorAll 方法返回一个”类数组”对象为node list.看似数组却没有类似map,foreach这样的数组方法.<br>我们需要将其转换为DOM元素的数组:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> nodelist = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>);</div><div class="line"><span class="keyword">var</span> nodelistToArray = <span class="built_in">Array</span>.apply(<span class="literal">null</span> , nodelist);</div><div class="line"><span class="comment">//这样就可以进行map ,foreach等操作了</span></div><div class="line">nodelistToArray.forEach(...);</div><div class="line">nodelistToArray.map(...);</div><div class="line">nodelistToArray.slice(...);</div></pre></td></tr></table></figure>
<h2 id="“快速排序”"><a href="#“快速排序”" class="headerlink" title="“快速排序”"></a>“快速排序”</h2><p>“快速排序”的思想步骤:<br>1.在数组中,找一个基点<br>2.建立两个数组,分别存储左边和右边的数组<br>3.利用递归进行下次比较</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(arr.length &lt;=<span class="number">1</span>)&#123;</div><div class="line">        <span class="keyword">return</span> arr;<span class="comment">//如果数组只有一个数则直接返回</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> num =  <span class="built_in">Math</span>.floor(arr.length/<span class="number">2</span>);<span class="comment">//找到中间数的索引值</span></div><div class="line">    <span class="keyword">var</span> numValue = arr.splice(num,<span class="number">1</span>);<span class="comment">//取中间数的值</span></div><div class="line">    <span class="keyword">var</span> left = [];</div><div class="line">    <span class="keyword">var</span> right = [];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ,i &lt; arr.length; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(arr[i]&lt;numValue)&#123;</div><div class="line">            left.push(arr[i]);<span class="comment">//小于基准数则添加到左边数组中</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            right.pusth(arr[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//递归</span></div><div class="line">    <span class="keyword">return</span> quickSort(left).concat([numValue],quickSort(right));</div><div class="line">&#125;</div><div class="line"><span class="comment">//调用</span></div><div class="line"> alert(quickSort([<span class="number">2</span>,<span class="number">35</span>,<span class="number">15</span>,<span class="number">44</span>,<span class="number">8</span>]));<span class="comment">//弹出"2 8 15 35 44"</span></div></pre></td></tr></table></figure>
<h2 id="返回对象-使方法可以链式调用"><a href="#返回对象-使方法可以链式调用" class="headerlink" title="返回对象,使方法可以链式调用"></a>返回对象,使方法可以链式调用</h2><p>在面向对象的Javascript中为对象建立一个方法时，返回当前对象可以让你在一条链上调用方法。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Hello my name is: "</span>, <span class="keyword">this</span>.name);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">this</span>.changeName = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">	<span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">"John"</span>);</div><div class="line">	person.sayName().changeName(<span class="string">"Timmy"</span>).sayName();</div></pre></td></tr></table></figure>
<h2 id="JavaScript-中-的作用"><a href="#JavaScript-中-的作用" class="headerlink" title="JavaScript 中 !! 的作用"></a>JavaScript 中 !! 的作用</h2><p>经常看到这样的例子：﻿﻿<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a；</div><div class="line"><span class="keyword">var</span> b=!!a;</div></pre></td></tr></table></figure></p>
<p>a默认是undefined。!a是true，!!a则是false，所以b的值是false，而不再是undefined，也非其它值，主要是为后续判断提供便利。</p>
<p>!!一般用来将后面的表达式强制转换为布尔类型的数据（boolean），也就是只能是true或者false;<br>因为javascript是弱类型的语言（变量没有固定的数据类型）所以有时需要强制转换为相应的类型，类似的如:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a=<span class="built_in">parseInt</span>(“<span class="number">1234</span>″)</div><div class="line">a=”<span class="number">1234</span>″<span class="number">-0</span> <span class="comment">//转换为数字</span></div><div class="line">b=<span class="number">1234</span>+”” <span class="comment">//转换为字符串</span></div><div class="line">c=someObject.toString() <span class="comment">//将对象转换为字符串</span></div></pre></td></tr></table></figure></p>
<p>其中第1种、第4种为显式转换，2、3为隐式转换</p>
<p>布尔型的转换，javascript约定规则为:<br><strong>false、undefinded、null、0、”” 为 false</strong><br><strong>true、1、”somestring”、[Object] 为 true</strong></p>
<p>对null与undefined等其他用隐式转换的值，用!操作符时都会产生true的结果，所以用两个感叹号的作用就在于将这些值转换为“等价”的布尔值；<br>再来看看：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo;</div><div class="line">alert(!foo);<span class="comment">//undifined情况下，一个感叹号返回的是true;</span></div><div class="line">alert(!goo);<span class="comment">//null情况下，一个感叹号返回的也是true;</span></div><div class="line"><span class="keyword">var</span> o=&#123;<span class="attr">flag</span>:<span class="literal">true</span>&#125;;</div><div class="line"><span class="keyword">var</span> test=!!o.flag;<span class="comment">//等效于var test=o.flag||false;</span></div><div class="line">alert(test);</div></pre></td></tr></table></figure></p>
<p>这段例子，演示了在undifined和null时，用一个感叹号返回的都是true,用两个感叹号返回的就是false,所以两个感叹号的作用就在于，如果明确设置了变量的值(非null/undifined/0/”“等值),结果就会根据变量的实际值来返回，如果没有设置，结果就会返回false。</p>
<h2 id="对象转换为数组"><a href="#对象转换为数组" class="headerlink" title="对象转换为数组"></a>对象转换为数组</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//注意对象必须是以下格式的才可以通过此方式转化为数组</span></div><div class="line"><span class="comment">//获取的DOM集合，以及函数的arguments也可以通过此方式转化为数组</span></div><div class="line"><span class="keyword">var</span> obj=&#123;</div><div class="line">	<span class="number">0</span>:<span class="string">'qian'</span>,</div><div class="line">	<span class="number">1</span>:<span class="string">'long'</span>,</div><div class="line">	<span class="number">2</span>:<span class="string">'chu'</span>,</div><div class="line">	<span class="number">3</span>:<span class="string">'tian'</span>,</div><div class="line">	<span class="attr">length</span>:<span class="number">4</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> _slice=[].slice;</div><div class="line"><span class="keyword">var</span> objArr=_slice.call(obj);</div></pre></td></tr></table></figure>
<h2 id="验证是否为数组"><a href="#验证是否为数组" class="headerlink" title="验证是否为数组"></a>验证是否为数组</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span>  <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">'[object Array]'</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="清空数组"><a href="#清空数组" class="headerlink" title="清空数组"></a>清空数组</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//方式一 通过将长度设置为0</span></div><div class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line">arr.length=<span class="number">0</span>;</div><div class="line"><span class="comment">//方式二 通过splice方法</span></div><div class="line"> <span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line">arr.splice(<span class="number">0</span>,arr.length);</div><div class="line"><span class="comment">//方式三 通过将空数组 [] 赋值给数组(严格意义来说这只是将ary重新赋值为空数组，之前的数组如果没有引用在指向它将等待垃圾回收。)</span></div><div class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line">arr=[];</div></pre></td></tr></table></figure>
<h2 id="保留指定小数位"><a href="#保留指定小数位" class="headerlink" title="保留指定小数位"></a>保留指定小数位</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num =<span class="number">4.345678</span>;</div><div class="line">num = num.toFixed(<span class="number">4</span>);  <span class="comment">// 4.3457 第四位小数位以四舍五入计算</span></div></pre></td></tr></table></figure>
<h2 id="生成指定长度的随机字母数字字符串"><a href="#生成指定长度的随机字母数字字符串" class="headerlink" title="生成指定长度的随机字母数字字符串"></a>生成指定长度的随机字母数字字符串</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandomStr</span>(<span class="params">len</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> str = <span class="string">""</span>;</div><div class="line">    <span class="keyword">for</span>( ; str.length &lt; len; str  += <span class="built_in">Math</span>.random().toString(<span class="number">36</span>).substr(<span class="number">2</span>));</div><div class="line">    <span class="keyword">return</span>  str.substr(<span class="number">0</span>, len);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="找出数组中出现次数最的元素，并给出其出现过的位置"><a href="#找出数组中出现次数最的元素，并给出其出现过的位置" class="headerlink" title="找出数组中出现次数最的元素，并给出其出现过的位置"></a>找出数组中出现次数最的元素，并给出其出现过的位置</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMaxAndIndex</span>(<span class="params"> arr </span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">        arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span>(!obj[item])&#123;</div><div class="line">                obj[item]= &#123;<span class="attr">indexs</span>: [index]&#125;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                obj[item][<span class="string">'indexs'</span>].push(index);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">var</span> num=<span class="number">0</span>;<span class="comment">//记录出现次数最大值</span></div><div class="line">        <span class="keyword">var</span> str=<span class="string">''</span>;<span class="comment">//记录出现次数最多的字符</span></div><div class="line">        <span class="keyword">var</span> reArr;<span class="comment">//返回最大值的位置数组</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> obj)&#123;</div><div class="line">            <span class="keyword">var</span> temp=obj[attr][<span class="string">'indexs'</span>];</div><div class="line">            <span class="keyword">if</span>(temp.length&gt;num)&#123;</div><div class="line">                num=temp.length;</div><div class="line">                str=attr;</div><div class="line">                reArr=temp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">maxStr</span>:str,</div><div class="line">            <span class="attr">indexs</span>:reArr</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="字符串的split函数的特殊值情况"><a href="#字符串的split函数的特殊值情况" class="headerlink" title="字符串的split函数的特殊值情况"></a>字符串的split函数的特殊值情况</h2><ol>
<li><p>参数不传，返回包含原字符串对象，长度为1的数组.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">""</span>.split()<span class="comment">//[""]</span></div><div class="line"><span class="string">"xxcanghai"</span>.split()<span class="comment">//["xxcanghai"]</span></div></pre></td></tr></table></figure>
</li>
<li><p>参数传空字符串，返回将原字符串每个字符分隔的数组,若原字符串为空字符串则返回空数组.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">""</span>.split(<span class="string">""</span>)<span class="comment">//[]</span></div><div class="line"><span class="string">"xxcanghai"</span>.split(<span class="string">""</span>)<span class="comment">//["x", "x", "c", "a", "n", "g", "h", "a", "i"]</span></div></pre></td></tr></table></figure>
</li>
<li><p>原字符串为空字符串，参数不为空时，会返回包含一个空字符串的数组.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">""</span>.split(<span class="string">","</span>)<span class="comment">//[""]，错误，应为[]</span></div><div class="line"><span class="string">""</span>.split(<span class="string">"xxcanghai"</span>)<span class="comment">//[""]，错误，应为[]</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断:"></a>类型判断:</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//判断undefined</span></div><div class="line"><span class="keyword">var</span> tmp = undifined;</div><div class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> (tmp) == <span class="string">"undifined"</span>)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"undefined"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//判断null</span></div><div class="line"><span class="keyword">var</span> tmp = <span class="literal">null</span>;</div><div class="line"><span class="keyword">if</span>(!tmp &amp;&amp; <span class="keyword">typeof</span>(tmp)!== <span class="string">"undifined"</span> &amp;&amp; tmp!= <span class="number">0</span>)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"null"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//判断NaN</span></div><div class="line"><span class="keyword">var</span> tmp = <span class="number">0</span>/<span class="number">0</span>;</div><div class="line"><span class="keyword">if</span>(isNan(tmp))&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"NaN"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//判断undefined和null</span></div><div class="line"><span class="keyword">var</span> tmp = <span class="literal">undefined</span>;</div><div class="line"><span class="keyword">if</span>(tmp == <span class="literal">undefined</span>)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"null or undifined"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> tmp = <span class="literal">undefined</span>;</div><div class="line"><span class="keyword">if</span>(tmp == <span class="literal">null</span>)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"null or undifined"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> tmp =<span class="literal">null</span>;</div><div class="line"><span class="keyword">if</span>(!tmp)&#123;</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">"null or undefined or NaN"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="jsonp方式跨域"><a href="#jsonp方式跨域" class="headerlink" title="jsonp方式跨域"></a>jsonp方式跨域</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">config</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> options = config || &#123;&#125;; <span class="comment">// 需要配置url, success, time, fail四个属性.</span></div><div class="line">    <span class="keyword">var</span> callbackName = (<span class="string">'jsonp_'</span>+ <span class="built_in">Math</span>.random()).replace(<span class="string">"."</span>,<span class="string">""</span>);</div><div class="line">    <span class="keyword">var</span> oHead = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>];</div><div class="line">    <span class="keyword">var</span> oScript = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'script'</span>);</div><div class="line"></div><div class="line">    oHead.appendChild(oScript);</div><div class="line">    <span class="built_in">window</span>[callbackName] = <span class="function"><span class="keyword">function</span>(<span class="params">json</span>)</span>&#123;</div><div class="line">        <span class="comment">//创建jsonp回调函数</span></div><div class="line">        <span class="comment">//先删除script标签，实际上执行的是success函数</span></div><div class="line">        oHead.removeChild(oScript);</div><div class="line">        clearTimeout(oScript.timer);</div><div class="line">        <span class="built_in">window</span>[callbackName]=<span class="literal">null</span>;</div><div class="line">        options.success &amp;&amp; options.success(json);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    oScripts.src = options.url + <span class="string">'?'</span> + callbackName;<span class="comment">//发送请求</span></div><div class="line">    <span class="keyword">if</span>(options.time)&#123;</div><div class="line">        oScripts.timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">window</span>[callbackName]=<span class="literal">null</span>;</div><div class="line">            oHead.removeChild(oScript);</div><div class="line">            options.fail &amp;&amp; options.fail(&#123;<span class="attr">message</span>:<span class="string">"错误:超时;"</span>&#125;);</div><div class="line">        &#125;,options.time);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//使用方法:</span></div><div class="line">jsonp(&#123;</div><div class="line">    <span class="attr">url</span>:<span class="string">'b.com/b.json'</span>,</div><div class="line">    <span class="attr">success</span>:<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">        <span class="comment">//数据处理</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">time</span>:<span class="number">5000</span>,</div><div class="line">    <span class="attr">fail</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">//错误处理</span></div><div class="line">    &#125;</div><div class="line">    &#125;)</div></pre></td></tr></table></figure>
<h2 id="JS生成随机字符串"><a href="#JS生成随机字符串" class="headerlink" title="JS生成随机字符串"></a>JS生成随机字符串</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这样生成一个32位的随机字符串，相同的概率很低。</span></div><div class="line"><span class="keyword">var</span> random_str = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> len = <span class="number">32</span>;</div><div class="line">    <span class="keyword">var</span> chars = <span class="string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'</span>;</div><div class="line">    <span class="keyword">var</span> max = charts.length;</div><div class="line">    <span class="keyword">var</span> str = <span class="string">''</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>; i&lt;len;i++)&#123;</div><div class="line">        str += charts.chartAt(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*max));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> str;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h2><h3 id="JavaScript过滤Emoji表情"><a href="#JavaScript过滤Emoji表情" class="headerlink" title="JavaScript过滤Emoji表情:"></a>JavaScript过滤Emoji表情:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">name = name.replace(<span class="regexp">/\uD83C[\uDF00-\uDFFF]|\uD83D[\uDC00-\uDE4F]/g</span>, <span class="string">""</span>);</div></pre></td></tr></table></figure>
<h3 id="手机号验证"><a href="#手机号验证" class="headerlink" title="手机号验证:"></a>手机号验证:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> validate_phoneNumber =<span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> reg = <span class="regexp">/^1[3-9]\d&#123;9&#125;$/</span>;</div><div class="line">    <span class="keyword">return</span> reg.test(num);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="身份证号码验证"><a href="#身份证号码验证" class="headerlink" title="身份证号码验证:"></a>身份证号码验证:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[1-9]&#123;1&#125;[0-9]&#123;14&#125;$|^[1-9]&#123;1&#125;[0-9]&#123;16&#125;([0-9]|[xX])$/</span>;</div></pre></td></tr></table></figure>
<h3 id="ip验证"><a href="#ip验证" class="headerlink" title="ip验证:"></a>ip验证:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])(\.(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5]))&#123;3&#125;$/</span>;</div></pre></td></tr></table></figure>
<h3 id="判断是否有中文："><a href="#判断是否有中文：" class="headerlink" title="判断是否有中文："></a>判断是否有中文：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reg = <span class="regexp">/.*[\u4e00-\u9fa5]+.*$/</span>;</div><div class="line">reg.test(<span class="string">'123792739测试'</span>)  <span class="comment">//true</span></div></pre></td></tr></table></figure>
<h2 id="常用的JS函数"><a href="#常用的JS函数" class="headerlink" title="常用的JS函数"></a>常用的JS函数</h2><h3 id="获取浏览器url中的参数值："><a href="#获取浏览器url中的参数值：" class="headerlink" title="获取浏览器url中的参数值："></a>获取浏览器url中的参数值：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> getURLParam = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>((<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'[?|&amp;]'</span> + name + <span class="string">'='</span> + <span class="string">'([^&amp;;]+?)(&amp;|#|;|$)'</span>, <span class="string">"ig"</span>).exec(location.search) || [, <span class="string">""</span>])[<span class="number">1</span>].replace(<span class="regexp">/\+/g</span>, <span class="string">'%20'</span>)) || <span class="literal">null</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="操作cookie："><a href="#操作cookie：" class="headerlink" title="操作cookie："></a>操作cookie：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">own.setCookie = <span class="function"><span class="keyword">function</span>(<span class="params">cname, cvalue, exdays</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line">    d.setTime(d.getTime() + (exdays*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>));</div><div class="line">    <span class="keyword">var</span> expires = <span class="string">'expires='</span>+d.toUTCString();</div><div class="line">    <span class="built_in">document</span>.cookie = cname + <span class="string">'='</span> + cvalue + <span class="string">'; '</span> + expires;</div><div class="line">&#125;;</div><div class="line">own.getCookie = <span class="function"><span class="keyword">function</span>(<span class="params">cname</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> name = cname + <span class="string">'='</span>;</div><div class="line">    <span class="keyword">var</span> ca = <span class="built_in">document</span>.cookie.split(<span class="string">';'</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt; ca.length; i++) &#123;</div><div class="line">        <span class="keyword">var</span> c = ca[i];</div><div class="line">        <span class="keyword">while</span> (c.charAt(<span class="number">0</span>) == <span class="string">' '</span>) c = c.substring(<span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span> (c.indexOf(name) != <span class="number">-1</span>) <span class="keyword">return</span> c.substring(name.length, c.length);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="数组排序sort函数："><a href="#数组排序sort函数：" class="headerlink" title="数组排序sort函数："></a>数组排序sort函数：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">11</span>,<span class="number">36</span>,<span class="number">6</span>,<span class="number">27</span>,<span class="number">80</span>,<span class="number">32</span>];</div><div class="line">arr.srot(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> a-b;                 <span class="comment">//从小到大排序</span></div><div class="line">    <span class="keyword">return</span> b-a;                 <span class="comment">//从大到小排序</span></div><div class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.random() - <span class="number">0.5</span>; <span class="comment">//随机排序(数组洗牌)</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> arr = [&#123;   <span class="comment">//对象数组</span></div><div class="line">    num: <span class="number">1</span>,</div><div class="line">    <span class="attr">text</span>: <span class="string">'num1'</span></div><div class="line">&#125;, &#123;</div><div class="line">    <span class="attr">num</span>: <span class="number">5</span>,</div><div class="line">    <span class="attr">text</span>: <span class="string">'num2'</span></div><div class="line">&#125;, &#123;</div><div class="line">    <span class="attr">num</span>: <span class="number">6</span>,</div><div class="line">    <span class="attr">text</span>: <span class="string">'num3'</span></div><div class="line">&#125;, &#123;</div><div class="line">    <span class="attr">num</span>: <span class="number">3</span>,</div><div class="line">    <span class="attr">text</span>: <span class="string">'num4'</span></div><div class="line">&#125;];</div><div class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a.num - b.num;   <span class="comment">//从小到大排</span></div><div class="line">    <span class="keyword">return</span> b.num - a.num;   <span class="comment">//从大到小排</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="判断是对象还是数组："><a href="#判断是对象还是数组：" class="headerlink" title="判断是对象还是数组："></a>判断是对象还是数组：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span> = <span class="title">function</span>(<span class="params">o</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> toString.apply(o) === <span class="string">'[object Array]'</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span> = <span class="title">function</span>(<span class="params">o</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> toString.apply(o) === <span class="string">'[object Object]'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="浅拷贝-和-深拷贝"><a href="#浅拷贝-和-深拷贝" class="headerlink" title="浅拷贝 和 深拷贝"></a>浅拷贝 和 深拷贝</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//浅拷贝</span></div><div class="line">  <span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'name'</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> a = obj;</div><div class="line">  a.name = <span class="string">'new name'</span>;</div><div class="line">  <span class="built_in">console</span>.log(a.name); <span class="comment">// 'new name'</span></div><div class="line">  <span class="built_in">console</span>.log(obj.name); <span class="comment">// 'new name'</span></div><div class="line">  <span class="comment">//a只是通过赋值符号得到了obj的引用。</span></div><div class="line"></div><div class="line"><span class="comment">//深拷贝</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">parent, child</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> i,</div><div class="line">        tostring = <span class="built_in">Object</span>.prototype.toString,</div><div class="line">        aStr = <span class="string">"[object Array]"</span>;</div><div class="line">    child = child || &#123;&#125;;</div><div class="line">    <span class="keyword">for</span>(i <span class="keyword">in</span> parent) &#123;</div><div class="line">      <span class="keyword">if</span>(parent.hasOwnProperty(i)) &#123;</div><div class="line">        <span class="comment">//这时候还要判断它的值是不是对象</span></div><div class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> parent[i] === <span class="string">'object'</span>) &#123;</div><div class="line">          child[i] = tostring.call(parent[i]) === aStr ? [] : &#123;&#125;;</div><div class="line">          object(parent[i], child[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">          child[i] = parent[i];</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> child;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">tags</span>: [<span class="string">'js'</span>,<span class="string">'css'</span>],</div><div class="line">    <span class="attr">s1</span>: &#123;</div><div class="line">      <span class="attr">name</span>: <span class="string">'dai'</span>,</div><div class="line">      <span class="attr">age</span>: <span class="number">21</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">flag</span>: <span class="literal">true</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> some = object(obj);</div><div class="line">  some.tags = [<span class="number">1</span>,<span class="number">2</span>];</div><div class="line">  <span class="built_in">console</span>.log(some.tags); <span class="comment">//[1, 2]</span></div><div class="line">  <span class="built_in">console</span>.log(obj.tags); <span class="comment">//['js', 'css']</span></div><div class="line"></div><div class="line">  <span class="comment">//深度拷贝对象</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">cloneObj</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> o = obj.constructor == <span class="built_in">Object</span> ? <span class="keyword">new</span> obj.constructor() : <span class="keyword">new</span> obj.constructor(obj.valueOf());</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123;</div><div class="line">        <span class="keyword">if</span>(o[key] != obj[key] )&#123;</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">typeof</span>(obj[key]) == <span class="string">'object'</span> )&#123;</div><div class="line">                o[key] = mods.cloneObj(obj[key]);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                o[key] = obj[key];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> o;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="原生JS实现千位分隔符"><a href="#原生JS实现千位分隔符" class="headerlink" title="原生JS实现千位分隔符"></a>原生JS实现千位分隔符</h2><p>目的:每隔3位数字,加一个’,’<br>思考:实现的方法有哪些? (字符串数组分割,正则表达式等)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//正则表达式实现</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">thousandBitSeparator</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> num &amp;&amp; (num</div><div class="line">    .toString().indexOf(<span class="string">'.'</span>) != <span class="number">-1</span> ? num.toString().replace(<span class="regexp">/(\d)(?=(\d&#123;3&#125;)+\.)/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$<span class="number">0</span>, $<span class="number">1</span></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> $<span class="number">1</span> + <span class="string">","</span>;</div><div class="line">    &#125;) : num.toString().replace(<span class="regexp">/(\d)(?=(\d&#123;3&#125;))/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$<span class="number">0</span>, $<span class="number">1</span></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> $<span class="number">1</span> + <span class="string">","</span>;</div><div class="line">    &#125;));</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(thousandBitSeparator(<span class="number">1000</span>));</div><div class="line"><span class="comment">//1,000</span></div></pre></td></tr></table></figure></p>
<h2 id="银行卡号每隔4位插入空格-只支持-IE9"><a href="#银行卡号每隔4位插入空格-只支持-IE9" class="headerlink" title="银行卡号每隔4位插入空格(只支持 IE9+)"></a>银行卡号每隔4位插入空格(只支持 IE9+)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    $(<span class="string">'#kahao'</span>).on(<span class="string">'keyup'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">        <span class="comment">//只对输入数字时进行处理</span></div><div class="line">       <span class="keyword">if</span>((e.which &gt;= <span class="number">48</span> &amp;&amp; e.which &lt;= <span class="number">57</span>) ||(e.which &gt;= <span class="number">96</span> &amp;&amp; e.which &lt;= <span class="number">105</span> ))&#123;</div><div class="line">            <span class="comment">//获取当前光标的位置</span></div><div class="line">            <span class="keyword">var</span> caret = <span class="keyword">this</span>.selectionStart</div><div class="line">            <span class="comment">//获取当前的value</span></div><div class="line">            <span class="keyword">var</span> value = <span class="keyword">this</span>.value</div><div class="line">            <span class="comment">//从左边沿到坐标之间的空格数</span></div><div class="line">            <span class="keyword">var</span> sp =  (value.slice(<span class="number">0</span>, caret).match(<span class="regexp">/\s/g</span>) || []).length</div><div class="line">            <span class="comment">//去掉所有空格</span></div><div class="line">            <span class="keyword">var</span> nospace = value.replace(<span class="regexp">/\s/g</span>, <span class="string">''</span>)</div><div class="line">            <span class="comment">//重新插入空格</span></div><div class="line">            <span class="keyword">var</span> curVal = <span class="keyword">this</span>.value = nospace.replace(<span class="regexp">/(\d&#123;4&#125;)/g</span>, <span class="string">"$1 "</span>).trim()</div><div class="line">            <span class="comment">//从左边沿到原坐标之间的空格数</span></div><div class="line">            <span class="keyword">var</span> curSp = (curVal.slice(<span class="number">0</span>, caret).match(<span class="regexp">/\s/g</span>) || []).length</div><div class="line">            <span class="comment">//修正光标位置</span></div><div class="line">            <span class="keyword">this</span>.selectionEnd = <span class="keyword">this</span>.selectionStart = caret + curSp - sp</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[移动端web开发Meta标签]]></title>
      <url>http://zy380196088.github.io./2016/06/27/%E7%A7%BB%E5%8A%A8%E7%AB%AFweb%E5%BC%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="关闭自动识别数字串为电话链接"><a href="#关闭自动识别数字串为电话链接" class="headerlink" title="关闭自动识别数字串为电话链接"></a>关闭自动识别数字串为电话链接</h2><p>关闭iPhone上Safari(一些其他基于webkit Android手机浏览器)自动将数字串识别为电话链接.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<p>如果关闭自动识别后,又希望某些电话能够被识别,可以通过如下声明<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"tel:18500888800"</span>&gt;</span>18500888800<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="关闭邮箱识别"><a href="#关闭邮箱识别" class="headerlink" title="关闭邮箱识别"></a>关闭邮箱识别</h2><p>加上下面代码将不识别邮箱<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"email=no"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="删除默认的苹果工具栏和菜单"><a href="#删除默认的苹果工具栏和菜单" class="headerlink" title="删除默认的苹果工具栏和菜单"></a>删除默认的苹果工具栏和菜单</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>如果需要显示时,不加上条meta即可,默认为显示.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”apple-mobile-web-app-status-bar-style”</span> <span class="attr">content</span>=<span class="string">black”</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>默认值为default（白色），可以定为black（黑色）和black-translucent（灰色半透明）。<br>注意： 若值为“black-translucent”将会占据页面px位置，浮在页面上方（会覆盖页面20px高度–iphone4和itouch4的Retina屏幕为40px)。</p>
<h2 id="在手机HOME界面创建应用程序样式的图标"><a href="#在手机HOME界面创建应用程序样式的图标" class="headerlink" title="在手机HOME界面创建应用程序样式的图标"></a>在手机HOME界面创建应用程序样式的图标</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- for IOS--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span> <span class="attr">href</span>=<span class="string">"/static/images/xxx.png"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- for Android--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon-precomposed"</span> <span class="attr">href</span>=<span class="string">"/static/images/xxx.png"</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSS常用的]]></title>
      <url>http://zy380196088.github.io./2016/05/19/CSS%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="经典中的经典-垂直居中的方法"><a href="#经典中的经典-垂直居中的方法" class="headerlink" title="经典中的经典 : 垂直居中的方法"></a>经典中的经典 : 垂直居中的方法</h2><h3 id="弹性盒子布局flex"><a href="#弹性盒子布局flex" class="headerlink" title="弹性盒子布局flex"></a>弹性盒子布局flex</h3><p>给父容器设置:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">display</span><span class="selector-pseudo">:flex</span>;</div><div class="line"><span class="selector-tag">justify-content</span><span class="selector-pseudo">:center</span>;</div><div class="line"><span class="selector-tag">align-items</span><span class="selector-pseudo">:center</span>;</div></pre></td></tr></table></figure></p>
<h3 id="绝对定位居中"><a href="#绝对定位居中" class="headerlink" title="绝对定位居中"></a>绝对定位居中</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span>&#123;</div><div class="line">  <span class="attribute">position</span>:relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.children</span>&#123;</div><div class="line">  <span class="attribute">margin</span>:auto;</div><div class="line">  <span class="attribute">position</span>:absolute;</div><div class="line">  <span class="attribute">top</span>:<span class="number">0</span>;</div><div class="line">  <span class="attribute">right</span>:<span class="number">0</span>;</div><div class="line">  <span class="attribute">bottom</span>:<span class="number">0</span>;</div><div class="line">  <span class="attribute">left</span>:<span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="负边距-变形"><a href="#负边距-变形" class="headerlink" title="负边距,变形"></a>负边距,变形</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span>&#123;</div><div class="line">  <span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">  <span class="attribute">height</span>:<span class="number">100px</span>;</div><div class="line">  <span class="attribute">position</span>:relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.chiildren</span>&#123;</div><div class="line">  <span class="attribute">width</span>:<span class="number">50px</span>;</div><div class="line">  <span class="attribute">height</span>:<span class="number">50px</span>;</div><div class="line">  <span class="attribute">position</span>:absolute;</div><div class="line">  <span class="attribute">top</span>:<span class="number">50%</span>;</div><div class="line">  <span class="attribute">left</span>:<span class="number">50%</span>;</div><div class="line">  <span class="attribute">transform</span>:<span class="built_in">translate</span>(-50%,-50%)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="CSS背景图拉伸自适应尺寸，全浏览器兼容"><a href="#CSS背景图拉伸自适应尺寸，全浏览器兼容" class="headerlink" title="CSS背景图拉伸自适应尺寸，全浏览器兼容"></a>CSS背景图拉伸自适应尺寸，全浏览器兼容</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.bg</span>&#123;</div><div class="line">	<span class="attribute">background</span>:<span class="built_in">url</span>(http://wyz.67ge.com/wp-content/uploads/qzlogo.jpg);</div><div class="line">	<span class="attribute">filter</span>:<span class="string">"progid:DXImageTransform.Microsoft.AlphaImageLoader(sizingMethod='scale')"</span>;</div><div class="line">	<span class="attribute">-moz-background-size</span>:<span class="number">100%</span> <span class="number">100%</span>;</div><div class="line">	<span class="attribute">background-size</span>:<span class="number">100%</span> <span class="number">100%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="CSS模拟-placeholder"><a href="#CSS模拟-placeholder" class="headerlink" title="CSS模拟 placeholder"></a>CSS模拟 placeholder</h2><p>给元素设置contenteditable和data-placeholder，再利用:empty:before和:focus:before就可以模拟input placeholder了，focus时placeholder就消失，效果感人。</p>
<h2 id="更改浏览器的滚动条样式"><a href="#更改浏览器的滚动条样式" class="headerlink" title="更改浏览器的滚动条样式"></a>更改浏览器的滚动条样式</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">body &#123;</div><div class="line">		scrollbar-arrow-color: red; /*上下按钮上三角箭头的颜色*/</div><div class="line">		scrollbar-face-color: #CBCBCB; /*滚动条凸出部分的颜色*/</div><div class="line">		scrollbar-3dlight-color: blue; /*滚动条亮边的颜色*/</div><div class="line">		scrollbar-highlight-color: #333; /*滚动条空白部分的颜色*/</div><div class="line">		scrollbar-shadow-color: yellow; /*滚动条阴影的颜色*/</div><div class="line">		scrollbar-darkshadow-color: green; /*滚动条强阴影的颜色*/</div><div class="line">		scrollbar-track-color: #eee; /*滚动条背景颜色*/</div><div class="line">		scrollbar-base-color: black; /*滚动条的基本颜色*/</div><div class="line">		Cursor:url(mouse.cur); /*自定义个性鼠标*/</div><div class="line">		/*以上2项适用与：body、div、textarea、iframe*/</div><div class="line">  &#125;</div><div class="line">      ::-webkit-scrollbar &#123;  /*滚动条整体部分 */</div><div class="line">          width:10px;</div><div class="line">          margin-right:2px</div><div class="line">      &#125;</div><div class="line">      ::-webkit-scrollbar-button &#123; /*滚动条两端的按钮 */</div><div class="line">          width:10px;</div><div class="line">          background-color: yellow;</div><div class="line">      &#125;</div><div class="line">      ::-webkit-scrollbar:horizontal &#123;</div><div class="line">          height:10px;</div><div class="line">          margin-bottom:2px</div><div class="line">      &#125;</div><div class="line">      ::-webkit-scrollbar-track &#123;  /*外层轨道*/</div><div class="line">          border-radius: 10px;</div><div class="line">      &#125;</div><div class="line">      ::-webkit-scrollbar-track-piece &#123;  /*内层轨道，滚动条中间部分*/</div><div class="line">          background-color: #333333;</div><div class="line">          border-radius: 10px;</div><div class="line">      &#125;</div><div class="line">      ::-webkit-scrollbar-thumb &#123;  /* 滑块 */</div><div class="line">          width:10px;</div><div class="line">          border-radius: 5px;</div><div class="line">          background: #CBCBCB;</div><div class="line">      &#125;</div><div class="line">      ::-webkit-scrollbar-corner &#123; /* 边角 */</div><div class="line">          width: 10px;</div><div class="line">          background-color: red;</div><div class="line">      &#125;</div><div class="line">      ::-webkit-scrollbar-thumb:hover &#123; /* 鼠标移入滑块 */</div><div class="line">          background: #909090;</div><div class="line">      &#125;</div><div class="line">      .demo &#123;</div><div class="line">          width: 400px;</div><div class="line">          height: 200px;</div><div class="line">          overflow: auto;</div><div class="line">      &#125;</div></pre></td></tr></table></figure>
<h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><ol>
<li><p>添加额外标签</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.clearfix</span>&#123;</div><div class="line">	<span class="attribute">clear</span>:both;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用:after伪元素<br>给父元素加上:after伪元素</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</div><div class="line">	<span class="attribute">content</span>:<span class="string">''</span>;</div><div class="line">	<span class="attribute">display</span>:block;</div><div class="line">	<span class="attribute">clear</span>:both;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.clearfix</span>&#123;<span class="comment">/*兼容IE*/</span></div><div class="line">	<span class="attribute">zoom</span>:<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>给父元素定高</p>
</li>
<li><p>利用overflow:hidden<br>父元素样式加上overflow:hidden;</p>
</li>
</ol>
<h2 id="让页面上的内容不能被选中"><a href="#让页面上的内容不能被选中" class="headerlink" title="让页面上的内容不能被选中"></a>让页面上的内容不能被选中</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span>&#123;</div><div class="line">    <span class="attribute">-webkit-user-select</span>:none;</div><div class="line">    <span class="attribute">-moz-user-select</span>:none;</div><div class="line">    <span class="attribute">-ms-user-select</span>:none;</div><div class="line">    <span class="attribute">user-select</span>:none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="单行超出省略字"><a href="#单行超出省略字" class="headerlink" title="单行超出省略字"></a>单行超出省略字</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">  <span class="attribute">overflow</span>: hidden;</div><div class="line">  <span class="attribute">text-overflow</span>: ellipsis;</div><div class="line">  <span class="attribute">white-space</span>: nowrap;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="iOS惯性滚动"><a href="#iOS惯性滚动" class="headerlink" title="iOS惯性滚动"></a>iOS惯性滚动</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.div</span>&#123;</div><div class="line">  <span class="attribute">-webkit-overflow-scrolling</span>:touch <span class="meta">!important</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="CSS3-之-blur-高斯模糊-毛玻璃效果"><a href="#CSS3-之-blur-高斯模糊-毛玻璃效果" class="headerlink" title="CSS3 之 blur (高斯模糊,毛玻璃效果)"></a>CSS3 之 blur (高斯模糊,毛玻璃效果)</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.blur</span>&#123;</div><div class="line">    <span class="attribute">-webkit-filter</span>: <span class="built_in">blur</span>(10px); <span class="comment">/* Chrome, Opera */</span></div><div class="line">       <span class="attribute">-moz-filter</span>: <span class="built_in">blur</span>(10px);</div><div class="line">        <span class="attribute">-ms-filter</span>: <span class="built_in">blur</span>(10px);</div><div class="line">            <span class="attribute">filter</span>: <span class="built_in">blur</span>(10px);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意:IE 不支持blur,IE6?-IE9浏览器可以借助IE filter模糊滤镜实现，如下CSS：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">filter: progid:DXImageTransform.Microsoft.Blur(PixelRadius=10, MakeShadow=false);</div></pre></td></tr></table></figure></p>
<h2 id="span-标签换行问题"><a href="#span-标签换行问题" class="headerlink" title="span 标签换行问题"></a>span 标签换行问题</h2><p>加上样式：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.break</span>&#123;</div><div class="line">  <span class="attribute">display</span>:inline-block;</div><div class="line">  <span class="attribute">width</span>:<span class="number">60%</span>;</div><div class="line">  <span class="attribute">word-wrap</span>:break-word;</div><div class="line">  <span class="attribute">white-space</span>:normal;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>有时候给span样式设置了 display:block;活着 display:inline-block;后仍然不换行…<br>是因为 span 不是块状元素。本身自带有 左浮动的效果，并且连续的英文字母跟数字是没办法 自动换行的;必须要<strong>强制换行</strong>。<br>但是光用word-wrap:break-word; 是不行的。所以,必须要在限制了宽度的情况下,还要增加 white-space:normal;</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Sass学习笔记]]></title>
      <url>http://zy380196088.github.io./2016/05/09/Sass%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="Sass语法格式"><a href="#Sass语法格式" class="headerlink" title="Sass语法格式"></a>Sass语法格式</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>SASS允许使用变量，所有变量以$开头。<br>如果变量需要镶嵌在字符串之中，就必须需要写在#{}之中。<br>例如:<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$side</span> : left;</div><div class="line"><span class="selector-class">.rounded</span> &#123;</div><div class="line">	<span class="attribute">border</span>-#&#123;<span class="variable">$side</span>&#125;-radius: <span class="number">5px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>CSS代码:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">font</span>: <span class="number">100%</span> Helvetica, sans-serif;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Sass语法格式来编写:<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$font-stack</span>: Helvetica, sans-serif</div><div class="line"><span class="variable">$primary-color</span>: <span class="number">#333</span></div><div class="line"></div><div class="line">body</div><div class="line">  font: <span class="number">100%</span> <span class="variable">$font-stack</span></div><div class="line">  color: <span class="variable">$primary-color</span></div></pre></td></tr></table></figure></p>
<p>SCSS语法格式来编写:<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$font-stack</span>: Helvetica, sans-serif;</div><div class="line"><span class="variable">$primary-color</span>: <span class="number">#333</span>;</div><div class="line"></div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">font</span>: <span class="number">100%</span> <span class="variable">$font-stack</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="variable">$primary-color</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h3><p>SASS允许在代码中使算式:<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">　　　　<span class="attribute">margin</span>: (<span class="number">14px</span>/<span class="number">2</span>);</div><div class="line">　　　　<span class="attribute">top</span>: <span class="number">50px</span> + <span class="number">100px</span>;</div><div class="line">　　　　<span class="attribute">right</span>: <span class="variable">$var</span> * <span class="number">10%</span>;</div><div class="line">　　&#125;</div></pre></td></tr></table></figure></p>
<h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><p>下面css代码:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span> <span class="selector-tag">a</span>&#123;</div><div class="line">	<span class="attribute">color</span>:red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以写成:<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">	hi&#123;</div><div class="line">	<span class="attribute">color</span>:red;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>还支持属性嵌套(<strong>属性后必须加上冒号</strong>):<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">	<span class="attribute">border</span>: &#123;</div><div class="line">		color:red;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="代码重用"><a href="#代码重用" class="headerlink" title="代码重用"></a>代码重用</h2><h3 id="继承-extend"><a href="#继承-extend" class="headerlink" title="继承@extend"></a>继承@extend</h3><p>ASS允许一个选择器，继承另一个选择器。比如，现有box1:<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box1</span>&#123;</div><div class="line">	<span class="attribute">border</span>:<span class="number">1px</span> sold <span class="number">#fff</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>box2要继承box1,需要使用@extend命令:<br>.box2{<br>    @extend .box1;<br>    background-color: red;<br>}</p>
<h3 id="Mixin-include"><a href="#Mixin-include" class="headerlink" title="Mixin@include"></a>Mixin@include</h3><p>Mixin有点像C语言的宏（macro），是可以重用的代码块。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">mixin</span> left&#123;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">margin-left</span>:<span class="number">10px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用@include命令调用<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">	@<span class="keyword">include</span> left;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>更强大的用法，可以指定参数和缺省值.<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">mixin</span> left(<span class="variable">$valuse</span>:<span class="number">10px</span>)&#123;</div><div class="line">	<span class="attribute">float</span>:left;</div><div class="line">	<span class="attribute">margin-right</span>:<span class="variable">$value</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//使用的时候加上参数即可</span></div><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">	@<span class="keyword">include</span> left(<span class="number">20px</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>一个有用的mixin实例，用来生成浏览器前缀:<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">mixin</span> rounded(<span class="variable">$vert</span>, <span class="variable">$horz</span>, <span class="variable">$radius</span>: 10px) &#123;</div><div class="line">　　　　<span class="attribute">border</span>-#&#123;<span class="variable">$vert</span>&#125;-#&#123;<span class="variable">$horz</span>&#125;-radius: <span class="variable">$radius</span>;</div><div class="line">　　　　-moz-<span class="attribute">border-radius</span>-#&#123;<span class="variable">$vert</span>&#125;#&#123;<span class="variable">$horz</span>&#125;: <span class="variable">$radius</span>;</div><div class="line">　　　　-webkit-<span class="attribute">border</span>-#&#123;<span class="variable">$vert</span>&#125;-#&#123;<span class="variable">$horz</span>&#125;-radius: <span class="variable">$radius</span>;</div><div class="line">　　&#125;</div></pre></td></tr></table></figure></p>
<h3 id="插入文件-import"><a href="#插入文件-import" class="headerlink" title="插入文件@import"></a>插入文件@import</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">import</span> <span class="string">"path/filename.scss"</span></div></pre></td></tr></table></figure>
<h2 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h2><h3 id="条件语句-if"><a href="#条件语句-if" class="headerlink" title="条件语句@if"></a>条件语句@if</h3><p>还可以配合使用@else</p>
<h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><h4 id="for"><a href="#for" class="headerlink" title="@for"></a>@for</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">for</span> <span class="variable">$i</span> from 1 to 10 &#123;</div><div class="line">　　　　<span class="selector-class">.border-</span>#&#123;<span class="variable">$i</span>&#125; &#123;</div><div class="line">　　　　　　<span class="attribute">border</span>: #&#123;<span class="variable">$i</span>&#125;px solid blue;</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;</div></pre></td></tr></table></figure>
<h4 id="while"><a href="#while" class="headerlink" title="@while"></a>@while</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$i</span>: <span class="number">6</span>;</div><div class="line">　　@<span class="keyword">while</span> <span class="variable">$i</span> &gt; 0 &#123;</div><div class="line">　　　　<span class="selector-class">.item-</span>#&#123;<span class="variable">$i</span>&#125; &#123; <span class="attribute">width</span>: <span class="number">2em</span> * <span class="variable">$i</span>; &#125;</div><div class="line">　　　　<span class="variable">$i</span>: <span class="variable">$i</span> - <span class="number">2</span>;</div><div class="line">　　&#125;</div></pre></td></tr></table></figure>
<h4 id="each"><a href="#each" class="headerlink" title="@each"></a>@each</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">each</span> <span class="variable">$member</span> in a, b, c, d &#123;</div><div class="line">　　　　.#&#123;<span class="variable">$member</span>&#125; &#123;</div><div class="line">　　　　　　<span class="attribute">background-image</span>: url(<span class="string">"/image/#&#123;$member&#125;.jpg"</span>);</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;</div></pre></td></tr></table></figure>
<h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@function double(<span class="variable">$n</span>) &#123;</div><div class="line">　　　　@return <span class="variable">$n</span> * 2;</div><div class="line">　　&#125;</div><div class="line">　　<span class="selector-id">#sidebar</span> &#123;</div><div class="line">　　　　<span class="attribute">width</span>: double(<span class="number">5px</span>);</div><div class="line">　　&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[学习笔记-Javascript高级程序设计]]></title>
      <url>http://zy380196088.github.io./2016/05/09/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="JavaScript模块化编程的重要性"><a href="#JavaScript模块化编程的重要性" class="headerlink" title="JavaScript模块化编程的重要性"></a>JavaScript模块化编程的重要性</h2><ol>
<li><p>出现大量的全局变量<br>JS在每个地方都可以定义全局变量,容易造成变量污染,程序将难以维护.</p>
</li>
<li><p>JS 加载顺序要按照代码的依赖顺序</p>
</li>
<li>html一次性加载过多的 JS 脚本页面容易出现假死</li>
</ol>
<h2 id="window-location-href的用法-动态输出跳转"><a href="#window-location-href的用法-动态输出跳转" class="headerlink" title="window.location.href的用法(动态输出跳转)"></a>window.location.href的用法(动态输出跳转)</h2><h3 id="self-location-href-“-url”"><a href="#self-location-href-“-url”" class="headerlink" title="self.location.href = “/url”"></a>self.location.href = “/url”</h3><p>当前页面打开 URL 页面</p>
<h3 id="location-href-“-url”"><a href="#location-href-“-url”" class="headerlink" title="location.href = “/url”"></a>location.href = “/url”</h3><p>当前页面打开 URL 页面</p>
<h3 id="windows-location-href-“-url”"><a href="#windows-location-href-“-url”" class="headerlink" title="windows.location.href = “/url”"></a>windows.location.href = “/url”</h3><p>当前页面打开 URL 页面</p>
<h3 id="this-location-href-”-url”"><a href="#this-location-href-”-url”" class="headerlink" title="this.location.href=”/url”"></a>this.location.href=”/url”</h3><p>当前页面打开URL页面</p>
<h3 id="parent-location-href-”-url”"><a href="#parent-location-href-”-url”" class="headerlink" title="parent.location.href=”/url”"></a>parent.location.href=”/url”</h3><p>在父页面打开新页面</p>
<h3 id="top-location-href-”-url”"><a href="#top-location-href-”-url”" class="headerlink" title="top.location.href=”/url”"></a>top.location.href=”/url”</h3><p>在顶层页面打开新页面</p>
<h2 id="JavaScript-数据类型"><a href="#JavaScript-数据类型" class="headerlink" title="JavaScript 数据类型"></a>JavaScript 数据类型</h2><h3 id="5种简单数据"><a href="#5种简单数据" class="headerlink" title="5种简单数据"></a>5种简单数据</h3><h2 id="JS中的内部属性与delete操作符介绍"><a href="#JS中的内部属性与delete操作符介绍" class="headerlink" title="JS中的内部属性与delete操作符介绍"></a>JS中的内部属性与delete操作符介绍</h2><p>在讲解Configurable之前，我们首先来看一道面试题：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">1</span>;</div><div class="line"><span class="built_in">console</span>.log( <span class="built_in">window</span>.a ); <span class="comment">// 1</span></div><div class="line"><span class="built_in">console</span>.log( <span class="keyword">delete</span> <span class="built_in">window</span>.a ); <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log( <span class="built_in">window</span>.a ); <span class="comment">// undefined</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</div><div class="line"><span class="built_in">console</span>.log( <span class="built_in">window</span>.b ); <span class="comment">// 2</span></div><div class="line"><span class="built_in">console</span>.log( <span class="keyword">delete</span> <span class="built_in">window</span>.b ); <span class="comment">// false</span></div><div class="line"><span class="built_in">console</span>.log( <span class="built_in">window</span>.b ); <span class="comment">// 2</span></div></pre></td></tr></table></figure></p>
<p>从上面的这道题可以看出两个的区别：在没有使用var声明变量时，使用delete关键词是可以进行删除的，再次获取时值就是undefined了；在使用var声明的变量，使用delete是不能删除的，再获取时值依然是2。</p>
<h3 id="delete操作符"><a href="#delete操作符" class="headerlink" title="delete操作符"></a>delete操作符</h3><p>使用delete删除变量或属性时，删除成功返回true，否则返回false。如上面的例子中，delete无法删除变量a时，则返回false；而delete能成功删除变量b，则返回true。</p>
<p>除了上述的两种情况，还有其他的各种常用变量也有能被delete删除的，也有不能被删除的。我们先不管delete这些变量时，为什么会产生这样的结果，这里只看他的返回值：</p>
<p>删除delete数组中其中的一个元素：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用for~in是循环不到的，直接忽略到该元素</span></div><div class="line"><span class="comment">// 使用for()可以得到该元素，但是值是undefined</span></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line"><span class="built_in">console</span>.log( arr );         <span class="comment">// [1, 2, 3, 4]</span></div><div class="line"><span class="built_in">console</span>.log( <span class="keyword">delete</span> arr[<span class="number">2</span>] );   <span class="comment">// true，删除成功</span></div><div class="line"><span class="built_in">console</span>.log( arr );         <span class="comment">// [1, 2, undefined, 4]</span></div></pre></td></tr></table></figure></p>
<p>删除function类型的变量：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// chrome 不能删除；火狐可以删除</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>)</span>&#123;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log( func );</div><div class="line"><span class="built_in">console</span>.log( <span class="keyword">delete</span> func );</div><div class="line"><span class="built_in">console</span>.log( func );</div></pre></td></tr></table></figure></p>
<p>删除function.length，该length是获取形参的个数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func1</span>(<span class="params">a, b</span>)</span>&#123;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log( func1.length );    <span class="comment">// 2</span></div><div class="line"><span class="built_in">console</span>.log( <span class="keyword">delete</span> func1.length ); <span class="comment">// true，删除成功</span></div><div class="line"><span class="built_in">console</span>.log( func1.length );    <span class="comment">// 0</span></div></pre></td></tr></table></figure></p>
<p>删除常用变量：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log( <span class="keyword">delete</span> <span class="literal">NaN</span> );      <span class="comment">// false，删除失败</span></div><div class="line"><span class="built_in">console</span>.log( <span class="keyword">delete</span> <span class="literal">undefined</span> );<span class="comment">// false</span></div><div class="line"><span class="built_in">console</span>.log( <span class="keyword">delete</span> <span class="literal">Infinity</span> ); <span class="comment">// false</span></div><div class="line"><span class="built_in">console</span>.log( <span class="keyword">delete</span> <span class="literal">null</span> );     <span class="comment">// true，删除成功</span></div></pre></td></tr></table></figure></p>
<p>删除prototype，而不是删除prototype上的属性：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">&#125;</div><div class="line">Person.prototype.name = <span class="string">"蚊子"</span>;</div><div class="line"><span class="built_in">console</span>.log( <span class="keyword">delete</span> Person.prototype ); <span class="comment">// false，无法删除</span></div><div class="line"><span class="built_in">console</span>.log( <span class="keyword">delete</span> <span class="built_in">Object</span>.prototype ); <span class="comment">// false</span></div></pre></td></tr></table></figure></p>
<p>删除数组和字符串的length时：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line"><span class="built_in">console</span>.log( arr.length );      <span class="comment">// 4</span></div><div class="line"><span class="built_in">console</span>.log( <span class="keyword">delete</span> arr.length );   <span class="comment">// false，删除失败</span></div><div class="line"><span class="built_in">console</span>.log( arr.length );      <span class="comment">// 4</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> str = <span class="string">'abcdefg'</span>;</div><div class="line"><span class="built_in">console</span>.log( str.length );      <span class="comment">// 7</span></div><div class="line"><span class="built_in">console</span>.log( <span class="keyword">delete</span> str.length );   <span class="comment">// false，删除失败</span></div><div class="line"><span class="built_in">console</span>.log( str.length );      <span class="comment">// 7</span></div></pre></td></tr></table></figure></p>
<p>删除obj中的属性时：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">'wenzi'</span>, <span class="attr">age</span>:<span class="number">25</span>&#125;;</div><div class="line"><span class="built_in">console</span>.log( obj.name );    <span class="comment">// wenzi</span></div><div class="line"><span class="built_in">console</span>.log( <span class="keyword">delete</span> obj.name ); <span class="comment">// true，删除成功</span></div><div class="line"><span class="built_in">console</span>.log( obj.name );    <span class="comment">// undefined</span></div><div class="line"><span class="built_in">console</span>.log( obj );         <span class="comment">// &#123; age:25 &#125;</span></div></pre></td></tr></table></figure></p>
<p>删除实例对象中的属性时，从以下的输出结果可以看出，使用delete删除属性时，删除的仅仅是实例对象本身的属性，而不能删除prototype上的属性，即使再删一次也是删除掉不的；若要删除prototype上的属性的属性或方法，只能是：delete Person.prototype.name：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = <span class="string">'wenzi'</span>;</div><div class="line">&#125;</div><div class="line">Person.prototype.name = <span class="string">'蚊子'</span>;</div><div class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> Person();</div><div class="line"><span class="built_in">console</span>.log( student.name );    <span class="comment">// wenzi</span></div><div class="line"><span class="built_in">console</span>.log( <span class="keyword">delete</span> student.name ); <span class="comment">// true，删除成功</span></div><div class="line"><span class="built_in">console</span>.log( student.name );    <span class="comment">// 蚊子</span></div><div class="line"><span class="built_in">console</span>.log( <span class="keyword">delete</span> student.name ); <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log( student.name );    <span class="comment">// 蚊子</span></div><div class="line"><span class="built_in">console</span>.log( <span class="keyword">delete</span> Person.prototype.name );<span class="comment">// true，删除成功</span></div><div class="line"><span class="built_in">console</span>.log( student.name );    <span class="comment">// undefined</span></div></pre></td></tr></table></figure></p>
<h3 id="js的内部属性"><a href="#js的内部属性" class="headerlink" title="js的内部属性"></a>js的内部属性</h3><p>在上面的例子中，有的变量或属性能够删除成功，而有的变量或属性则无法进行删除，那是什么决定这个变量或属性能不能被删除呢。</p>
<p>ECMA-262第5版定义了JS对象属性中特征（用于JS引擎，外部无法直接访问）。ECMAScript中有两种属性：数据属性和访问器属性。</p>
<h4 id="数据属性"><a href="#数据属性" class="headerlink" title="数据属性"></a>数据属性</h4><p>数据属性指包含一个数据值的位置，可在该位置读取或写入值，该属性有4个供述其行为的特性：</p>
<p>[[configurable]]:表示能否使用delete操作符删除从而重新定义，或能否修改为访问器属性。默认为true;<br>[[Enumberable]]:表示是否可通过for-in循环返回属性。默认true;<br>[[Writable]]:表示是否可修改属性的值。默认true;<br>[[Value]]:包含该属性的数据值。读取/写入都是该值。默认为undefined；如上面实例对象Person中定义了name属性，其值为’wenzi’,对该值的修改都反正在这个位置<br>要修改对象属性的默认特征（默认都为true)，可调用Object.defineProperty()方法，它接收三个参数：属性所在对象，属性名和一个描述符对象（必须是：configurable、enumberable、writable和value，可设置一个或多个值）。</p>
<p>如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">'name'</span>, &#123;</div><div class="line">  <span class="attr">configurable</span>: <span class="literal">false</span>,  <span class="comment">// 不可删除，且不能修改为访问器属性</span></div><div class="line">  writable: <span class="literal">false</span>,      <span class="comment">// 不可修改</span></div><div class="line">  value: <span class="string">'wenzi'</span>            <span class="comment">// name的值为wenzi</span></div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log( person.name);          <span class="comment">// wenzi</span></div><div class="line"><span class="built_in">console</span>.log( <span class="keyword">delete</span> person.name );  <span class="comment">// false，无法删除</span></div><div class="line">person.name = <span class="string">'lily'</span>;</div><div class="line"><span class="built_in">console</span>.log( person.name );         <span class="comment">// wenzi</span></div></pre></td></tr></table></figure></p>
<p>可以看出，delete及重置person.name的值都没有生效，这就是因为调用defineProperty函数修改了对象属性的特征；值得注意的是一旦将configurable设置为false，则无法再使用defineProperty将其修改为true（执行会报错：Uncaught TypeError: Cannot redefine property: name）;</p>
<h4 id="访问器属性"><a href="#访问器属性" class="headerlink" title="访问器属性"></a>访问器属性</h4><p>它主要包括一对getter和setter函数，在读取访问器属性时，会调用getter返回有效值；写入访问器属性时，调用setter，写入新值；该属性有以下4个特征：</p>
<p>[[Configurable]]:是否可通过delete操作符删除重新定义属性；<br>[[Numberable]]:是否可通过for-in循环查找该属性；<br>[[Get]]:读取属性时自动调用，默认：undefined;<br>[[Set]]:写入属性时自动调用，默认：undefined;<br>访问器属性不能直接定义，必须使用defineProperty()来定义，如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = &#123;</div><div class="line">  <span class="attr">_age</span>: <span class="number">18</span></div><div class="line">&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">'isAdult'</span>, &#123;</div><div class="line">    <span class="attr">Configurable</span> : <span class="literal">false</span>,</div><div class="line">  <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._age &gt;= <span class="number">18</span>) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log( person.isAdult ); <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<p>不过还是有一点需要额外注意一下，Object.defineProperty()方法设置属性时，不能同时声明访问器属性（set和get）和数据属性（writable或者value）。意思就是，某个属性设置了writable或者value属性，那么这个属性就不能声明get和set了，反之亦然。</p>
<p>如若像下面的方式进行定义，访问器属性和数据属性同时存在：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">'name'</span>, &#123;</div><div class="line">  <span class="attr">value</span>: <span class="string">'wenzi'</span>,</div><div class="line">  <span class="attr">set</span>: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    myName = name;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> myName;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>上面的代码看起来貌似是没有什么问题，但是真正执行时会报错，报错如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Uncaught TypeError: Invalid property. A property cannot both have accessors and be writable or have a value</div></pre></td></tr></table></figure></p>
<p>对于数据属性，可以取得：configurable,enumberable,writable和value；</p>
<p>对于访问器属性，可以取得：configurable,enumberable,get和set。</p>
<p>由此我们可知：一个变量或属性是否可以被删除，是由其内部属性Configurable进行控制的，若Configurable为true，则该变量或属性可以被删除，否则不能被删除。</p>
<p>可是我们应该怎么获取这个Configurable值呢，总不能用delete试试能不能删除吧。有办法滴！！</p>
<h4 id="获取内部属性"><a href="#获取内部属性" class="headerlink" title="获取内部属性"></a>获取内部属性</h4><p>ES5为我们提供了Object.getOwnPropertyDescriptor(object, property)来获取内部属性。</p>
<p>如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = &#123;<span class="attr">name</span>:<span class="string">'wenzi'</span>&#125;;</div><div class="line"><span class="keyword">var</span> desp = <span class="built_in">Object</span>.getOwnPropertyDescriptor(person, <span class="string">'name'</span>); <span class="comment">// person中的name属性</span></div><div class="line"><span class="built_in">console</span>.log( desp );    <span class="comment">// &#123;value: "wenzi", writable: true, enumerable: true, configurable: true&#125;</span></div></pre></td></tr></table></figure></p>
<p>通过Object.getOwnPropertyDescriptor(object, property)我们能够获取到4个内部属性，configurable控制着变量或属性是否可被删除。这个例子中，person.name的configurable是true，则说明是可以被删除的：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log( person.name );         <span class="comment">// wenzi</span></div><div class="line"><span class="built_in">console</span>.log( <span class="keyword">delete</span> person.name );  <span class="comment">// true，删除成功</span></div><div class="line"><span class="built_in">console</span>.log( person.name );         <span class="comment">// undefined</span></div></pre></td></tr></table></figure></p>
<p>我们再回到最开始的那个面试题：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> desp = <span class="built_in">Object</span>.getOwnPropertyDescriptor(<span class="built_in">window</span>, <span class="string">'a'</span>);</div><div class="line"><span class="built_in">console</span>.log( desp.configurable );   <span class="comment">// true，可以删除</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</div><div class="line"><span class="keyword">var</span> desp = <span class="built_in">Object</span>.getOwnPropertyDescriptor(<span class="built_in">window</span>, <span class="string">'b'</span>);</div><div class="line"><span class="built_in">console</span>.log( desp.configurable );   <span class="comment">// false，不能删除</span></div></pre></td></tr></table></figure></p>
<p>跟我们使用delete操作删除变量时产生的结果是一样的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript - 面向对象编程]]></title>
      <url>http://zy380196088.github.io./2016/05/08/JavaScript-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = name;</div><div class="line">	<span class="keyword">this</span>.hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		alert(<span class="string">'hello,'</span>+ <span class="keyword">this</span>.name + <span class="string">'!'</span>);</div><div class="line">	&#125;	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> Student(<span class="string">'小明'</span>);</div><div class="line"><span class="keyword">var</span> xiaohong = <span class="keyword">new</span> Student(<span class="string">'小红'</span>);</div></pre></td></tr></table></figure>
<p>让创建的对象共享一个hello函数，这样可以节省内存<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = name;</div><div class="line">&#125; </div><div class="line"></div><div class="line">Student.rototype.hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	alert(<span class="string">'hello,'</span>+ <span class="keyword">this</span>.name + <span class="string">'!'</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>还可以写一个createStudent()函数，在内部封装所有的new操作。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">props</span>)</span>&#123;</div><div class="line">	thi.name = props.name || <span class="string">'匿名'</span>; <span class="comment">//默认值为'匿名'</span></div><div class="line">	<span class="keyword">this</span>.grade = props.grade || <span class="number">1</span>;  <span class="comment">// 默认值为1</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">Student.prototype.hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	alert(<span class="string">'Hello, '</span> + <span class="keyword">this</span>.name + <span class="string">'!'</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createStudent</span>(<span class="params">props</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Student(props || &#123;&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h2><p>请参考<a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014344997013405abfb7f0e1904a04ba6898a384b1e925000" target="_blank" rel="external">原型继承－廖雪峰</a></p>
<h2 id="class继承"><a href="#class继承" class="headerlink" title="class继承"></a>class继承</h2><p>新的关键字class从ES6开始正式被引入到JavaScript中。class的目的就是让定义类更简单。<br>如果用新的class关键字来编写Student，可以这样写：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name) &#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    hello() &#123;</div><div class="line">        alert(<span class="string">'Hello, '</span> + <span class="keyword">this</span>.name + <span class="string">'!'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>用class定义对象的另一个巨大的好处是继承更方便了。想一想我们从Student派生一个PrimaryStudent需要编写的代码量。现在，原型继承的中间对象，原型对象的构造函数等等都不需要考虑了，直接通过extends来实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrimaryStudent</span> <span class="keyword">extends</span> <span class="title">Student</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(name, grade) &#123;</div><div class="line">        <span class="keyword">super</span>(name); <span class="comment">// 记得用super调用父类的构造方法!</span></div><div class="line">        <span class="keyword">this</span>.grade = grade;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    myGrade() &#123;</div><div class="line">        alert(<span class="string">'I am at grade '</span> + <span class="keyword">this</span>.grade);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>ES6引入的class和原有的JavaScript原型继承有什么区别呢？实际上它们没有任何区别，class的作用就是让JavaScript引擎去实现原来需要我们自己编写的原型链代码。简而言之，用class的好处就是极大地简化了原型链代码。</p>
<h2 id="公有属性和公有方法"><a href="#公有属性和公有方法" class="headerlink" title="公有属性和公有方法"></a>公有属性和公有方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;<span class="comment">//公有属性</span></div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div><div class="line">User.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//公有方法</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> User(<span class="string">'zoey'</span>,<span class="number">24</span>);</div><div class="line"><span class="built_in">console</span>.log(user.getName());<span class="comment">//zoey</span></div></pre></td></tr></table></figure>
<h2 id="私有属性和方法"><a href="#私有属性和方法" class="headerlink" title="私有属性和方法"></a>私有属性和方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">    <span class="comment">//私有属性</span></div><div class="line">    <span class="keyword">var</span> name = name;</div><div class="line">    <span class="keyword">var</span> age = age;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">alertAge</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">//私有方法</span></div><div class="line">        alert(age)</div><div class="line">    &#125;</div><div class="line">    alertAge(age)<span class="comment">//弹出24</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> User(<span class="string">'zoey'</span>,<span class="number">24</span>);</div></pre></td></tr></table></figure>
<h2 id="静态属性和方法"><a href="#静态属性和方法" class="headerlink" title="静态属性和方法"></a>静态属性和方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">User.age = <span class="number">24</span>;</div><div class="line">User.myname = <span class="string">'zoey'</span>;</div><div class="line">User.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//静态方法</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.myname;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(User.getName())<span class="comment">//zoey</span></div></pre></td></tr></table></figure>
<h2 id="特权方法"><a href="#特权方法" class="headerlink" title="特权方法"></a>特权方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> name = name;</div><div class="line">    <span class="keyword">var</span> age = age;</div><div class="line">    <span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">//特权方法</span></div><div class="line">        <span class="keyword">return</span> name;<span class="comment">//私有属性和方法不能使用this调用</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> User(<span class="string">'zoey'</span>,<span class="number">24</span>);</div><div class="line"><span class="built_in">console</span>.log(user.getName());<span class="comment">//zoey</span></div></pre></td></tr></table></figure>
<h2 id="静态类"><a href="#静态类" class="headerlink" title="静态类"></a>静态类</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> user = &#123;</div><div class="line">    <span class="attr">init</span> : <span class="function"><span class="keyword">function</span>(<span class="params">name,age</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">getName</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">user.init(<span class="string">'zoey'</span>,<span class="number">24</span>);</div><div class="line"><span class="built_in">console</span>.log(user.getName());<span class="comment">//zoey</span></div></pre></td></tr></table></figure>
<h2 id="公有方法调用规则"><a href="#公有方法调用规则" class="headerlink" title="公有方法调用规则"></a>公有方法调用规则</h2><p>调用共有方法必须先实例化对象.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.myname = <span class="string">'zoey'</span>;<span class="comment">//公有属性</span></div><div class="line">    <span class="keyword">this</span>.age = <span class="number">24</span>;</div><div class="line">    <span class="keyword">this</span>.do = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="comment">//特权方法</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.myname + <span class="string">'学习JavaScript'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">User.eat = <span class="function"><span class="keyword">function</span>(<span class="params">food</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'吃了'</span>+food;</div><div class="line">&#125;</div><div class="line"></div><div class="line">User.prototype.alertAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.age)</div><div class="line">&#125;</div><div class="line">User.prototype.alertDo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.do());<span class="comment">//调用特权方法</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">User.prototype.elartEat = <span class="function"><span class="keyword">function</span>(<span class="params">food</span>)</span>&#123;</div><div class="line">    alert(User.eat(food));<span class="comment">//只能通过对象本身调用静态方法</span></div><div class="line">    alert(<span class="keyword">this</span>.eat(food));<span class="comment">//报错</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> User();</div><div class="line">user.alertAge();<span class="comment">//24</span></div><div class="line">user.alertDo();<span class="comment">//zoey学习JavaScript</span></div><div class="line">user.alertEat(<span class="string">'方便面'</span>)<span class="comment">//吃了方便面</span></div></pre></td></tr></table></figure></p>
<h2 id="静态方法的调用规则"><a href="#静态方法的调用规则" class="headerlink" title="静态方法的调用规则"></a>静态方法的调用规则</h2><p>使用静态方法时，无需实例化对象，便可以调用，对象实例不能调用对象的静态方法，只能调用实例自身的静态属性和方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">User.age = <span class="number">26</span>; <span class="comment">//静态属性</span></div><div class="line">User.myname = <span class="string">'fire子海'</span>;</div><div class="line">User.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//静态方法</span></div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.myname;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> User();</div><div class="line"><span class="built_in">console</span>.log(user.getName); <span class="comment">//TypeError: user.getName is not a function</span></div><div class="line">user.supper = <span class="string">'方便面'</span>;</div><div class="line">user.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">'晚餐只有'</span> + <span class="keyword">this</span>.supper;</div><div class="line">&#125;</div><div class="line">user.eat(); <span class="comment">//晚餐只有方便面</span></div></pre></td></tr></table></figure></p>
<p>静态方法无法调用公有属性、公有方法、私有方法、私有属性、特权方法和原型属性.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.myname = <span class="string">'fire子海'</span>; <span class="comment">//公有属性</span></div><div class="line">  <span class="keyword">this</span>.age = <span class="number">26</span>;</div><div class="line">  <span class="keyword">this</span>.do = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//特权方法</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.myname + <span class="string">'学习js'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">User.prototype.alertAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//公共方法，也叫原型方法</span></div><div class="line">  alert(<span class="keyword">this</span>.age);</div><div class="line">&#125;</div><div class="line">User.prototype.sex = <span class="string">'男'</span>; <span class="comment">//原型属性</span></div><div class="line">User.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//静态方法</span></div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.myname;</div><div class="line">&#125;</div><div class="line">User.getAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.alertAge();</div><div class="line">&#125;</div><div class="line">User.getDo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.do();</div><div class="line">  &#125;</div><div class="line"><span class="comment">//console.log(User.getName())//undefined</span></div><div class="line"><span class="comment">//console.log(User.getDo());//TypeError: this.do is not a function</span></div><div class="line"><span class="comment">//console.log(User.getAge())//TypeError: this.alertAge is not a function</span></div></pre></td></tr></table></figure></p>
<h2 id="特权方法的调用规则"><a href="#特权方法的调用规则" class="headerlink" title="特权方法的调用规则"></a>特权方法的调用规则</h2><p>特权方法通过this调用公有方法、公有属性，通过对象本身调用静态方法和属性，在方法体内直接调用私有属性和私有方法.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">girlfriend</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> girlfriend = girlfriend;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getGirlFriend</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'我女朋友'</span> + girlfriend + <span class="string">'是美女！'</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.myname = <span class="string">'fire子海'</span>; <span class="comment">//公有属性</span></div><div class="line">  <span class="keyword">this</span>.age = <span class="number">26</span>;</div><div class="line">  <span class="keyword">this</span>.do = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//特权方法</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.myname + <span class="string">'学习js'</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.alertAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.changeAge(); <span class="comment">//特权方法调用公有方法</span></div><div class="line">    alert(<span class="keyword">this</span>.age);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.alertGirlFriend = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    alert(getGirlFriend()); <span class="comment">//调用私有方法</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">User.prototype.changeAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.age = <span class="number">29</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> User(<span class="string">'某某'</span>);</div><div class="line">user.alertAge(); <span class="comment">//alert:29</span></div><div class="line">user.alertGirlFriend(); <span class="comment">//alert:我的女朋友某某是美女！</span></div></pre></td></tr></table></figure></p>
<h2 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h2><p>对象的私有方法和属性,外部是不可以访问的,在方法的内部不是能this调用对象的公有方法、公有属性、特权方法的.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">girlfriend</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> girlfriend = girlfriend;</div><div class="line">  <span class="keyword">this</span>.myname = <span class="string">'fire子海'</span>; <span class="comment">//公有属性</span></div><div class="line">  <span class="keyword">this</span>.age = <span class="number">26</span>;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getGirlFriend</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//this.myname ;//此时的this指向的window对象，并非User对象，</span></div><div class="line">    <span class="comment">// this.myname = 'fire子海',此时的this指向的是getGirFriend对象了。</span></div><div class="line">    <span class="comment">//如果通过this调用了getGirFriend中不存在的方法呀属性，this便会指向window 对象，只有this调用了getGirlFriend存在的方法和属性，this才会指定getGirlFriend;</span></div><div class="line">    alert(User.eat(<span class="string">'泡面'</span>)); <span class="comment">//alert：晚餐只有方便面</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.do = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//特权方法</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.myname + <span class="string">'学习js'</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.alertAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.changeAge(); <span class="comment">//特权方法调用公有方法</span></div><div class="line">    alert(<span class="keyword">this</span>.age);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">this</span>.alertGirlFriend = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    getGirlFriend(); <span class="comment">//调用私有方法</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">User.eat = <span class="function"><span class="keyword">function</span>(<span class="params">supper</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="string">'晚餐只有'</span> + supper;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> User(<span class="string">'某某'</span>);</div><div class="line">user.alertGirlFriend();</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql入门学习]]></title>
      <url>http://zy380196088.github.io./2016/05/06/mysql%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="php常用的mysql函数："><a href="#php常用的mysql函数：" class="headerlink" title="php常用的mysql函数："></a>php常用的mysql函数：</h2><h3 id="mysql-connect-“主机名称-ip”-”用户名”-”密码”"><a href="#mysql-connect-“主机名称-ip”-”用户名”-”密码”" class="headerlink" title="mysql_connect(“主机名称/ip”,”用户名”,”密码”)"></a>mysql_connect(“主机名称/ip”,”用户名”,”密码”)</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$link = @mysql_connect(<span class="string">"localhost"</span>,<span class="string">"root"</span>,<span class="string">"root"</span>)<span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"数据库连接错误"</span>).mysql_error();</div></pre></td></tr></table></figure>
<h3 id="mysql-error"><a href="#mysql-error" class="headerlink" title="mysql_error()"></a>mysql_error()</h3><p>返回上一个mysql操作的文本错误信息；@错误抑制符号</p>
<h3 id="mysql-select-db-“数据库名称”-link"><a href="#mysql-select-db-“数据库名称”-link" class="headerlink" title="mysql_select_db(“数据库名称”,$link)"></a>mysql_select_db(“数据库名称”,$link)</h3><h3 id="mysql-query"><a href="#mysql-query" class="headerlink" title="mysql_query()"></a>mysql_query()</h3><p>向数据库发送一条sql命令</p>
<h3 id="mysql-affected-rows"><a href="#mysql-affected-rows" class="headerlink" title="mysql_affected_rows()"></a>mysql_affected_rows()</h3><p>取的前一条sql语句，返回受影响的行数</p>
<h3 id="mysql-cloes"><a href="#mysql-cloes" class="headerlink" title="mysql_cloes()"></a>mysql_cloes()</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Sublime Text快捷键]]></title>
      <url>http://zy380196088.github.io./2016/05/04/Sublime-Text%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><p>Command + D 选中一个单词<br>Command + L 选中一行<br><a id="more"></a></p>
<p>Command + A 全选<br>Ctrl + Command + M 选中括号内的所有内容</p>
<p>Command + Ctrl + G (选中部分文本时)按此组合键可以选中所有相同文本</p>
<h2 id="CSS排序"><a href="#CSS排序" class="headerlink" title="CSS排序"></a>CSS排序</h2><p>选中CSS属性后按F5</p>
<h2 id="命令面板"><a href="#命令面板" class="headerlink" title="命令面板"></a>命令面板</h2><p>Command + shift + P</p>
<h2 id="跨文件编辑"><a href="#跨文件编辑" class="headerlink" title="跨文件编辑"></a>跨文件编辑</h2><p>Command + Shift + F 查找、替换代码</p>
<h2 id="文件爬虫"><a href="#文件爬虫" class="headerlink" title="文件爬虫"></a>文件爬虫</h2><p>Command + R 列出文档中所有的CSS选择器</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSS3动画]]></title>
      <url>http://zy380196088.github.io./2016/04/22/CSS3-%E5%8A%A8%E7%94%BB/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>CSS3动画的属性主要分为三类：transform,transition,animation.</p>
<a id="more"></a>
<h2 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h2><h3 id="rotate"><a href="#rotate" class="headerlink" title="rotate()"></a>rotate()</h3><p>设置元素顺时针旋转的角度，参数x必须是以deg结尾的角度数或0,可为负数表示反向：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transform</span><span class="selector-pseudo">:rotate(x)</span>;</div></pre></td></tr></table></figure></p>
<h3 id="scale"><a href="#scale" class="headerlink" title="scale()"></a>scale()</h3><p>设置元素放大或者缩小的倍数，用法：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">scale</span>(<span class="selector-tag">a</span>);      <span class="comment">/*元素x和y方向均缩放a倍*/</span></div><div class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">scale</span>(<span class="selector-tag">a</span>, <span class="selector-tag">b</span>);   <span class="comment">/*元素x方向缩放a倍，y方向缩放b倍*/</span></div><div class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">scaleX</span>(<span class="selector-tag">a</span>);     <span class="comment">/*元素x方向缩放a倍，y方向不变*/</span></div><div class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">scaleY</span>(<span class="selector-tag">b</span>);     <span class="comment">/*元素y方向缩放b倍，x方向不变*/</span></div></pre></td></tr></table></figure></p>
<h3 id="translate"><a href="#translate" class="headerlink" title="translate()"></a>translate()</h3><p>设置元素的位移，用法：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translate</span>(<span class="selector-tag">a</span>, <span class="selector-tag">b</span>);  <span class="comment">/*元素x方向位移a，y方向位移b*/</span></div><div class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translateX</span>(<span class="selector-tag">a</span>);    <span class="comment">/*元素x方向位移a，y方向不变*/</span></div><div class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translateY</span>(<span class="selector-tag">b</span>);    <span class="comment">/*元素y方向位移b，x方向不变*/</span></div></pre></td></tr></table></figure></p>
<h3 id="skew"><a href="#skew" class="headerlink" title="skew()"></a>skew()</h3><p>设置元素倾斜的角度，参数均必须是以deg结尾的角度数或0，可为负数表示反向<br>：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">skew</span>(<span class="selector-tag">a</span>,<span class="selector-tag">b</span>);  <span class="comment">/*元素x方向逆时针倾斜角度a，y方向顺时针倾斜角度b*/</span></div><div class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">skewX</span>(<span class="selector-tag">a</span>);   <span class="comment">/*元素x方向逆时针倾斜角度a，y方向不变*/</span></div><div class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">skewY</span>(<span class="selector-tag">b</span>);   <span class="comment">/*元素y方向顺时针倾斜角度b，想方向不变*/</span></div></pre></td></tr></table></figure></p>
<h3 id="origin"><a href="#origin" class="headerlink" title="origin"></a>origin</h3><p>设置元素的悬挂点，元素的悬挂点即为它旋转和倾斜时的中心点。取值中的a、b可以是长度值、以%结尾的百分比或者left、top、right、bottom四个值。用法：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">transform-origin</span>: <span class="selector-tag">a</span> <span class="selector-tag">b</span>;  <span class="comment">/*元素的悬挂点为(a, b)*/</span></div></pre></td></tr></table></figure></p>
<h3 id="matrix"><a href="#matrix" class="headerlink" title="matrix"></a>matrix</h3><p>设置元素的变形矩阵,有点复杂，详情参考：<br><a href="http://www.zhangxinxu.com/wordpress/2012/06/css3-transform-matrix-矩阵/comment-page-2/" target="_blank" rel="external">理解CSS3 transform中的Matrix(矩阵)</a></p>
<h2 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h2><h3 id="transition-property"><a href="#transition-property" class="headerlink" title="transition-property"></a>transition-property</h3><p>指定transition效果作用的CSS属性</p>
<h3 id="transition-duration"><a href="#transition-duration" class="headerlink" title="transition-duration"></a>transition-duration</h3><p>动画效果持续的时间，值为以s结尾的秒数</p>
<h3 id="transition-timing-function"><a href="#transition-timing-function" class="headerlink" title="transition-timing-function"></a>transition-timing-function</h3><p>指定元素状态的变化速率函数，取值基于贝赛尔曲线函数：<br><img src="/images/css3-transition-timing-function.gif" alt=""></p>
<h3 id="transition-delay"><a href="#transition-delay" class="headerlink" title="transition-delay"></a>transition-delay</h3><p>动画效果推迟开始执行的时间，其值为以s结尾的秒数。<br>CSS3动画的生命周期如下图所示，从中可以清楚的看出duration和delay之间的关系：<br><img src="/images/css3-transition-delay.png" alt=""></p>
<h2 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h2><p>CSS3中真正的动画属性是animation，而前面的transform和transition都只是对DOM元素的变形或者是状态的过渡。实际上，CSS3所支持的动画效果只是填充动画，也就是说先设定整个动画生命周期中的几个关键状态（key  frame，关键帧），然后动画将自行计算并模拟关键帧之间的过渡。那么在设置animation的属性之前就必须先设定好关键帧了。<br>关键帧@keyframes的语法结构如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">keyframesNAME</span> &#123;</div><div class="line">         <span class="selector-tag">a</span>% &#123;</div><div class="line">         <span class="comment">/*CSS属性*/</span></div><div class="line">         &#125;</div><div class="line">         <span class="selector-tag">b</span>% &#123;</div><div class="line">        <span class="comment">/*CSS属性*/</span></div><div class="line">         &#125;</div><div class="line">         ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>NAME表示动画的名字；a%、b%表示以百分号结尾的百分数，用于设定该关键帧在动画生命周期中的位置；百分数后面的{ } 中则需要写成该关键帧状态下CSS属性的值。另外，如果同一个百分数值在@keyframes中出现多次，那么后出现的将覆盖先出现的；并且关键帧在@keyframes中时无序的。<br>设置完关键帧后就可以继续设定animation了。</p>
<h3 id="animation-name"><a href="#animation-name" class="headerlink" title="animation-name"></a>animation-name</h3><h3 id="animation-duration"><a href="#animation-duration" class="headerlink" title="animation-duration"></a>animation-duration</h3><h3 id="animation-timing-function"><a href="#animation-timing-function" class="headerlink" title="animation-timing-function"></a>animation-timing-function</h3><h3 id="animation-delay"><a href="#animation-delay" class="headerlink" title="animation-delay"></a>animation-delay</h3><h3 id="animation-iteration-count"><a href="#animation-iteration-count" class="headerlink" title="animation-iteration-count"></a>animation-iteration-count</h3><p>设定动画执行的次数，其值可以是数字也可以是infinite（循环执行）。</p>
<h3 id="animation-direction"><a href="#animation-direction" class="headerlink" title="animation-direction"></a>animation-direction</h3><p>设定动画执行的方向，其值可以是normal（正常顺序播放）或alternate（反向播放）。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[今日感想]]></title>
      <url>http://zy380196088.github.io./2016/04/21/%E4%BB%8A%E6%97%A5%E6%84%9F%E6%83%B3/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>想一步到位不行的。<br>每个台阶非得一步一步走。<br>by dad<br><a id="more"></a></p>
<p> 今天有点沮丧，毕业近两年，因为各种原因（说白了也是替自己的懒惰找借口），什么考驾照、考研、炒股……浑浑噩噩得就这么过着了，我居然沦落到靠卖艺为生＝ ＝，说沦落是不是有点太贬低自己，好歹小提琴也算门技术活。</p>
<p> 最开始走上这条路是在大二的时候，在同系（我是计算机系的＝ ＝）的同学的介绍下，在学校附近的一个楼盘开业上四重奏迎宾打了个酱油。当时也有想做兼职的想法，后来感觉怎么都是些发传单，推销产品之类， 一天也就100左右，费时钱少的活，于是作罢。第一次演出大概拉了半小时，演出费200，当时觉得好大一笔巨款（原谅我的天真无知，我又不是富二代），到现在想想，当时傻得可以，被坑这么惨，还乐的像朵花似的。</p>
<p> 后来，要分专业方向了，嵌入式和云计算。犹豫不决的，跟从了寝室的大部队选择了嵌入式，当时云计算虚得很完全不知道是什么。从此走上了c++的不归路，上课就浑浑噩噩得，下课精神抖擞。</p>
<p> 大三大四 ，加入寝室考研小分队，小提琴演出也是同时进行着的，可想当然，考研稳妥妥的没戏了。现在，领悟到这几年，除了赚得了一些零花钱之外，其实我一直在走下坡了。</p>
<p>在一篇关于房地产的新闻下偶然看到一句评论（只记得大致的意思，具体数据可能有出入）：“2005年，15万的存款，家里人让我买房，我选择买了辆车，从此我的人生走向了下坡路。”<br>莫名的戳中笑点。<br>我不想10年后，也发出这样无奈的感慨，一个选择真的可以改变很多。</p>
<p>我也不知道现在选择重新进军前端的选择是对是错，只是看到那些酷炫的网站还有app有种莫名的热血沸腾，那就朝着这个方向努力吧…</p>
<p>晚安，最后附送一个比较酷的网站：<br><a href="http://species-in-pieces.com" target="_blank" rel="external">拼图30</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac OS截图技巧]]></title>
      <url>http://zy380196088.github.io./2016/04/21/Mac-OS%E6%94%B9%E5%8F%98%E6%88%AA%E5%9B%BE%E9%BB%98%E8%AE%A4%E5%9C%B0%E5%9D%80/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="改变储存截图的默认地址和格式"><a href="#改变储存截图的默认地址和格式" class="headerlink" title="改变储存截图的默认地址和格式"></a>改变储存截图的默认地址和格式</h2><p>首先新建一个文件夹目录，右键，选择 拷贝路径 / 路径 选项。</p>
<h3 id="修改截图保存路径"><a href="#修改截图保存路径" class="headerlink" title="修改截图保存路径"></a>修改截图保存路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">defaults write com.apple.screencapture location 刚才创建的拷贝的路径(command+v)</div></pre></td></tr></table></figure>
<h3 id="保存为jpg格式文件。"><a href="#保存为jpg格式文件。" class="headerlink" title="保存为jpg格式文件。"></a>保存为jpg格式文件。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">defaults write com.apple.screencapture type jpg (修改文件名称为jpg)【括号里面的不要输入】</div></pre></td></tr></table></figure>
<h2 id="截取全屏：快捷键（Shift＋Command＋3）"><a href="#截取全屏：快捷键（Shift＋Command＋3）" class="headerlink" title="截取全屏：快捷键（Shift＋Command＋3）"></a>截取全屏：快捷键（Shift＋Command＋3）</h2><h2 id="截图窗口：快捷键（Shift-Command-4，然后按空格键）"><a href="#截图窗口：快捷键（Shift-Command-4，然后按空格键）" class="headerlink" title="截图窗口：快捷键（Shift+Command+4，然后按空格键）"></a>截图窗口：快捷键（Shift+Command+4，然后按空格键）</h2><h2 id="截取任意窗口：快捷键（Shift＋Command＋4）"><a href="#截取任意窗口：快捷键（Shift＋Command＋4）" class="headerlink" title="截取任意窗口：快捷键（Shift＋Command＋4）"></a>截取任意窗口：快捷键（Shift＋Command＋4）</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ajax学习笔记]]></title>
      <url>http://zy380196088.github.io./2016/04/21/Ajax%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="Ajax的作用"><a href="#Ajax的作用" class="headerlink" title="Ajax的作用"></a>Ajax的作用</h2><p>不重新加载整个网页的情况下，对网页的某部分进行更新。<br><a id="more"></a></p>
<h2 id="Ajax的原理"><a href="#Ajax的原理" class="headerlink" title="Ajax的原理"></a>Ajax的原理</h2><h3 id="XMLHttpRequest对象"><a href="#XMLHttpRequest对象" class="headerlink" title="XMLHttpRequest对象"></a>XMLHttpRequest对象</h3><p>通过在后台与服务器进行少量数据交换，使网页实现异步更新。</p>
<h3 id="创建XMLHttpRequest对象"><a href="#创建XMLHttpRequest对象" class="headerlink" title="创建XMLHttpRequest对象"></a>创建XMLHttpRequest对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xmlhttp;</div><div class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)&#123;</div><div class="line">	<span class="comment">//code for IE7+,Firefox , Chrome, Opera, Safari</span></div><div class="line">	xmlhttp = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">&#125;<span class="keyword">else</span>&#123;<span class="comment">//code for IE6,IE5</span></div><div class="line">	xmlhttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="XMLHttpRequest发送请求"><a href="#XMLHttpRequest发送请求" class="headerlink" title="XMLHttpRequest发送请求"></a>XMLHttpRequest发送请求</h3><p>两种方法</p>
<h4 id="open-method-url-async"><a href="#open-method-url-async" class="headerlink" title="open(method,url,async)"></a>open(method,url,async)</h4><p>规定请求的类型、url以及是否异步处理请求<br>method: 请求的类型;GET 或者 POST<br>url: 文件在服务器上的位置<br>async:true(异步)、false(同步)</p>
<h4 id="send-string"><a href="#send-string" class="headerlink" title="send(string)"></a>send(string)</h4><p>将请求发送到服务器<br>string:仅用于POST请求，GET请求不需填写</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://zy380196088.github.io./2016/04/19/hello-world/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git常用命令]]></title>
      <url>http://zy380196088.github.io./2016/04/16/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h2><pre><code>git config --global user.name “youname”
git config --global user.email “123456@example.com”
</code></pre>
<a id="more"></a>
## Git基础
### 查看配置信息
<pre><code>git config --list
git config -l
</code></pre>

<h3 id="初始化新仓库"><a href="#初始化新仓库" class="headerlink" title="初始化新仓库"></a>初始化新仓库</h3><pre><code>git init</code></pre>
初始化后，在当前目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。

### 跟踪文件
<pre><code>git add</code></pre>

<h3 id="跟踪全部文件"><a href="#跟踪全部文件" class="headerlink" title="跟踪全部文件"></a>跟踪全部文件</h3><pre><code>giat add .</code></pre>

<h3 id="提脚更新"><a href="#提脚更新" class="headerlink" title="提脚更新"></a>提脚更新</h3><pre><code>git commit -m "跟新描述"</code></pre>

<h3 id="添加原程仓库"><a href="#添加原程仓库" class="headerlink" title="添加原程仓库"></a>添加原程仓库</h3><pre><code>git remote add [shortname] [url]</code></pre>
例如:
<pre><code>git remote add origin git@github.com:yourname/yourRepo.git</code></pre>

<h3 id="上传推送到github"><a href="#上传推送到github" class="headerlink" title="上传推送到github"></a>上传推送到github</h3><pre><code>git push [remote-name] [branch-name]
git push origin master</code></pre>

<p>如果要把本地的 master 分支推送到origin服务器上(再次说明下，克隆操作会自动使用默认的master 和origin 名字)</p>
<h3 id="从远程仓库克隆"><a href="#从远程仓库克隆" class="headerlink" title="从远程仓库克隆"></a>从远程仓库克隆</h3><pre><code>git clone git://github.com/youname/project.git
git clone git@github.com:youname/project.git
git clone https://github.com/youname/project.git
</code></pre>

<h3 id="从原程仓库抓取数据"><a href="#从原程仓库抓取数据" class="headerlink" title="从原程仓库抓取数据"></a>从原程仓库抓取数据</h3><pre><code>git fetch [remote-name]</code></pre>

<h3 id="删除原程仓库"><a href="#删除原程仓库" class="headerlink" title="删除原程仓库"></a>删除原程仓库</h3><pre><code>git remote rm otigin</code></pre>

<h3 id="检查当前文件状态"><a href="#检查当前文件状态" class="headerlink" title="检查当前文件状态"></a>检查当前文件状态</h3><pre><code>git status</code></pre>

<h3 id="创建-gitginore文件"><a href="#创建-gitginore文件" class="headerlink" title="创建.gitginore文件"></a>创建.gitginore文件</h3><pre><code>touch .gitignore</code></pre>

<h3 id="查看修改之后-没有暂存起来的内容"><a href="#查看修改之后-没有暂存起来的内容" class="headerlink" title="查看修改之后 没有暂存起来的内容"></a>查看修改之后 没有暂存起来的内容</h3><pre><code>git diff</code></pre>

<h3 id="移除文件"><a href="#移除文件" class="headerlink" title="移除文件"></a>移除文件</h3><pre><code>git rm 文件名.后缀</code></pre>

<h3 id="重命名文件"><a href="#重命名文件" class="headerlink" title="重命名文件"></a>重命名文件</h3><pre><code>git mv oldname.后缀 newname.后缀</code></pre>

<h3 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h3><pre><code>git log</code></pre>

<h3 id="取消暂存"><a href="#取消暂存" class="headerlink" title="取消暂存"></a>取消暂存</h3><pre><code>git reset 文件名</code></pre>

<h2 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a>Git分支</h2><h3 id="创建名为name的分支"><a href="#创建名为name的分支" class="headerlink" title="创建名为name的分支"></a>创建名为name的分支</h3><pre><code>git branch name</code></pre>

<h3 id="切换到name分支（默认master分支）"><a href="#切换到name分支（默认master分支）" class="headerlink" title="切换到name分支（默认master分支）"></a>切换到name分支（默认master分支）</h3><pre><code>git checkout name</code></pre>

<p>上面两条命令可缩写为：</p>
<pre><code>git checkout -b name</code></pre>

<h3 id="删除name分支（如果该分支还未被合并则会提示错误，因为这样会丢失数据）"><a href="#删除name分支（如果该分支还未被合并则会提示错误，因为这样会丢失数据）" class="headerlink" title="删除name分支（如果该分支还未被合并则会提示错误，因为这样会丢失数据）"></a>删除name分支（如果该分支还未被合并则会提示错误，因为这样会丢失数据）</h3><pre><code>git branch -d name</code></pre>

<p>强制删除：<pre><code>git branch -D name</code></pre></p>
<h3 id="合并分支（先切换到master分支）"><a href="#合并分支（先切换到master分支）" class="headerlink" title="合并分支（先切换到master分支）"></a>合并分支（先切换到master分支）</h3><pre><code>git checkout master
git merge name</code></pre>

<h3 id="查看当前所有分支"><a href="#查看当前所有分支" class="headerlink" title="查看当前所有分支"></a>查看当前所有分支</h3><pre><code>git branch</code></pre>

<h3 id="查看各个分支最后一个提交对象的信息"><a href="#查看各个分支最后一个提交对象的信息" class="headerlink" title="查看各个分支最后一个提交对象的信息"></a>查看各个分支最后一个提交对象的信息</h3><pre><code>git branch -v</code></pre>

<h3 id="查看已经与当前分支合并的分支（已经合并的查出来后可以删掉）"><a href="#查看已经与当前分支合并的分支（已经合并的查出来后可以删掉）" class="headerlink" title="查看已经与当前分支合并的分支（已经合并的查出来后可以删掉）"></a>查看已经与当前分支合并的分支（已经合并的查出来后可以删掉）</h3><pre><code>git branch --merge</code></pre>

<h3 id="查看未与当前分支合并的分支"><a href="#查看未与当前分支合并的分支" class="headerlink" title="查看未与当前分支合并的分支"></a>查看未与当前分支合并的分支</h3><pre><code>git branch --no-merged</code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript中的this陷阱的收集]]></title>
      <url>http://zy380196088.github.io./2016/04/15/JavaScript%E4%B8%AD%E7%9A%84this%E9%99%B7%E9%98%B1%E7%9A%84%E6%94%B6%E9%9B%86/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>本文摘阅自<a href="https://segmentfault.com/a/1190000002640298" target="_blank" rel="external">JavaScript中的this陷阱的最全收集–没有之一</a><br><a id="more"></a></p>
<h2 id="global-this"><a href="#global-this" class="headerlink" title="global this"></a>global this</h2><p>在浏览器里，在全局范围内，this等价于window对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>); <span class="comment">//true</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>在浏览器里，在全局范围内，用var声明一个变量和给this或者window添加属性是等价的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">     <span class="keyword">var</span> foo = <span class="string">"bar"</span>;</div><div class="line">     <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo); <span class="comment">//logs "bar"</span></div><div class="line">     <span class="built_in">console</span>.log(<span class="built_in">window</span>.foo); <span class="comment">//logs "bar"</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>如果你在声明一个变量的时候没有使用var或者let(ECMAScript 6),你就是在给全局的this添加或者改变属性值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">      foo = <span class="string">"bar"</span>;</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">function</span> <span class="title">testThis</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        foo = <span class="string">"foo"</span>;</div><div class="line">      &#125;</div><div class="line">     <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo); <span class="comment">//logs "bar"</span></div><div class="line">     testThis();</div><div class="line">     <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo); <span class="comment">//logs "foo"</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>在node环境里，如果使用REPL(Read-Eval-Print Loop，简称REPL:读取-求值-输出,是一个简单的，交互式的编程环境)来执行程序,this并不是最高级的命名空间，最高级的是global.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt; this</div><div class="line">&#123; ArrayBuffer: [Function: ArrayBuffer],</div><div class="line">  Int8Array: &#123; [Function: Int8Array] BYTES_PER_ELEMENT: 1 &#125;,</div><div class="line">  Uint8Array: &#123; [Function: Uint8Array] BYTES_PER_ELEMENT: 1 &#125;,</div><div class="line">  ...</div><div class="line">&gt; global === this</div><div class="line">true</div></pre></td></tr></table></figure></p>
<p>在node环境里，如果执行一个js脚本，在全局范围内，this以一个空对象开始作为最高级的命名空间，这个时候，它和global不是等价的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">test.js脚本内容：</div><div class="line">console.log(this);</div><div class="line">console.log(this === global);</div><div class="line"></div><div class="line">REPL运行脚本：</div><div class="line">$ node test.js</div><div class="line">&#123;&#125;</div><div class="line">false</div></pre></td></tr></table></figure></p>
<p>在node环境里，在全局范围内，如果你用REPL执行一个脚本文件，用var声明一个变量并不会和在浏览器里面一样将这个变量添加给this。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">test.js:</div><div class="line"></div><div class="line">var foo = &quot;bar&quot;;</div><div class="line">console.log(this.foo);</div><div class="line"></div><div class="line">$ node test.js</div><div class="line">undefined</div></pre></td></tr></table></figure></p>
<p>但是如果你不是用REPL执行脚本文件，而是直接执行代码，结果和在浏览器里面是一样的(神坑)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; var foo = &quot;bar&quot;;</div><div class="line">&gt; this.foo</div><div class="line">  bar</div><div class="line">&gt; global.foo</div><div class="line">  bar</div></pre></td></tr></table></figure></p>
<p>在node环境里，用REPL运行脚本文件的时候，如果在声明变量的时候没有使用var或者let，这个变量会自动添加到global对象，但是不会自动添加给this对象。如果是直接执行代码，则会同时添加给global和this.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">test.js</div><div class="line"> foo = &quot;bar&quot;;</div><div class="line"> console.log(this.foo);</div><div class="line"> console.log(global.foo);</div><div class="line"></div><div class="line">$ node test.js</div><div class="line">  undefined</div><div class="line">  bar</div></pre></td></tr></table></figure></p>
<p>上面的八种情况可能大家已经绕晕了，总结起来就是：在<strong>浏览器</strong>里面<strong>this</strong>是老大，它等价于window对象，如果你声明一些全局变量(不管在任何地方)，这些变量都会作为this的属性。在node里面，有两种执行JavaScript代码的方式，一种是直接执行写好的<strong>JavaScript</strong>文件，另外一种是直接在里面执行<strong>一行行代码</strong>。对于直接运行一行行JavaScript代码的方式，global才是老大，this和它是等价的。在这种情况下，和浏览器比较相似，也就是声明一些全局变量会自动添加给老大global，顺带也会添加给this。但是在node里面直接脚本文件就不一样了，你声明的全局变量不会自动添加到this，但是会添加到global对象。所以相同点是，在全局范围内，全局变量终究是属于老大的。</p>
<h2 id="function-this"><a href="#function-this" class="headerlink" title="function this"></a>function this</h2><p>无论是在浏览器环境还是node环境， 除了在DOM事件处理程序里或者给出了thisArg(接下来会讲到)外，如果不是用new调用，在函数里面使用this都是指代全局范围的this。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    foo = <span class="string">"bar"</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">testThis</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    	<span class="keyword">this</span>.foo = <span class="string">"foo"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo); <span class="comment">//logs "bar"</span></div><div class="line">    testThis();</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo); <span class="comment">//logs "foo"</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>除非你使用严格模式，这时候this就会变成undefined。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    foo = <span class="string">"bar"</span>; </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">testThis</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="meta">    	"use strict"</span>;</div><div class="line">    	<span class="keyword">this</span>.foo = <span class="string">"foo"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">   	<span class="built_in">console</span>.log(<span class="keyword">this</span>.foo); <span class="comment">//logs "bar"</span></div><div class="line">    testThis();  <span class="comment">//Uncaught TypeError: Cannot set property 'foo' of undefined </span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>如果你在调用函数的时候在前面使用了new，this就会变成一个新的值，和global的this脱离干系。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    foo = <span class="string">"bar"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">testThis</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    	<span class="keyword">this</span>.foo = <span class="string">"foo"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo); <span class="comment">//logs "bar"</span></div><div class="line">    <span class="keyword">new</span> testThis();</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo); <span class="comment">//logs "bar"</span></div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> testThis().foo); <span class="comment">//logs "foo"</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="prototype-this"><a href="#prototype-this" class="headerlink" title="prototype this"></a>prototype this</h2><p>你创建的每一个函数都是函数对象。它们会自动获得一个特殊的属性prototype，你可以给这个属性赋值。当你用new的方式调用一个函数的时候，你就能通过this访问你给prototype赋的值了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123;</div><div class="line">       <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo);</div><div class="line">&#125;</div><div class="line"></div><div class="line">Thing.prototype.foo = <span class="string">"bar"</span>;</div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing(); <span class="comment">//logs "bar"</span></div><div class="line"><span class="built_in">console</span>.log(thing.foo);  <span class="comment">//logs "bar"</span></div></pre></td></tr></table></figure></p>
<p>当你使用new为你的函数创建多个实例的时候，这些实例会共享你给prototype设定的值。对于下面的例子，当你调用this.foo的时候，都会返回相同的值，除非你在某个实例里面重写了自己的this.foo<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Thing.prototype.foo = <span class="string">"bar"</span>;</div><div class="line">Thing.prototype.logFoo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo);</div><div class="line">&#125;</div><div class="line">Thing.prototype.setFoo = <span class="function"><span class="keyword">function</span> (<span class="params">newFoo</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.foo = newFoo;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> thing1 = <span class="keyword">new</span> Thing();</div><div class="line"><span class="keyword">var</span> thing2 = <span class="keyword">new</span> Thing();</div><div class="line"></div><div class="line">thing1.logFoo(); <span class="comment">//logs "bar"</span></div><div class="line">thing2.logFoo(); <span class="comment">//logs "bar"</span></div><div class="line">thing1.setFoo(<span class="string">"foo"</span>);</div><div class="line">thing1.logFoo(); <span class="comment">//logs "foo";</span></div><div class="line">thing2.logFoo(); <span class="comment">//logs "bar";</span></div><div class="line"></div><div class="line">thing2.foo = <span class="string">"foobar"</span>;</div><div class="line">thing1.logFoo(); <span class="comment">//logs "foo";</span></div><div class="line">thing2.logFoo(); <span class="comment">//logs "foobar";</span></div></pre></td></tr></table></figure></p>
<p>实例里面的this是一个特殊的对象。你可以把this想成一种获取prototype的值的一种方式。当你在一个实例里面直接给this添加属性的时候，会隐藏prototype中与之同名的属性。如果你想访问prototype中的这个属性值而不是你自己设定的属性值，你可以通过在实例里面删除你自己添加的属性的方式来实现。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Thing.prototype.foo = <span class="string">"bar"</span>;</div><div class="line">Thing.prototype.logFoo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo);</div><div class="line">&#125;</div><div class="line">Thing.prototype.setFoo = <span class="function"><span class="keyword">function</span> (<span class="params">newFoo</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.foo = newFoo;</div><div class="line">&#125;</div><div class="line">Thing.prototype.deleteFoo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.foo;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing();</div><div class="line">thing.setFoo(<span class="string">"foo"</span>);</div><div class="line">thing.logFoo(); <span class="comment">//logs "foo";</span></div><div class="line">thing.deleteFoo();</div><div class="line">thing.logFoo(); <span class="comment">//logs "bar";</span></div><div class="line">thing.foo = <span class="string">"foobar"</span>;</div><div class="line">thing.logFoo(); <span class="comment">//logs "foobar";</span></div><div class="line"><span class="keyword">delete</span> thing.foo;</div><div class="line">thing.logFoo(); <span class="comment">//logs "bar";</span></div></pre></td></tr></table></figure></p>
<p>或者你也能直接通过引用函数对象的prototype 来获得你需要的值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Thing.prototype.foo = <span class="string">"bar"</span>;</div><div class="line">Thing.prototype.logFoo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo, Thing.prototype.foo);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing();</div><div class="line">thing.foo = <span class="string">"foo"</span>;</div><div class="line">thing.logFoo(); <span class="comment">//logs "foo bar";</span></div></pre></td></tr></table></figure></p>
<p>通过一个函数创建的实例会共享这个函数的prototype属性的值，如果你给这个函数的prototype赋值一个Array，那么所有的实例都会共享这个Array，除非你在实例里面重写了这个Array，这种情况下，函数的prototype的Array就会被隐藏掉。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Thing.prototype.things = [];</div><div class="line"><span class="keyword">var</span> thing1 = <span class="keyword">new</span> Thing();</div><div class="line"><span class="keyword">var</span> thing2 = <span class="keyword">new</span> Thing();</div><div class="line">thing1.things.push(<span class="string">"foo"</span>);</div><div class="line"><span class="built_in">console</span>.log(thing2.things); <span class="comment">//logs ["foo"]</span></div></pre></td></tr></table></figure></p>
<p>给一个函数的prototype赋值一个Array通常是一个错误的做法。如果你想每一个实例有他们专属的Array，你应该在函数里面创建而不是在prototype里面创建。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.things = [];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> thing1 = <span class="keyword">new</span> Thing();</div><div class="line"><span class="keyword">var</span> thing2 = <span class="keyword">new</span> Thing();</div><div class="line">thing1.things.push(<span class="string">"foo"</span>);</div><div class="line"><span class="built_in">console</span>.log(thing1.things); <span class="comment">//logs ["foo"]</span></div><div class="line"><span class="built_in">console</span>.log(thing2.things); <span class="comment">//logs []</span></div></pre></td></tr></table></figure></p>
<p>实你可以通过把多个函数的prototype链接起来的从而形成一个原型链，因此this就会魔法般地沿着这条原型链往上查找直到找你你需要引用的值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Thing1.prototype.foo = <span class="string">"bar"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing2</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Thing2.prototype = <span class="keyword">new</span> Thing1();</div><div class="line"></div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing2();</div><div class="line"><span class="built_in">console</span>.log(thing.foo); <span class="comment">//logs "bar"</span></div></pre></td></tr></table></figure></p>
<p>一些人利用原型链的特性来在JavaScript模仿经典的面向对象的继承方式。任何给用于构建原型链的函数的this的赋值的语句都会隐藏原型链上游的相同的属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Thing1.prototype.foo = <span class="string">"bar"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing2</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.foo = <span class="string">"foo"</span>;</div><div class="line">&#125;</div><div class="line">Thing2.prototype = <span class="keyword">new</span> Thing1();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing3</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Thing3.prototype = <span class="keyword">new</span> Thing2();</div><div class="line"></div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing3();</div><div class="line"><span class="built_in">console</span>.log(thing.foo); <span class="comment">//logs "foo"</span></div></pre></td></tr></table></figure></p>
<p>在prototype里面定义的方法里面使用this会影响到当前实例的原型链的上游的this。这意味着你直接给this赋值的时候，隐藏了原型链上游的相同的属性值。这个实例的任何方法都会使用这个最新的值而不是原型里面定义的这个相同的值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Thing1.prototype.foo = <span class="string">"bar"</span>;</div><div class="line">Thing1.prototype.logFoo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing2</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.foo = <span class="string">"foo"</span>;</div><div class="line">&#125;</div><div class="line">Thing2.prototype = <span class="keyword">new</span> Thing1();</div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing2();</div><div class="line">thing.logFoo(); <span class="comment">//logs "foo";</span></div></pre></td></tr></table></figure></p>
<p>在JavaScript里面你可以嵌套函数，也就是你可以在函数里面定义函数。嵌套函数可以通过闭包捕获父函数的变量，但是这个函数没有继承this.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Thing.prototype.foo = <span class="string">"bar"</span>;</div><div class="line">Thing.prototype.logFoo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> info = <span class="string">"attempting to log this.foo:"</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doIt</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(info, <span class="keyword">this</span>.foo);</div><div class="line">    &#125;</div><div class="line">    doIt();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing();</div><div class="line">thing.logFoo();  <span class="comment">//logs "attempting to log this.foo: undefined"</span></div></pre></td></tr></table></figure></p>
<p>在doIt里面的this是global对象或者在严格模式下面是undefined。这是造成很多不熟悉JavaScript的人深陷 this陷阱的根源。在这种情况下事情变得非常糟糕，就像你把一个实例的方法当作一个值，把这个值当作函数参数传递给另外一个函数但是却不把这个实例传递给这个函数一样。在这种情况下，一个方法里面的环境变成了全局范围，或者在严格模式下面的undefined。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Thing.prototype.foo = <span class="string">"bar"</span>;</div><div class="line">Thing.prototype.logFoo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo);   </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doIt</span>(<span class="params">method</span>) </span>&#123;</div><div class="line">    method();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing();</div><div class="line">thing.logFoo(); <span class="comment">//logs "bar"</span></div><div class="line">doIt(thing.logFoo); <span class="comment">//logs undefined</span></div></pre></td></tr></table></figure></p>
<p>我喜欢先把this捕获到一个变量里面，通常这个变量叫做self，来避免上面这种情况的发生。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Thing.prototype.foo = <span class="string">"bar"</span>;</div><div class="line">Thing.prototype.logFoo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">var</span> info = <span class="string">"attempting to log this.foo:"</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doIt</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(info, self.foo);</div><div class="line">    &#125;</div><div class="line">    doIt();</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing();</div><div class="line">thing.logFoo();  <span class="comment">//logs "attempting to log this.foo: bar"</span></div></pre></td></tr></table></figure></p>
<p>但是当需要把一个方法作为一个值传递给一个函数的时候并不管用。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Thing.prototype.foo = <span class="string">"bar"</span>;</div><div class="line">Thing.prototype.logFoo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </div><div class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doIt</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(self.foo);</div><div class="line">    &#125;</div><div class="line">    doIt();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doItIndirectly</span>(<span class="params">method</span>) </span>&#123;</div><div class="line">    method();</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing();</div><div class="line">thing.logFoo(); <span class="comment">//logs "bar"</span></div><div class="line">doItIndirectly(thing.logFoo); <span class="comment">//logs undefined</span></div></pre></td></tr></table></figure></p>
<p>可以通过bind将实例和方法一切传递给函数来解决这个问题，bind是一个函数定义在所有函数和方法的函数对象上面.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Thing.prototype.foo = <span class="string">"bar"</span>;</div><div class="line">Thing.prototype.logFoo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doIt</span>(<span class="params">method</span>) </span>&#123;</div><div class="line">    method();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing();</div><div class="line">doIt(thing.logFoo.bind(thing)); <span class="comment">//logs bar</span></div></pre></td></tr></table></figure></p>
<p>同样可以使用apply和call来在新的上下文中调用方法或函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Thing.prototype.foo = <span class="string">"bar"</span>;</div><div class="line">Thing.prototype.logFoo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doIt</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo);</div><div class="line">    &#125;</div><div class="line">    doIt.apply(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doItIndirectly</span>(<span class="params">method</span>) </span>&#123;</div><div class="line">    method();</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing();</div><div class="line">doItIndirectly(thing.logFoo.bind(thing)); <span class="comment">//logs bar</span></div></pre></td></tr></table></figure></p>
<p>可以用bind来代替任何一个函数或者方法的this，即便它没有赋值给实例的初始prototype。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Thing.prototype.foo = <span class="string">"bar"</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logFoo</span>(<span class="params">aStr</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(aStr, <span class="keyword">this</span>.foo);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing();</div><div class="line">logFoo.bind(thing)(<span class="string">"using bind"</span>); <span class="comment">//logs "using bind bar"</span></div><div class="line">logFoo.apply(thing, [<span class="string">"using apply"</span>]); <span class="comment">//logs "using apply bar"</span></div><div class="line">logFoo.call(thing, <span class="string">"using call"</span>); <span class="comment">//logs "using call bar"</span></div><div class="line">logFoo(<span class="string">"using nothing"</span>); <span class="comment">//logs "using nothing undefined"</span></div></pre></td></tr></table></figure></p>
<p>应该避免在构造函数里面返回任何东西，因为这可能代替本来应该返回的实例。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="keyword">return</span> &#123;&#125;;</div><div class="line">&#125;</div><div class="line">Thing.prototype.foo = <span class="string">"bar"</span>;</div><div class="line"></div><div class="line">Thing.prototype.logFoo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing();</div><div class="line">thing.logFoo(); <span class="comment">//Uncaught TypeError: undefined is not a function</span></div></pre></td></tr></table></figure></p>
<p>但如果你在构造函数里面返回了一个原始值，上面所述的情况并不会发生并且返回语句被忽略了。最好不要在你将通过new调用的构造函数里面返回任何类型的数据，即便你知道自己正在做什么。如果你想创建一个工厂模式，通过一个函数来创建一个实例，这个时候不要使用new来调用函数。当然这个建议是可选的。</p>
<p>可以通过使用Object.create来避免使用new，这样同样能够创建一个实例。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Thing.prototype.foo = <span class="string">"bar"</span>;</div><div class="line"></div><div class="line">Thing.prototype.logFoo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> thing =  <span class="built_in">Object</span>.create(Thing.prototype);</div><div class="line">thing.logFoo(); <span class="comment">//logs "bar"</span></div></pre></td></tr></table></figure></p>
<p>在这种情况下并不会调用构造函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.foo = <span class="string">"foo"</span>;</div><div class="line">&#125;</div><div class="line">Thing.prototype.foo = <span class="string">"bar"</span>;</div><div class="line">Thing.prototype.logFoo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> thing =  <span class="built_in">Object</span>.create(Thing.prototype);</div><div class="line">thing.logFoo(); <span class="comment">//logs "bar"</span></div></pre></td></tr></table></figure></p>
<p>因为Object.create不会调用构造函数的特性在你继承模式下你想通过原型链重写构造函数的时候非常有用.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.foo = <span class="string">"foo"</span>;</div><div class="line">&#125;</div><div class="line">Thing1.prototype.foo = <span class="string">"bar"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing2</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.logFoo(); <span class="comment">//logs "bar"</span></div><div class="line">    Thing1.apply(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">this</span>.logFoo(); <span class="comment">//logs "foo"</span></div><div class="line">&#125;</div><div class="line">Thing2.prototype = <span class="built_in">Object</span>.create(Thing1.prototype);</div><div class="line">Thing2.prototype.logFoo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing2();</div></pre></td></tr></table></figure></p>
<h2 id="object-this"><a href="#object-this" class="headerlink" title="object this"></a>object this</h2><p>在一个对象的一个函数里，你可以通过this来引用这个对象的其他属性。这个用new来新建一个实例是不一样的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">foo</span>: <span class="string">"bar"</span>,</div><div class="line">    <span class="attr">logFoo</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo);</div><div class="line">   &#125;</div><div class="line">&#125;;</div><div class="line">obj.logFoo(); <span class="comment">//logs "bar"</span></div></pre></td></tr></table></figure></p>
<p>注意，没有使用new，没有使用Object.create，也没有使用函数调用创建一个对象。你也可以将对象当作一个实例将函数绑定到上面。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">foo</span>: <span class="string">"bar"</span></div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">logFoo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo);</div><div class="line">&#125;</div><div class="line">logFoo.apply(obj); <span class="comment">//logs "bar"</span></div></pre></td></tr></table></figure></p>
<p>当你用这种方式使用this的时候，并不会越出当前的对象。只有有相同直接父元素的属性才能通过this共享变量.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">foo</span>: <span class="string">"bar"</span>,</div><div class="line">    <span class="attr">deeper</span>: &#123;</div><div class="line">        <span class="attr">logFoo</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">obj.deeper.logFoo(); <span class="comment">//logs undefined</span></div></pre></td></tr></table></figure></p>
<p>可以直接通过对象引用你需要的属性.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">foo</span>: <span class="string">"bar"</span>,</div><div class="line">    <span class="attr">deeper</span>: &#123;</div><div class="line">        <span class="attr">logFoo</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(obj.foo);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">obj.deeper.logFoo(); <span class="comment">//logs "bar"</span></div></pre></td></tr></table></figure></p>
<h2 id="DOM-event-this"><a href="#DOM-event-this" class="headerlink" title="DOM event this"></a>DOM event this</h2><p>在一个HTML DOM事件处理程序里面，this始终指向这个处理程序被所绑定到的HTML DOM节点<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Listener</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"foo"</span>).addEventListener(<span class="string">"click"</span>,</div><div class="line">      <span class="keyword">this</span>.handleClick);</div><div class="line">&#125;</div><div class="line">Listener.prototype.handleClick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//logs "&lt;div id="foo"&gt;&lt;/div&gt;"</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> listener = <span class="keyword">new</span> Listener();</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"foo"</span>).click();</div></pre></td></tr></table></figure></p>
<p>除非你自己通过bind切换了上下文.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Listener</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"foo"</span>).addEventListener(<span class="string">"click"</span>, </div><div class="line">        <span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>));</div><div class="line">&#125;</div><div class="line">Listener.prototype.handleClick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//logs Listener &#123;handleClick: function&#125;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> listener = <span class="keyword">new</span> Listener();</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"foo"</span>).click();</div></pre></td></tr></table></figure></p>
<h2 id="HTML-this"><a href="#HTML-this" class="headerlink" title="HTML this"></a>HTML this</h2><p>在HTML节点的属性里面，你可以放置JavaScript代码，this指向了这个元素.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"foo"</span> <span class="attr">onclick</span>=<span class="string">"console.log(this);"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"foo"</span>).click(); <span class="comment">//logs &lt;div id="foo"...</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="override-this"><a href="#override-this" class="headerlink" title="override this"></a>override this</h2><p>不能重写this，因为它是保留字。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="keyword">var</span> <span class="keyword">this</span> = &#123;&#125;;  <span class="comment">// Uncaught SyntaxError: Unexpected token this </span></div><div class="line">&#125;</div><div class="line"><span class="built_in">eval</span> <span class="keyword">this</span></div></pre></td></tr></table></figure></p>
<p>可以通过eval来访问this,但会造成一个安全问题，除非不用eval，没有其他方式来避免这个问题。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span> (<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Thing.prototype.foo = <span class="string">"bar"</span>;</div><div class="line">Thing.prototype.logFoo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">eval</span>(<span class="string">"console.log(this.foo)"</span>); <span class="comment">//logs "bar"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing();</div><div class="line">thing.logFoo();</div></pre></td></tr></table></figure></p>
<p>在通过Function来创建一个函数的时候，同样能够访问this。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span> (<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Thing.prototype.foo = <span class="string">"bar"</span>;</div><div class="line">Thing.prototype.logFoo = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"console.log(this.foo);"</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing();</div><div class="line">thing.logFoo(); <span class="comment">//logs "bar"</span></div></pre></td></tr></table></figure></p>
<h2 id="with-this"><a href="#with-this" class="headerlink" title="with this"></a>with this</h2><p>可以通过with来将this添加到当前的执行环境，并且读写this的属性的时候不需要通过this.但许多人认为这样使用是不好的因为with本身就饱受争议。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span> (<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Thing.prototype.foo = <span class="string">"bar"</span>;</div><div class="line">Thing.prototype.logFoo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">with</span> (<span class="keyword">this</span>) &#123;</div><div class="line">        <span class="built_in">console</span>.log(foo);</div><div class="line">        foo = <span class="string">"foo"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing();</div><div class="line">thing.logFoo(); <span class="comment">// logs "bar"</span></div><div class="line"><span class="built_in">console</span>.log(thing.foo); <span class="comment">// logs "foo"</span></div></pre></td></tr></table></figure></p>
<h2 id="jQuery-this"><a href="#jQuery-this" class="headerlink" title="jQuery this"></a>jQuery this</h2><p>和HTML DOM元素节点的事件处理程序一样，在许多情况下JQuery的this都指向HTML元素节点。这在事件处理程序和一些方便的方法中都是管用的，比如$.each.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"foo bar1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"foo bar2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">$(<span class="string">".foo"</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//logs &lt;div class="foo...</span></div><div class="line">&#125;);</div><div class="line">$(<span class="string">".foo"</span>).on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//logs &lt;div class="foo...</span></div><div class="line">&#125;);</div><div class="line">$(<span class="string">".foo"</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.click();</div><div class="line">&#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="thisArg-this"><a href="#thisArg-this" class="headerlink" title="thisArg this"></a>thisArg this</h2><p>如果你用过underscore.js 或者 lo-dash 你可能知道许多类库的方法可以通过一个叫做thisArg 的函数参数来传递实例，这个函数参数会作为this的上下文。举个例子，这适用于_.each。原生的JavaScript在ECMAScript 5的时候也允许函数传递一个thisArg参数了，比如forEach。事实上，之前阐述的bind，apply和call的使用已经给你创造了传递thisArg参数给函数的机会。这个参数将this绑定为你所传递的对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thing</span>(<span class="params">type</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.type = type;</div><div class="line">&#125;</div><div class="line">Thing.prototype.log = <span class="function"><span class="keyword">function</span> (<span class="params">thing</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.type, thing);</div><div class="line">&#125;</div><div class="line">Thing.prototype.logThings = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</div><div class="line">   arr.forEach(<span class="keyword">this</span>.log, <span class="keyword">this</span>); <span class="comment">// logs "fruit apples..."</span></div><div class="line">   _.each(arr, <span class="keyword">this</span>.log, <span class="keyword">this</span>); <span class="comment">//logs "fruit apples..."</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thing(<span class="string">"fruit"</span>);</div><div class="line">thing.logThings([<span class="string">"apples"</span>, <span class="string">"oranges"</span>, <span class="string">"strawberries"</span>, <span class="string">"bananas"</span>]);</div></pre></td></tr></table></figure></p>
<p>这使得代码变得更加简介，因为避免了一大堆bind语句、函数嵌套和this暂存的使用。</p>
]]></content>
    </entry>
    
  
  
</search>
